index,question,answer_1,answer_2,answer_3,answer_4,answer_5,answer_6,answer_7,answer_8,answer_9,answer_10,answer_11,answer_12,answer_13,answer_14,answer_15,answer_16,answer_17,answer_18,answer_19,answer_20
1,为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,"IT界有个万人皆知的行业准则：不要重复造轮子。
它的意思是，你可以自己造的玩，但是如果人家已经有足够好的轮子，你就不要试图，甚至是通过各种手段，试图去取代这个轮子的地位。
同理，如果某个学科已经有足够好的教材，您没那水平编出更好的教材，就乖乖地用人家的教材就好了，这样既节省资源，同时也能保证中国学生看到的教材内的思想和国外学生是同步的。
中国大学有个毛病，就是什么东西也想搞个自己的出来。
就比如线性代数教材，如此重要的学科，用脚趾头也能想见，优秀的国外教材已经遍地走了，但是各个大学仍然要请自己学校的某几个水平堪忧，语言表达能力菜得扣脚的老师来编写一个教材，最后命其名曰“精品教材”，而这些垃圾教材坑害的是一批一批的优秀学生，当然如果能被一直坑下去的，自主学习能力也是有点问题...
可是世界上大多数学生就是这样，他们会乖乖地去上课，听老师念PPT，然后认真看学校推荐用的课本，然后当这些垃圾教材搞得他们一头雾水的时候，他们会用“这门课难”来安慰自己，最后学的不明不白，草草了事。
我刚来中国科学技术大学的时候，上学期的线性代数，学校用的教材就是所谓学校老师自己编的“精品教材”，这个教材是面向非数学专业学生的，我就看了三页就已经搞不明白它在说什么了，可以想象，这样的教材迫害了多少学生，耗费了多少学生的时间。
而且可以想象，编这本教材的老师们从中肯定可以得到补贴，能不能得到版税不清楚，但是补贴是肯定有的，而且同时这本教材的编写也能成为所谓的资金申请的理由，“为中国科学技术大学量身定制的教材”这句话多么好听啊，可事实上呢？
由于答主英文水平过关，当时直接去图书馆借了一本英文的线性代数教材，面向数学专业的，从第一页开始看下去，便已停不下来，连住一看就是二三十页，看完感觉畅酣淋漓，舒畅至极，从那以后，线性代数课我再也没去过，除了最后的考试我出席了。
那次期末题不简单，我考了95分。
线性代数资源推荐，详情参见本人文章：
我自己知道，我并不聪明，若是我不看那本英文教材，我恐怕能考70分不错了。
这就是事实，还有很多例子，比如贵校叶邦角编的的《电磁学》和格利菲斯的《电动力学》在易懂性和深刻性上的巨大差异，前者啥也看不懂，后者看的畅酣淋漓。
《大学物理》与《费恩曼物理学讲义》的惊人对比，前者看的想要睡觉，后者看的我想要拍桌，甚至感动地流泪，甚至看完兴奋地睡不着觉。
附费恩曼讲义的链接：
The Feynman Lectures on Physics
纸质教材？？买教材？？学校让你买教材？？没有学生买教材，那这些教材不就无法带来收入了？
教材是用来教育的？No No No, 教材是用来挣钱的，相信我。
马克思主义原理你们都上过吧？这个教材是不是必须买？它为什么不做成pdf版，在网上开源呢？
每年这本教材能卖一千万册吧？没这些钱谁来养那些教材编写委员会呢？
李重光的乐理书，可能在你们眼里还算不错，但是我看完之后还是搞不明白它说的这一切是怎么运用在作曲中的，后来我有了VPN，在油管上打开了新世界，在众多即兴，乐理的视频教程中，我现在可以在任何一首歌里面即兴演奏，写歌也是手到擒来。
音乐学习的最好方法不是看书，而是看视频，因为视频是声音和图像的结合体，比如我现在讲Lydian音阶，它的音阶结构是 1 2 3 #4 5 6 7，只讲这个其实你并没有真正懂它的音响效果，这个youtube频道从图像，PPT，演奏示例，记忆法等如手，教你如何记忆指板位置，如何进行特定和声进行下的solo即兴和创作。
详情参见本人文章：
这个世界上不存在真正无法理解的知识，只存在不会表达的糟糕教学者，大家都是人，为什么你能懂的东西我就懂不了呢？就算我笨一些，能在你脑子里运行的东西也能在我的脑子里运行，只不过可能速度慢一些。
教材的目的是什么？教材的目的是让学生尽可能地不依靠任何外界帮助，仅仅依靠你的教材就能学会你想表达的知识。
可以说，我国在此方面做的奇差无比。
国内这些教材其实牵动了很多人的利益，比如学校的利益，编写者的利益等等，中国的大学可能觉得教材都用西方的，是文化不强盛的表现，总想自己搞一个，这正是不自信的表现。
你要是能编出比国外优秀教材更优秀的，那完全可以啊！
问题是你能吗？
当然还有一点就是，国内的教材更新速度捉急，很多新东西早就出来了，教材上还写着那些旧东西，考试还是按照这个教材考...
我一直觉得中国学生整体上是比较聪明的，如果我们能像美国学生那样直接接触到整个世界的优质教学信息，那我们的未来不敢想象。
不过一个学生如果自己不会去寻求改变，看的破教材还不知道换更好的，上不了Google还不舍得花钱买V*N，那这样的学生可能也干不成什么...
国外的大部分经典教材，我是说经典教材哦，不是所有！！经典教材是国外教材的一个很小的子集！ 差不多都有免费的pdf版本，直接下载就好，这对于那些没有机会接受高等教育，又买不起好教材的人是很友好的，而且不仅如此，教材配套的习题集，答案等往往也可以直接下载，反观国内的教材，一方面习题没答案，然后老师告诉你们习题最怕有答案，但与此同时老师也没有能力建立起一个足够高效的机制能马上让学生知道他们的结果是否正确，就相当于，不能给你肉吃，还要叫你多吃素，吃肉会长胖。
普林斯顿的《Algorithms 4》是业内广受好评的教材，虽然叫算法，事实上数据结构和算法的内容都有，网址：
Algorithms, 4th Edition
在页面的左边，可以直接这样寻找自己想要的内容，发挥了电子图书的优势，节省了搜索目录的时间。
在归并算法的讲解中，可以直接点击Merge.java跳转至实现该ADT的代码：
这就是我为什么不喜欢看纸质书，因为太麻烦了...翻来翻去的，真的累。
这本书有一个标准库，有绘图，排序等等，你可以直接在左下方搜索标准库里的某个API，看到该API的官方文档。
测试用例，作业，PPT等等，都直接点击就好。
我试问国内的哪个计算机教材这样做了？你恐怕是下载个pdf版都得在什么微盘，百度云，或是百度文库里面下载吧？
来，你告诉我，谭浩强的《C语言程序设计》的开源网站在哪？让我瞻仰一下？没有？
哦。
我觉得国内教材编写者最大的问题就是：动机不纯。
对于音乐行业来讲，如果教材编的太好，学生就不想找老师了...那这些音乐水平高不成低不就的人，饭碗谁给保证呢？
这个逻辑其实挺简单的，就是：你说想要看懂这个教材必须找个好老师给你讲，那你这个所谓的好老师为啥不把他讲的写成教材呢？这样大家不是就都看懂了？哪来那么多麻烦事？
事实上一个人编写的教材应该是比这个讲课要更好懂的，因为一个人写出来的东西往往是经过了细致思考的结果，而凭空就说的东西往往会出问题，那如果一个人教材写的奇烂无比，他的课我也建议你别去了，误人子弟。
所以啊，现在掌握大学权力的人，都是高考刚恢复不就参加高考的那批人，他们眼中的世界和我们年轻人眼中的不太一样，再过二十年，等我们成为了掌权者，也许这一切会变好。
学校怎么做是学校的事，你怎么做，还是看你自己。
谢谢。

看了大家的回复和评论，我挺开心的，这个答案火也是意料之中，但是能获得这么多人的认同，我深表荣幸，有人说英语差看不了英文教材的，我想说，英语的学习其实是自然而然地事情，不要在学中做，而要在用中学，忘掉中文，去完全投入英文的环境中，很快你就会适应这一切。事实上，如果你说你英文教材有些单词不认识，那我想反问你，难道这个东西翻译成中文你就一定认识了？比如线性代数的秩（Rank），你不知道秩是什么意思对吧？但你反而大概知道Rank的意思。
还有人说，我们不能这样直接用别人的，要做出自己的，这个想法其实要真往大了说，我觉得挺肤浅的，别人造个加速器，我们要造个更大的，别人造个桥，我们也要造个更长的，快歇歇吧，干好自己的本职工作就很好了。
世界上只有两种东西有真正的价值，一种是创世人所未见，一种是对已见之事的推进与优化，做一个比现有的还烂的东西，本身是没价值的，只能当作练习使用，这句话的逻辑已经很明晰了，再反驳我是不会回复的。
不要过分相信教材的权威性，也不要把老师和教授当神看，大家都是普通人，老师让你做的，也许并不是你想要的，我们生在互联网时代，已经给了我们擦亮眼睛，检验真理的能力了，我们也没必要迷信任何权威。
这世界上谎言很多，要把眼睛擦亮，做个明白人。
第二次修改答案，给大家看看如何击退杠精：
用一种调侃的语气顺着杠精说，他们就噎着说不出话了~
杠精快来~我不怕~
","这个答案请勿转载。

我打个比方，大家看完我讲的之后（哪怕看似与计算机无关）、估计就能想明白怎回事了。

国内的音乐理论逻辑体系基本上就是在「李重光＋斯波索宾」这两套教材构筑的。
可能也有其它的音乐理论教材，但基本上都围绕这一套展开。
特别是斯波索宾，从苏联体系而来。
知乎有很多对这些教材的短版的讨论，我就不赘述了。

我本科是在加拿大读的（Digital Audio Arts 专业，学位是 Bachelor of Music），现已毕业了。
在本科阶段，拯救了我调性和声理论学习的，是岛冈让的《総合和声：実技・分析・原理》。
（完全模组化设计，自学者可以自己安排学习节奏、且书中的三大部分彼此互补。）
我惊讶於世间居然有对自学者如此友好的音乐理论教材，
忽然想起我首次出国之前看李重光乐理半天看不懂的样子，似乎明白了些什么。

之后一段时间内，我在知乎推荐岛冈让的《総合和声：実技・分析・原理》这套教材，
也有想著有朝一日等自己日语精进到一定地步了、就考虑翻译这本教材。
但我现在多了几份恐惧。

我在回答某些乐理问题时，很多人说我自造术语、甚至有人专门以此攻击我。
我专门买来斯波索宾的教材的简体中文译本（现在被我扔在加拿大了），才发现：
岛冈让的教材当中的术语逻辑体系，与国内现行这套苏修型音乐理论术语逻辑体系，有明显差异。

我忽然意识到：
国内这些对自学者不友好的教材所以能被推荐为圭臬，也是和某一群人的利益有关：
国内这么多音乐老师（无论是院校老师、还是面向大学外招各种年龄段的钢琴学生的老师），
当中肯定是有一定比例的人受益于下面这个现状：
「国内能买到的中文教材，大多都需要老师点拨讲解、才能让你看懂。」
我也有好几次见到与斯波索宾的和声教材有关的评论说「必须得找个好老师给你讲」。
万一有人要是将岛冈让这本书（或者同种类型的优秀教材）翻译成中文引入国内，岂不是要砸了那群人的饭碗？
毕竟，优秀的音乐教育资源，在中国，非常希缺。
剩下的那群人，要用最少的成本保住自己的饭碗，最直接的方式，就是在这个圈子里面搞封闭。
（看看 Arnold Schoenberg 的「Harmonielehre」的英文翻译，再看看简体中文译本，对比下后者少了什么，你必会有所发现。至少，我不认为「用目标语言写个 summary」就可以叫翻译了。）

在中国，从来不缺业馀钢琴10级的人，
但他们当中能够对乐曲的（包括曲式与和声在内的）格物致知能力的好坏，又是一个未知数。
而且他们往往也是师出那些和他们一样的前辈之手：
只知道怎么演奏好一个乐器，但对音乐的赏识能力仍旧是个问题。
这些人当中，有些人可能热爱音乐，有些可能只是方便给他父母脸上贴几年的金。
这些都是产业。
破坏行业的事情，这业内会有谁乐意去做呢？会有谁乐见于这种事情成事呢？

回到正题，大家能想明白为什么很多大学教编程必须 Visual Studio 6 和 C 语言了吧？
（C 语言不是所有专攻方向都需要的；VS6 包括 VB6 和 VC++6。）
哪怕咱们大陆的资讯电子类专业出身的人们自学能力再高强，
也很难改变这群大学教师「决定教什么」。

P.S.: 对于谭本人这本书怎样，请不要与我探讨。
我只负责对那些三缺帐号们（专门新注册来的水军）批次封锁、清空其评论。
可能你觉得容易学，但没准是你老师点拨得好、或者你之前的学习经历帮到你了。

P.P.S.: 一线音乐院校的学生们不要来我这里当杠精，没有意义。
我这答案讨论的问题并不会影响到你们。
你们能进一线音乐院校的话，教材好坏根本不会对你们有多少影响，
因为你们有全国最强的师资资源、使得你们自然不会去关心二三线音乐教育圈的死活。

# EOF
","之前的回答过于草率，周末有空会改一下

如果换教材，怕是一并要换一批老师。我校某老师讲c语言，公开表示main的返回值应该是void，int是某些环境的特殊写法。然后上机的环境是devc，全体编译报错，课件上的代码都运行不起来，公开打脸。
以及其他经典言论：我们现代计算机，内存绝对够怎么写都不会爆，怎么写都不会溢出。上世纪我们没有钱，买正版Windows系统要给Microsoft送多少钱啊，所以我们应该用盗版系统。
","谭老师虽然问题多多，但还不至于太匪夷所思。给你们分享一下我985 IT强校的编译原理教材，几十块一本的书里蕴藏着大量天顶星科技。
重点我都画出来了，随便一个抛出来都是能稳拿图灵奖的成果，分分钟吊打IEEE全体。


不过实事求是，这本书总体没啥问题甚至比较优秀，上面那一段大概是某些不可抗力的体现，魔幻但真实。
","原来我读大学的时候就是学谭浩强版本的C语言，这么多年了还是这本啊？烂书一直用，能说明两个问题：
1. 改变要靠自己，等别人去改变是不靠谱的事情，哪怕改变难度很大；
2. 一本书籍可以养活一批人。教材、教案早已了然于胸，熟悉的内容滚瓜烂熟张口就来，哪里需要改变了？改变了还要我花时间去备课，去熟悉适应新内容，而且我自己也不一定学得会啊？那怎么去忽悠别人呢？
","大学里面有一群基础教研人员，有很多是早期留校的本科生。他们没有任何上进心，以985高校教师为荣（当然也没本事混副教授），抱着一套ppt混了20年。
可能这些人连指针都不懂，然而，他们属于历史遗留问题，不解决也很捉急的。
","不可否认《C程序设计》这本书放在今天来看的确烂，比如这种低级语法错误（第四版）：
*29个字符居然只给出了28个。
* 07页-程序4，ture 和 flase 各亮相一次。
* “后辍”。
* rintf。
以及以下这种错误结论：
* “凡是二元运算符都可以与赋值符组合成复合赋值符”。。
* “先定义，后使用”。
* “C的实数常量都是双精度型”，接着在后面提到“添加f来强制指定类型”。
并且《C程序设计》还出版的非常非常多：
的确，很多学子被这本书弄得看见C语言就瑟瑟发抖，失去了学编程的快感。
学习 C语言推荐两本书：《C primer plus》、《C和指针》。
谭老的书真的一般，但是，但是回复区一堆攻击谭老的是什么鬼，，，，
谭老堪称中国第一代计算机先驱，他那本《C语言程序设计》中出现的dos就是明证。
计算机行业发展迅猛、新旧更替以年计、甚至以月计！
C语言是1972年问世的，彼时谭浩强已经38岁了，1989年C语言完成第一次标准化，谭浩强这个时候已经55岁了，1991年，谭老在57岁高龄写出《C程序设计》，彼时还真不算太落后。1999年，C99标准才出来，这时候谭浩强已经65岁了，也很难有精力再去高速的迭代他那本书了。
2000年之后，经典的C语言书籍层出不穷，甚至可以用百花齐放百家争鸣来形容了，老谭的书的确已经毫无竞争力了。
但谭老并没有什么过错，这本书放在90年代，绝对是指路明灯般的存在，也是当年的计算机经典书籍，但时过境迁，计算机科学在发展、C语言也在高速发展，就好比一个过时的古董，自然没有任何实用价值。
问题来了，谁是坑学生们的罪魁祸首？答案不言而喻了吧！
是那些偷懒的大学、那些偷懒的大学教授，不假思索的继续沿用一个上世纪90年代的教材，全然不顾计算机行业的飞速发展和经典计算机书籍的层出不穷，抱残守缺、因循守旧、冥顽不灵、顽固不化！
是这些人坑了无数学生，让很多人看见C语言就瑟瑟发抖，甚至直接劝退了无数计算机学子。
而谭老呢？他把他的一生奉献给了中国计算机科学的发展，更是在2019年，将近乎终身的积蓄全数捐给了清华：100多万。
可能这100多万在诸位眼中算不得什么，在企业家动辄过亿的捐献中，更是少得可怜。
可试问大家一句，我们何尝捐过几万，哪怕几千？
有些人，他已经奉献了他的一生，却还要承担骂名，可悲可叹！
顺便送大家一份硬核计算机资源，都是国外经典书籍为主！我把大学和工作中用的经典电子书库（包含数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，点击下方链接直达获取：
看看这套资源的目录，非常经典：


","看了某些高校教师的回答。真心感觉以后有孩子千万不要在国内学这种垃圾教材 遇到垃圾老师 上垃圾课。
18-22岁这段青春很宝贵，把人生浪费在垃圾教材上太可惜。相比CMU UIUC MIT的本科计算机课程，国内的真心垃圾
","和大部分读者的观点不同，我倒没有感觉谭浩强这本《C程序设计》有多糟糕。
当然，我下面要说的，是解释为何近年来大家对国内教材质量的声讨越发强烈的原因。
我是08年在中南大学读的本科，专业当时是电子信息工程。
我高中时期和大部分人一样，是没有接触过任何编程语言的。也没有受过任何系统化的计算机基础知识教育。在本科入学时对计算机一无所知（除了打游戏。。。）
而我第一次接触程序设计这门课是在大一。大一那会儿还很认真，读什么书都会想着“刨根问底”。这点很重要，因为程序设计这门课的思维和高中时期接触的数学物理的“观察者思维”不同，它是彻头彻尾的“设计师思维”。前者要求你在一组给定的规则下推算一个系统的运动结果；而后者要求你在给定的前提条件和结果（需求）下设计系统。
可以说，思维差异导致我学校程序设计这门课非常吃力。再加上当时中南大学自己也出了一本《C程序设计》的教材，而且强制要求所有人必须购买（学费内包含）。然而那本书。。。我们的程序设计课程老师说，就是一坨屎。他第一堂课就告诉我们：“如果你还想学这门语言，别用咋们学校的书，去读谭浩强的那本”。
那时候我第一次知道，原来学校自己写的书还能这么辣鸡。
于是我在老师的推荐下去买了这本谭浩强的C程序设计。
先说明一个区分点。
现在很多的学生一如大学就能带计算机进入宿舍，甚至可能在高中时就已经接触过程序设计的相关知识。但是我读本科的时候是2008年。中国社会以2008年为分界点，可以认为2008年之前是相对保守的，而之后逐渐加大了开放。所谓保守在哪呢？举个例子，我直到大学之前都没有上过网。因为当时，全国范围内对网络游戏和网瘾的管控没有完全消失。甚至我们到了中南大学后，学校有明确要求禁止学生大一大二带电脑进宿舍。当然也有人带的，当时很多人不带是因为那时候学生的经济水平并不高，大部分人的消费观念是电脑是高端消费品，不值得购买。
因此在大学本科，在没有计算机的大一，我们怎么学习编程？
你们肯定想象不到，当时我们一群喜欢写程序的小伙伴都是直接去大学的图书馆计算机室学习编程的。。。而且那个计算机室还TM不能存盘，这意味着所有的编程必须当场完成。如果无法完成呢？那么只能在去自习室的时候在草稿上面写代码！
对于那个年代接触编程的人来说，什么编译器检查啊，IDE界面友好性的东西，不存在的。像什么算法设计都是在草稿上通过自己画图，代码也是在草稿纸上靠数学证明正确完成后才写入的。所以一般只要如果我去写程序，多数时候可以直接通过编译，即时我是用vim或者emacs在无语法辅助的条件下。
当时我们学校图书馆的计算机用的就是VC++6，到大三我自己实习攒钱买了第一台电脑的时候，也是装的这个VC，哦，那会儿还是2010年初，VS应该是和C#一块在之后逐渐被推广的。
所以早期程序设计的学习环境和今天极为不同。因此你也不要奇怪为何那么多老前辈用的是vim, emacs一类的看起来有点反人类（其实你懂了命令操作后，比VC方便多了）。这也是为何稍微大一点的程序员用VS比较少，因为他们不存在VS这个作为过渡的IDE来训练自己的开放过程。
说完编程学习的社会环境之后，我们再来说这本书。
为何我们那一代学习程序的人对谭的书没有如今这么强烈的反感呢？
首先，绝对可以肯定的是，我们那届学程序设计，并亲手写出过数据库系统和网络服务--客户端数据包传输程序作业的学生一定知道，它的书里面到处都是BUG。
但是我们并没有因此产生反感。一个很重要的原因是，当时的编程环境实在糟糕，而理论联系实际的距离又十分之远（如果你看过同时期国内其它编程教材，你会发现谭的书已经算是很有实践指导能力的了。。。）这迫使我们当时的读书模式和现在有本质区别，大体上就是：
（1）在书本上，我们只了解算法的基本原理或者程序运行的内在机制；
（2）去计算机上实现程序，观察程序的“实际”运作机制以及算法的“真正”实现
换句话说，由于我们没有把，也从未想过，要把书本上的理论知识和代码当作真正的代码对待，所以谭的书虽然有缺陷，但是对我们的程序课学习没有造成太大的影响。
而且，由于谭浩强的书很多地方都写得非常模糊。例如解释内存和地址关系的地方，数值编码以及指针部分，虽然看上去有联系，但是却缺乏系统化的阐述。
所以作为学习者，当时我们学习这种模糊的系统原理时都会直接去计算机上实践。例如直接打印一段内存地址下各个字节（char）的十六进制码，然后手算它和实际存储整数浮点数的关系。此外，内存地址的分配是由高到低还是由低到高，也可以通过打印数组，变量的字节信息来观察。换句话说，我们当时学习这本书的方式又和现在有点区别。
为了弄清楚实际原理，我们其实把整个计算机程序的运作机制当作一个系统来研究了。因此当我们实践完成后，谭的这本书上，哪里有错误，哪里没有，哪些原理说的不准确，哪些有错误，就完全了解了。到了这里，我们才是真正把那本书看完。
当然要感谢谭的这本书，要不是它写的到处漏洞百出，且阐述含糊不清，我在学习它的时候也不会花这么大功夫去研究它的每一处细节，诸如：数组变量能不能当作指针变量赋值（不能），这种东西都是经过实际在编译器上验证的，虽然它的书也没说清楚这两种类型的区别。但是反过来，也正是因为它的这些缺陷，和当时编程环境的糟糕，才迫使我们通过大量实践了解了这些问题的根本原理，自己探索到了问题的答案。这又和只通过书本了解的知识有着天壤之别。
此外，关于谭的main函数返回类型是void。这一点也很有误导，但是为何当时我们没有抱怨呢？因为我们很自然接受了这点。。。直到后来大三学习《Unix网络编程》的时候，才知道unix系统（包括linux）本身是通过各类整数返回值来判断一个程序是否正常退出。
实际上，void main和int main之所以推荐后者，是因为它是一种良好的编程规范，它保证了某个调用你编写程序的外部程序可以获取你程序的内部状态值。而通过这种方法，我们也可以设计不同的程序返回值来告诉外部程序内部错误的类型。
这种规范只有有了一定编程经验的人才会知道。你当然可以一开始就教一个人必须返回int，但是在我看来，未必是一件好事（就好像玩游戏一开始就告诉你秘籍，你可能就失去了探索它的乐趣了——）
最后，来评价一下谭浩强的这本书吧。
这本书首先，可以肯定的是，一定有巨大的缺陷。放在今天看来，完全是糟粕。
其缺陷，其它回答已经说的很清楚了，不仅仅编程规范太复古，而且很多代码和原理讲的都不对。
不过我在这要解释的是这么一个问题：为何如今的程序语言学习者会看不起谭的书，而过去的人却容易把它奉为“经典”。
这就要了解现在的人学习编程的方式和我们的区别了。
现在的本科生，尤其是2012年之后学生，大部分都能在大学之前普遍接触过网络和计算机（像我这种老古董直到大二才有了第一个QQ，直到现在都没有接受微信）。而他们接触计算机编程的时候，大部分的计算机系统已经提供了相当友好和完善的IDE。因此他们学习程序的方式就少了很多中间步骤。这时候，对于编程书籍的要求不再是单纯的理论，然后依靠复杂的实践完成学习。而是从书本代码直接到IDE执行这样一步到位的学习模式。
这种高效率的学习模式自然而然地唾弃那些代码里有错，甚至讲不清楚原理的书了。而谭浩强的《C程序设计》也恰在此列。只能说，谭的书已经不适合现代人的编程实践教育了，因此它也到了要被批判的时候了。
但是我也要大家警惕这种过于简单的实践学习原则。因为它太过直接，以至于让一个学习者容易缺乏问题和兴趣去学习某些东西，以至于他们虽然写了很多书本上的代码和习题，但是未必真的了解计算机的原理（例如大端法和小端法我们那时候的人在学习完C语言的时候就通过实践了解到了，然而大部分现在的学生还要去系统学习《深入理解计算机程序》这本书）
那么我说了这么长一段解释，又是十多年前人的学习方法和今天大部分学习方法的比较，这种比较的意义是什么呢？
其实在于提示各位：一本书和一种学习方式，是契合于它们诞生时的那个时代的环境的。当时没有多少界面友好的IDE，没有完善的计算机编程环境，因此对于那个时代来说，谭的书就成了“适合”那个时代学习方式的一种选择。当然，2008年前后，类似于C++ primer这种外国引进的教材还不是很普遍，大部分人都会首先选择国内教材。
所以我们对谭的书观感变差了，评价贬低了。原因不在于这本书本身很“糟糕”，而是在环境变化的情况下，它再也不适合作为那本“最好的”教材了。随着08年之后大陆开放程度大幅度增加，国外引进的书籍和教材呈现大幅度增加的趋势。有了更好的选择，客户自然抛弃了谭的书；此外，随着系统上IDE环境的越发进步，谭的书极其学习模式不再适应于更加高效率，能够培养更多码农的新时代。故而退出了它的舞台。
但是我们应该正视这本书本身的存在。而且也应该意识到一个危险的现代情绪：现代社会的舆论，喜欢对一样事物采取绝对的，静态的，非好即坏的评价机制，却忘记了这本书或者这些旧时代的东西本身就是根据它们时代量身定制的。所以批判历史的我们，总是自我感觉自己是永远正确的。但是我也因此不要奇怪，我们的下一辈人，可能带着同样鄙视我们这代人所崇拜的事物的观点来看待我们这段历史和经历。
当然也有人反驳，都8102年了，这么多年了，中国的教材为何不进行改革，向国外学习？这种反驳虽然有道理，但是忽略了另一个环境要素：那就是这种大学出版的书籍往往销量不受影响，完全可以通过让学生入学时强制购买的形式来回本。而且对谭浩强他老人家来说，都赚了几百本书的钱了，人家也没啥动力去更新。反过来，这种机制恰恰是因为老一辈学者依然占据高校教育顶层机构，而新人无法进入高层对其进行改革的无奈。加上购买国外进口书籍的途径和价格越发下降，重新编写一本更好的国内教材也缺乏动力和市场，故而所有这些因素加在一块的结果，就是到现在为之，没有人愿意对国内大学编程教材进行改革和质量提升。
所以我也习惯了大学老师在第一节课说的那样：学校的指定教材你们别看，就去网上买这本XXX写的就好了，我们以它为模板。
很多时候，不愿意改革，不一定只是体制腐朽的问题，还要考虑市场的需求和历史的趋势；此外，有时对某种东西非好即坏的批判，不过是某种无聊的情绪发泄，它会使得我们无法了解产生这种事物的历史背景，从而导致我们越来越弯曲的认识我们的过去。而因此，也会不可避免地，被我们的下一代人越来越扭曲地看待。

所以总体来说，我认为谭的书已经不再适合这个时代，但是归根到底，它也不像大部分说的是一坨狗屎，毕竟相对于同期的所有其它国内编程教材来说，其质量已经算是十分不错的了。我们批判某种东西的时候，必须结合它的具体的历史背景和那个时代的具体学习方式来看待它。客观来讲，谭的书算不上是那么的不堪，它只是不再适合这个时代的读者了。

------------------------------- 2018/11/11 ---------------------------
更新一下：我注意到一些回答提及了其它方面的因素，在这里给各位列出来作为参考：
（1）学习谭浩强教材的用户很多都不是专业领域的学习者，因此对他们来说，没有必要学习K&R的C Programming Language。讲实话，我很同意这一观点。我本科的时候也是一个非计算机专业的学习者，一开始用的也是谭浩强的书，通过一段时间学习后我才开始对编程感兴趣，才有了后续进一步学习C++ primer等其它优秀教材的过程。
学习的过程本身不是线性的，而是一个不断曲折的过程，一开始你不确定是否真的要钻研某个领域，对于这种情况，那些虽然有部分错误但是适合了解和入门的书就很好；当你对这个领域更加感兴趣之后，你自然会去寻找该领域的优秀教材作为深入学习的过程。我发现很多人默认了教育的过程是一个简单的线性流程，但是不要忘了，那些到知乎上问什么书籍适合学习C语言的提问者，其实都已经一定程度的了解和入门了编程语言，而对于没有了解和入门的人来说，这类专业书籍可能并不适合。
（2）某些大学老师提及他们自己其实很清楚C和C++的现代编程方法，然而问题是相对专业的书籍除了价格昂贵以外，还可能不适合非专业的初学者。我觉得这个观点很好地作证了我上面的结论。
我在本科时读过很多书，有一个很基本的经验，那就是一旦一本书的厚度超过250--300页的时候，学习者就很难记忆之前的内容了。在学习一本书的过程中，学习者其实是有一个记忆曲线，这就和各位背GRE是一个德行（只要隔了一段时间不去重复背前几个List你很快就会遗忘之前的内容）。对于编程这种强调连贯性的学习来说，一个初学者一上来如果接触的就是C primer plus或者c++ primer这种动辄400甚至600页的神作，他们根本就不会看得下去。这里，影响一个人能否保持长期阅读的关键在于不断重复。然而重复又是一个更困难的问题：如果一个人没有系统化学习程序语言的某个方面，那么他就很难去快速通过编程实践来重复强化此前学习的记忆的。这也是为何我从来没完全看完C++ primer的原因，因为它又臭又长，看到后面的时候，我都快不记得之前某个标准库的接口是怎么用的了。
这其实就是为何对于入门某个领域的学习者，最佳的选择反而是某些国内教材。、
有的人说K&R的书也适合入门。这是扯淡。K&R的书适合的是那些有一定编程语言基础的人但需要进一步强化去学习的人，它很强调语法和原理的部分，但是对于完全没接触过程序设计的初学者，这些人是根本无法理解什么叫做内存地址或者指针这种抽象的概念，他们看这种书和看天数没什么区别，基本上就是“词我都认识，就是不懂它在说什么”。
为何我能有所体会？因为我当初学习C语言的时候，一开始就在图书馆借到了K&R教材，当时的感觉是完全不能理解这本书里面提及的“专业词汇”概念。即使那本书给出我一些解释，我依然很难去理解它们的“实际功效”。
相反，在接触了谭浩强的书之后，我才通过一点点实践的方式开始去理解内存地址，指针，程序指令这些概念的实际意义，最后回到K&R的教材，才有了一种它是“神作”的感觉。
注意，你能觉得一本书是好书的前提是你有了足够的见解和理解之后，对于那些不理解基础概念甚至连编程都没入门的学习者来说，他们无论看的是垃圾还是神作，对他们而言那都是天书。这也是为何我觉得程序员去评价一本非专业入门书籍可能存在偏颇的原因。也因为如此，我只会给已经有一定编程经验的人购书建议。因为我们不能用我们“已有”的专业领域知识去套用其他人的感受，这会反而误导初学者。
我还想补充一些其它看法。某位高票说现在国内教材都是垃圾，很会误导学习者。我认为这言过其实了。大学教育早已经不是中学时期那种填鸭教育，也没有所谓的强迫你不能学习其它教材的说法。任何一个有上进心的学习者都会主动寻找专业领域的教材和材料来强化自身的基础知识。而对于那些没什么上进心的人，他们不管看什么书，都不会有所成就。另外还有人提到，不学K&R的教材就会“输在起跑线”，那么我就是一个输在起跑线上的程序员，可是我每年面试和招入的应届毕业生有很多起跑线都比我高，可他们大部分都缺乏企业级项目的开放经验，而且因为在ACM上刷题过多，导致进来之后老喜欢写过度复杂的程序，且没有良好的变量命名习惯。我倒是觉得学习本身就是个漫长的过程，而且依赖于你自身见解的不断提升，你要是觉得输在起跑线就完蛋了，这种人也不可能指望他们的起跑线向前推了几百米就能够坚持跑到终点的。对于有志向学习的人来说，书籍，只要不是太烂到无法理解，都可以用来入门。
此外，某个用户还批判谭老爷子出书是学术腐败，我觉得这种言论最好不要有。谭浩强的书相比于国内其他学者的书已经很良心了，批判他是学术腐败，除了博取舆论眼球，制造仇恨舆论外没有任何帮助。有的人学的不好，就怪书太烂，体现的不过是他们自身在学习上的怠惰和无能罢了。
","作为一个三流985的学生表示深受其害，我们专业课的教材有很多是学校自己出版的，编写者是谁？没错就是你旁边的老师，编的好么，客观来说有些还不错，有些简直是垃圾中的战斗机，只是从别的教材中复制粘贴，排版混乱，错误连篇，坚涩难懂。经常有学霸拿着从图书馆借的书，告诉我xx版比某些shit要好多了。于是我看了下，嗯我们的教材是shit。那问题来了，为啥要坚持用这些垃圾祸害学生呢？首先，教材卖给我们是95折，亲，九五折，自己到图书馆领哟，良心价呢。专业课书经常一本三四十，打印店复印一本也就十来块的事，什么？你说我不尊重版权？你让那些被抄的经典版课本编者哭晕在厕所。而且编书，对于大学老师评职称等各种先进评优都是有好处的。而且考试内容都在教科书上，不买你学的多好都有可能挂，因为他考的可能是冷门知识点。不过在被坑了几次之后大家都学聪明了，都在买二手的，或者复印版。学校也发现这书卖不动，于是就出现每班必须买多少本，这种强买强卖不符合市场规律的事。还有的奇葩老师有着，你不买我的书就是和我过不去，你和我过不去，我让你考试过不去。花钱消灾吧，么么哒。
","很久以前，我也不明白为什么那么多人喷谭浩强。我没有看过谭浩强的任何一本书，但是经常却看到大家在讨论这个人。
主要有三种观点：
但是你只要看看下面的内容，就知道谭浩强这个人该不该骂。我们谷歌下谭浩强的资料：
看下谭浩强创造的世界记录：
可以发现，谭在政治圈和教育圈都有一定地位，特别是教育圈子头衔太多，而且级别很高的样子。
谭主编的书籍达到 130 + 250 = 380 本为科技著作世界记录外加两个出版发行量的世界记录。

我想象中的这个人，不是一个多么厉害的伟人。我看完这些资料以后，觉得恐怖，觉得可悲。多么腐败的教育圈在给他造势，私吞了多少手下人的成果，才帮他达成了这些“成就”啊？这就是中国科学家不受重视的原因啊，因为只有谭这样的专家教授才能拿到比明星多的钱，至于手段嘛？呵呵。
—— 大家的评论都在骂那个拿毛选做对比的人，感觉完全歪楼了。
","40多个答案中有几个是一线高校教师？我来回答吧。很简单，为什么要换教材？有利于我的职称，还有有利于我的升迁，或者课时费高点？别以为就你们知道什么K&R、现代方法、c reference manual这些书，很多老师也知道，也看过，那他们为什么不作为教材？因为除了很少数还有理想的年轻教师，真的是没这个动力。我用谭的教材，课件什么的都是现成的，连教案都可以用前辈们写好的，我干嘛还要自己再费事搞新的？评职称的时候没人会因为你用了什么世界级的先进教材给你多加一分！而且你们说的什么现代方法那本书，的确不错，一本书快100块钱，对不起，不能作为教材统一征订，教务处直接就给你否了。那本经典的K&R，讲真，其实并不适合初学者。
何况很多时候，其实根本就没按照书上的讲。
我只是告诉大家现实情况，想借机搞个批判什么的请绕道。
","题目描述中有这么一句话
大错特错。
大多数教授的项目，代码都是由手下的研究生写的，他们自己才不写代码呢。有些人都很多年不写代码了，还能站在讲台上把几十年前他们学的东西讲给学生听。这在基础学科领域没问题，数学物理定律至少在几十年之间是没有很大变化的，但是计算机技术日新月异，几十年前的东西早就过时了。
","我的c++老师写个hello world不知道cout在std里，我告诉他，你该加namespace，他说了句啊？然后继续装他的逼，就是不加namespace，给换成了c的printf，从那以后他的课我就没去过。电子科大的哦！用谭书奇怪？
","这本书是有一些问题，但是并不影响非计算机专业的入门学习，相反地对于入门这本书还是有一些优点的，从书本的总体结构与内容的安排来说，谭浩强写书的时候还是用心思考了的，并且给出了他的认知水平下的优秀方案。
不过现实情况是很多人水平高一点之后，察觉到了里面的一些小问题，然后满世界大吹大擂，给旁人一种我很牛逼的错觉，无形中夸大了这本书的缺点，搞得好像用这本书学编程就很致命一样。
正在吃饭 吃完饭好好讲一讲这本书的优点。
－－－－－－－－－分割线，以下补充答案－－－－－－－－－－－－－－－－－－－
要评价这本书，首先要知道这本书的目的，它在前言中讲得很明白，就是给非计算机专业的人写的教材。非计算机专业的编程课，几乎也只有两门课，一门计算机基础知识，再加一本编程语言了课程了（大部分就是这本C语言编程了）。就这两门课，没别的了。编程语言一般只讲一个学期。
在这个条件的基础上，我觉得这本书最大的优点在于：
1.不厚，三百多页，但是C语言的基础知识都讲到了，一个学期能够讲完。谭浩强是懂教学的。《》什么的动辄大几百页、千把页能够当一个学期那种课的教材么？
2. 在教材中第二章中就很明白地讲了算法与数据结构的重要性，指明了算法是程序的灵魂。在《数组》一章中的示例中讲了排序算法，在《结构与共用体》一章中讲述了链表的原理与实现。对于许多大学四年只学一门编程课的人来说，起码没在这个大方向上让你产生什么误解。数组、链表的简单数据结构，一些简单的查找与排序算法，对于一般的工科专业来说够用了，至于更重要的数值方法，有另外的一门课《计算方法》。学好了这些对于工科专业的许多人来说够用了。反而一些别的纯粹的C语言的教材在这个上面并没有着重强调。当然，对于计算机专业的人来说，他们开了算法与数据结构的课程，编程语言的书只讲编程语言不是什么大问题。
3.附录很有用，对于一般的非计算机专业的日常编制来说，当手册用很合适。谭浩强是知道你们学生是个什么水平的，也懂学生需要什么的。
缺点当然有：
1.语法标准落伍了。
2.代码中有一些错误，还有一些不规范的、不严谨的，不过他当时用的Turbo C编译器，可能在那上面能够编译通过。还有一些是印刷错误。不过这并不是严重的问题，错误的地方，自己编译下，根据报错信息什么的在网上一搜就明白了，或者问问老师就知道了。另外一些低级错误确实很致命。
3.没有强调正确的编码风格，没有强调注释的重要性。不过有些东西，谭其实也讲到了，比如在他的前言中就讲了：”切记过早地滥用C语言的某些容易引起错误的细节（如不适当地使用＋＋和－－的副作用）“。
在谭的书的基础上，改进他的缺点，保留他的优点，会有更好的适用于非计算机专业的编程教材的。
批评不是不可以，要批到点子上，也要承认别的人优点，批评之余也要提一些更好的解决方案吧。可是在谭浩强之外，还有人写一本适合中文的非计算机专业的教材么？我孤陋寡闻，没见过。这不是的耻辱，是后辈的耻辱！
","这些老师都是没有开过软件公司的人.
所以, 不知道社会上需要什么样的软件. 需要什么样的编程人才.
------
为了维护教学的连续性, 减少每年大量写讲义, 于是就沿用过去的传统, 直到腐朽.
------
我1987年学习程序, 1990年看的谭老师的<C程序设计>, 同年看的书还有严蔚敏老师的<数据结构和算法>.
到1997年上大学, 才注意到, <C程序设计>实际是参考1977年前后国外教材编写的, 而这个时候, 学C不如学C++, 学C++,还要学Linux C或者Visual C++马上问世. Windows98系统已经发布预览 版..
可是, 这本20年的老教材, 还在让学生们背 C++ -- 运算符优先级. 而不知道光C的编译器有几百种, 各种编译器对语法的细微差别是不同的.
----
现在的C语言程序设计, 文件保存不讲Utf-8编码问题, 流不讲视频流, 加密不讲MD5和RSA, 模板类, Lamda表达式, 都不仔细讲, 这个难度, 好比18世纪的数学...

与时俱进, PYPL上这个月Python登顶, 可是国内大一的编程有多少开了Python的课程?

所以, 题主的问题没有为什么, 只是教育与产业脱节.
反正有学费赚, 反正毕业给你一个学历, 所以, 教什么呢? -- 教最容易教的.



","浙江省二级试卷上出过只有TC才能编译运行的奇葩代码，问你输出结果是什么，只有谭氏C能解释。
","这个问题很简单，因为很多人学C语言并不是为了把程序写得很好，对于没有多高追求的人，学到这么多，能应付期末考试和并没有卵用的所谓2级就够了。
还有一个问题，就是编译器配置问题，我学C也是从谭浩强开始的，学完了当然觉得这里面坑太多，但说实话，后面我在学校学C++用的教材，还不如谭浩强呢！这也逼着我去找参考书才发现了新天地。但当时就我只会VC6的那个水平，你说我还能玩啥，我觉得挺适合我的。
当然后来开始用高版本VS，就觉得这是什么玩意儿，好多有用的都没说，然后开始查MSDN。
之后出于对C++11的喜爱，VS支持C++11太慢，开始转向gcc，开始就会code:blocks，后来开始会配MinGW，但是各种库依赖太难受，然后发现MSYS2这个神器，就这样。
那么对于一个用MSYS2+GCC，文本编译器用Sublime Text，写Makefile组织工程的人来说，那谭浩强真就是一坨屎，我当初走了多少冤枉路啊！
这还只是对坚持Windows平台的人而言的，至于转向Linux,Unix的就另说了。
但请记住，不是所有人都要达到你这个程度的，对于大多数人而言，谭浩强的程度就够了！
当然这话对只对我这种非计算机专业的人而言，对于计算机专业的人我还是希望能早点换个现代一点的教材。
当然谭浩强的某些问题，比如指针和数组关系有点胡这种问题，你也要考虑某些考试本身就比较胡吗，他就要考这种写了会被人骂死的代码，你书上不讲不是照样被骂？这不能怪作者。
","说说自己的个人情况
我08年就读于陕西某211院校软件专业，当时我们学校C语言课用的是裘宗燕的《从问题到程序》。当时谭浩强的教材还被奉为是初学者的经典，有人批评，但还不像现在知乎上大神人人喊打。有同学问为何不像别的学校用谭浩强的做教材。老师强烈不鼓励、不推荐大家私下去买这本书。
开始时大家还老老实实地根据裘老的书学习。约摸记得裘老的书不像很多语法教材每章介绍几个语法点，而是会连带介绍他如何解决一些问题，颇具难度。
我记得当学习到第三还是第四章的时候，很多同学崩溃了。那章应该是讲函数和递归的，一般的教材（我后来看到的）基本上在讲递归的时候会很简单的用一个斐波拉契的实现作为递归函数的说明。但是裘老的书用了汉诺塔。。。这问题颇具深度，对于刚刚接触编程的新生，尤其是刚刚参加完填鸭式死记硬背的高考，并且上一章才刚刚学习了基本的结构控制语句的孩子们，确实是招架不过来。并且这章还大量提出了如状态机等等的编程模型，尼玛。。那会我刚刚装好IDE，语法要背一背，常用的函数要记一记翻一翻, 一个全角分号编译不过都要找一下午，你让我学这个也太难为我了吧？
于是就看到当时好多同学弃坑（包括我）去选择了谭浩强的书。对于一个还没完全从高考死记硬背的思维惯性走出的孩子来讲，老谭的书就如同一本新东方红宝书，他的语法总结和常用的函数总结做的特别好（印象特别深刻的是printf的参数表整整介绍了一页半）。而且神奇的是，老师出的好多题，甚至是我们同学翻阅的历届学校习题也来自于这本书的课后习题。就这样，越来越多的同学买了老谭的书。也许是基于多数院校延续的这种中式教育氛围，谭的书不仅没有被抨击，反而越卖越好。
老实说老谭的书确实存在各种各样的问题。书中用的编译器很老旧（好像还是TC很低的版本？），代码风格一塌糊涂（拧得像麻花），更别提中间存在了很多的谬误。但是他有着适合国情的一面。喷他的人（包括我）大多都是日后学会了写代码，反过来再去批评他的书。但是不可否认，在我们都还什么都不会，什么都不懂的时候，《C程序设计》，《21天学通XXX》这类的读物帮我们先进入了与计算机沟通这扇大门。 就如同大多数国内学生学英语，总不是说刚开始就会用英语写作文吧？还不是靠肝了各种各样无聊的单词书，语法书？
题外话，从业之后回翻了当年放弃的裘老的书，颇感裘老功底的深厚。书中提到的很多编程思想，编程模型，代码风格，解决问题的方式确实是在以往工作中实践过、帮助自己提升效率的好东西。深感可惜，如果学校当时把这本书当做是语法学成后的拔高教材，而不是基础课本，也许效果会好很多。
","谭浩强的c说句实话，虽然很多内容不太严谨，但是相比之下真的算稍微新手友好的了，应该属于不算有功 但也无过，可以试试的一类书籍。
代码写的越久，看很多代码类的东西就就越随缘，比如看书这个，尤其是技术类学习类的书籍，你看的下去，觉得适合自己，我觉得就相当不错了，毕竟最大的问题不是书上有没有一些边边角角的错误，而这书你看多久能不打瞌睡。所以正确的阅读方式是，你先找本书看，不喜欢，换一本就是了，学习本身就是一个拿时间换知识的买卖，买卖不合适，换家做就是了，明码标价童叟无欺，买卖不成仁义在，只要你肯去做，总有一款适合你。
科普和科学是两回事，平滑的学习曲线，应该是通俗易懂的科普进门，然后再用严谨的方式去证明科学，而一个好的科普，丝毫不比严谨的科学容易，现在根据前人的教材你再做一遍严谨的推导很多时候并不是什么困难的事，但如果你完全吃透了一个知识点，并且对它有了自己的理解用大多数人能够接受的方式将它科普出来，或者理论指导实践直接将它落地变为产品变为生产力 那我觉得是相当了不起的，这个知识点你是学到家了的，比只会抄严谨结论扯着大旗告诉别人这里那里不行，这个描述不太对，茴字不应该这么写的高到不知道哪里去了。
又不是搞数学证明搞推导造火箭，搞的那么严肃做什么。
"
2,室友想抄我的代码，给还是不给?,"给，但是换一种方式，别微信传，也别U盘。
Github上创建一个Repository，先空着。让他Star你。当然他一个人还不够，让他想办法发动更多人去Star。
超过10 Star，你就把代码Push上去，然后让他Fork。
超过100 Star，都不用他修改变量名，服务到家，你帮他改。然后用他的Github账号Pull Request。
这个Repository留着，以后学弟学妹们都用的到。平时Private，有人找你要代码，就把他加为Collaborator。这就是Github允许私有仓库人数无限制的福利。
这么多Star不仅仅是数字，而是你毕业找工作时简历上最亮的那颗Star。记得找工作期间Make Public。
不是开玩笑，如果我是大学老师，我就要求学生这样交代码作业。这是程序员的必备技能。我会给每一个班创建一个Organization，他们交作业我都知道，代码有问题就发Issue。全专业的学生互相Follow，谁的代码写得好，大家就Star。下次上课，我可以打开Github，讲评一下比较好的代码，也可以让同学们互相学习和评价别人的代码。
大一新生入学，先学习Github的基本用法，然后一项练习就是Star学长们的Repository，为他们找工作贡献一份自己的力量，这个优良传统一届一届传承下去...
软件程序的一个根本特征就是可复制性，这是其他行业没有的特质。开放源代码也是目前软件产业发展的一个主要驱动力。应该让即将从事这个行业的新人们更早更深刻的认识到软件可复制可分享的本质特点。
关于如何最方便的浏览GitHub上的源代码，我之前专门写过文章。这里只给一个最简单最酷的办法，看这个视频：
演示的是浏览LInux一个C程序代码。
只需要把http://github.com换成github.githistory.xyz就可以浏览当前源代码文件以及它的历史变更。

","当然可以给，但是建议你在代码里做点手脚。
最初级的方法是在代码头部加入版权声明的注释，像下面这样子（以 C++ 程序为例）。但这种方法只能针对看都不看，直接原封不动地复制粘贴交作业的室友。
对于那种稍微警觉一点的，会复查源代码的室友，会把以上注释去掉，甚至换成自己的注释，到头你反而解释不清楚了。这时候就需要将版权声明放在稍微隐蔽一点的地方。比如，使用 ASCII 码来代替纯粹的英文字符，将版权声明隐蔽到运行结果里。
这样的话，室友即使复查你的代码，肯定也看不懂那串数字是什么意思（这都看懂了那还会找你抄代码吗！），越是看不懂的就越不敢乱改，等把作业交上去以后，老师一运行，自然知晓真相。
但是这样还不保险，万一室友运行了一遍程序，发现了你隐藏在代码里的版权信息怎么办？没关系，我们可以用条件触发器，超过指定的时间才显示版权信息！
如此，就既不丢人情，也不怕被卷入抄袭风波了。
更新：补充 cout 和 endl 前漏写的 std 命名空间。
","现有回答的答案都服务太不到位了。
岂止是要给啊，还要为了不让老师看出来，给改好了再给。

想当年我上大学的时候，老师留的作业，我也是啃了好久才啃出来。
然后，顺理成章地，同学们就来索要了。我说好，为了不让老师看出来，我给你个变种的版本。（你那水平，给你去改我都不放心。这句话没说出来。）
于是，一个作业我写了4份，每份的算法都有些差异。每次我都有新的收获和进步。（那年头，我们一个寝室8个人。）
等我把4份写完了给他们，我再取其精华，充实一下自己的作业，我还是那个最好的。
要不是那样，我怎么能理解内存分配、怎么能掌握调试的精髓？

所以，要给。如果有精力还要多给几份，多改改。
这是不可多得的练习重构代码的机会。

一个附带的效果，就是我虽然人单力薄，但是在寝室里从此说一不二。谁敢忤逆，我就一句话：你还想不想毕业了？

至于他们今后的死活，能不能找到工作……那我就管不了那么多了，我跟他们还没那么深的交情。
","我不光给 我还传到校园网上。。。我毕业十年了。。。学校里还流传着我的代码 恶心着一代又一代的老师。。。
话说。。当年的代码写的真是烂啊。。。
","伤害室友感情级别，由低到高：
1、给他抄。
2、给他抄，但附加合理的收费。
3、不给抄，但提供帮助/思路
4、礼貌且果断的拒绝，明确表示我不愿意让别人抄作业，关系再好也不行。（让他知道这是你的原则，不是因为你不把他当兄弟）
5、犹豫且模棱两可的拒绝。
6、用拙劣的借口拒绝。
7、拒绝并附带嘲讽（划水挂科活该，您配吗？）
8、爽快答应，但暗中使用手段，使室友被查出抄袭。

你室友想抄你，他自己也会觉得理亏，你不给他抄不太会影响友情。（如果实在来不及了，你们关系又不错，可以适当帮一把）
但你要是答应给他抄，然后背后捅刀子，别说这段友情必然凉凉，你的臭名甚至会传遍整个专业整个学校。大家都知道xx班有个笑里藏刀的小人，表面装好人，背后害自己兄弟。
做这种事，老师不但不会夸你机智，还会瞧不起你。我们班就有一个偷偷举报污蔑同学被抓包的，老师同学都不正眼看她，可想而知一切奖项好事都没她的份了。
","当年学期末邻近，编译原理大作业让写个C0或者P0编译器。我上网找了个c实现的p0编译器，花了两天看了一遍，自己用Java重写了一份，打包上传交差。注意，我的版本是运行在命令行的。
室友看我写完了，拿走我代码，在上面包了个特别简单的UI，可以选择源文件，然后把编译结果输出在UI里的那种，然后也打包上传交差。
隔壁有个哥们从室友那里拿走了代码(他俩关系比较好，所以没直接找我拿)，扔掉了UI，做了个简单的jsp网页，可以上传源码，然后调用核心代码编译，返回编译结果，美其名曰在线编译。
结果你猜怎么着？？

我60分，室友80分，隔壁那货95分。
所以你看，懂得包装和忽悠是多么重要！！现在我一线搬砖，室友小头目，隔壁那哥们早已不从事技术工作，部门经理，专职忽悠。古人云“三岁看到老”，性格决定命运，诚不我欺。
你所关心的抄不抄，给不给抄之类的都是细枝末节，对以后发展大方向没啥影响的。
PS，我当时对这种做法很不屑，但是后来回头看，这神特么“在线编译“，不就是后来大火的“云服务”思想的萌芽么？当时可是2006年，别说在线办公，互联网几乎各种空白，连新浪微博都没影呢。
","你放到github上，贴上一个gpl协议，告诉舍友地址。
你维护的开源项目对吧，也有你的维护记录，老师也能看得到。
","想起叔当助教那会儿，班上有对儿小情侣，如胶似漆，在我office hour的时候，他俩也不问问题，就在我眼前腻着。叔心如止水，叔古井无波。。。
小妹子写的代码就每次都给那个小伙子抄，一模一样的。我也不好意思直接说他俩，叔说他俩自己也心虚啊，毕竟叔年轻时候也。。。。于是就天天暗示他俩代码要自己写才好，学到的东西才是自己的。还苦口婆心跟他们说如果我看到代码雷同，两边都给低分。无果。于是就每次多给给小伙子1～5分，如果小妹子98分，就给小伙子99分，如果小妹子70分，就给小伙子72分这个样子。
真爱啊，那小妹子竟然足足忍了一个月才终于受不了了，责令以后作业都小伙子自己写，然后她抄！
（本故事纯属虚构，如有雷同实属巧合，千万别对号入座。你俩最后要是成了也得谢谢叔，要是没成也不能全怪叔当年评分搞鬼对不对？）

","我从大一就定下了一个规矩，我永远不会帮你写代码，但我会无条件的指导你思路，让你自己能写出来
时间长了，他们也就都只问我思路了
关系好的关系不好的知道我这么严肃
也就不想抄了
更新分界线
我的回答的核心就是“要自己学会，自己懂”
以下是一个栗子
我努力往好的方向带别人
难道不好么？




","
原回答：
给啊，为什么不给，不光给，我还会手动帮他们改好，他只需要把名字签上就ok了！
服务就是这么到位，您只需要支付500元就ok了，超值！
什么，您没钱？
吃我一记素质五连！

事实上，作为一个在大学代码写的还行的小哥哥。这种事情是免不的。没人跟你借代码那只能说明你水平不行了，因为大学会写代码的真没几个。
其实我大学的时候有一个同班女生，为人豪爽，跟我兴趣相投，遂结为异性父女。。。。扯远了，就是关系很铁那种，她不会写代码，而我为人懒散不喜欢文案报告之类的东西，我们一拍即合，我承包了她大学本科所有的代码工作，而她帮我搞定了大学本科所有的报告类工作。
而且。。。有一门课叫web开发，只有大作业没有考试，她的代码是我的复刻版，功能有什么还是我手把手的教她说的，结果她分数比我高。。。。
其实现在回想起来，我亏了吗？没有，我觉得血赚好吗！！
她亏了吗，她也血赚好吗！没我给她写代码，就她那水平她要毕业得秃了！

其实吧，我的真实做法是，舍友跟我要代码，我会给，老师查重，我会提醒说你改改，也不会太上心，我这样是因为我不想出国也不要保研所以对分数很佛系，能毕业就行。
评论里也有人会说什么对舍友负责之类的，给别人抄作业是害了他之类的说法。
对不起我不同意这个说法，大家都是成年人，我不需要对他负责。只要他不让我蒙受损失，他需要帮忙，对我来说也是举手之劳，我乐意效劳。就这么简单，他要抄我就给他抄，他有问题问我我就给他解答，他考一百我考60那是他的本事，我不吃亏的。
总有人会觉得教会徒弟饿死师傅，可我从来跟他们都不是竞争关系，他们只是我的舍友朋友好哥们，我才不会说为了他们好而不给他们这种屁话了。
试问我如果这样做了他们会感激我吗？完全不会！他们会觉得我是个自私自利的小人罢了。
为人处事的原则是人人为我我为人人，而不是好为人师教人做人。
或许将来有一天，我有求于他，他会念我当年一码之恩，给我方便，而不是对我说：对不起，我不能帮你，我这是为你好。。。。。
学校的感情是最纯真的。勾心斗角的，何必呢。

你们要的表情包







","想起了大学的时候，一个C语言大作业，我写了90%吧。另外一个室友不会码代码，做了一些杂乱的工作(当时还没学数据库，所以自己用csv当数据库，这个兄弟的任务就是填充csv，很杂也挺费时)。这个任务是5个人一个小组，按人头排名报上去，每个人根据作业得分和排名再得分。
我们小组分了一个女同学，从头到尾没做事的那种。其实这没什么，有的人做事，有的人不做事，挺正常的。但是最后要交排名的时候，另一个大概做了5%任务的兄弟，居然提议女士优先，让女生排第一个。我当时就不乐意了，凭什么我得这么“绅士”，而你们下课就去LOL没想过作业的事？然后他可能觉得我不好说话，又提议让女生第二。我还是看不过去，你排第三，自己让出排名我没意见，但是凭什么让做事第二多的兄弟让位，慷他人之慨？我室友大大咧咧的北方人，很少计较得失，虽然成绩不行吧，但至少做作业的时候态度是端正的。真就欺负老实人呗？
我觉得你的困境和我室友一样的，当你室友(我故事中提出女士优先的那个男生)先向你提出这个要求的时候，他就已经在借你们间的情分慷你之慨了。但这事有意思的是，如果你不同意，反而最后是你落个口实，说你不够意思(正如我室友不答应可能就被说有失风度，毕竟码农专业妹子那么稀缺)。
借作业的事屡见不鲜，我的建议是，如果对方确实做不了(我室友第一次考试写出过case1-case99这种代码，草稿纸都不够用，笑)，而且成绩差可能挂科，那看看情分能帮就帮；对方是混混日子，亦或是家里有矿不在乎这些成绩，那必然自己要为一些行为负责。别说什么怕挂科，怕影响排名，都尼玛扯淡。不帮他，让他涨一次记性，是为他好。而真正需要考虑排名的学霸，是不会出现找你借专业核心课作业抄的情况的。
就酱！
","你问对人了，我这个糟老头子可是坏的很呐
来，试试这个 ：python代码在线混淆
这个东西大家应该都知道怎么用吧
如果你们是手写实验报告代码的话 嘿嘿嘿


混淆前（你的代码）：
混淆后（你舍友的代码）：

专治复制粘贴程序猴



哈哈哈，我舍友交实验报告回来了
我去给他开下门∑(´△｀)
他说要把我的头按到键盘上？怎么ke ejdj jfjtiogos ji de dian ge zan meebfsjf kskfddddk dkskwggdjs
fkskkdmmrmdhdjkdk






","前面可以直接跳过，直接从最后三大段看起！
你们老师做的什么事儿啊。。。凭什么不能抄代码？代码界宣传了那么多年的开源开源开源，都喂了狗了吗？以前微软吵吵着要干死开源的，现在不也成了GitHub的大股东了吗？还带着头的搞开源。。。
你同学要问你抄代码，你让他们抄（其实说让他们抄不太合适，应该说让他们参考。。。），首先这肯定不是你的错，因为本着开源的精神，你的做法是值得赞扬的！你同学自己不做作业，被查重查出来了，倒霉也是他自己的事儿，因为这本质上是一个作业，评分标准确实是老师说了算。。。
但是，保险起见，我给你出个招儿吧，绝对不会有问题。
去类似GitHub这种开源网站开个账号，把你的代码传上去，然后挂个GPL3或者MIT什么的license，然后让你同学随便抄好了，查到你头上，就把网站扔给你老师看。
如果这都找你麻烦，那就是你老师的问题了。
有同学问，抄作业虽然不违法，但是违反校规呀？我同意
but！抄代码和抄作业还是有很大区别的！如果按照我上面说的做，那么你就会有三个优势
1. 你是被抄，不是抄别人的！你把自己的代码发在github不违反校规吧？(那些把“作业禁止上传到github”写进校规的大学就别往下读了，老师考试前明确表示禁止把作业上传到github的也别往下读了。。。)
2. 别人抄你github的代码，那肯定是别人的错呀……和你没关系！退一万步说，请拿出证据证明是你主动给别人抄的！这种确凿的证据，除非抄你代码的同学想坑你提前给你录音，否则根本不存在！既然拿不出证据证明我是主动给别人抄的，别人抄我的github我又没办法控制的……就奇了怪了，明明我是被抄袭的对象，为什么惩罚我？
3. 不要问我为什么要发github，发github好处太多了，我必须要快点发，早发就可以宣誓主权这点道理不知道吗？
有的同学问，严格地说，在课程结束之前把代码公开发布就已经违背了学业诚信了
这我完全不同意哦！这种事情不能一概而论的，至少代码不行，因为个人写的代码其实是一种知识产权，并不是普通的考试答案。
我自己本人就很喜欢在GitHub上公开自己的代码，不管是考试的还是paper所属的，从来没听说过有学术诚信问题。谁抄袭了，出了问题自己担着，我肯定是免责的。
核心问题还是在于，你要证明我是故意给别人抄袭。如果是公开自己的作业和笔试考试答案，那肯定逃不了干系的。但是在GitHub上公开代码恰恰不能算做是故意给别人抄袭。因为这和申请专利一样，申请某些专利意味着你要公开你的设计的，这不是给别人抄袭，而是告诉别人，这是我的，不准抄！GitHub是要挂license的，一个道理，告诉别人，这是我的知识产权，你们不可以偷，license确保我可以分享的权利，你们抄了做什么用处和我无关，但是出了问题我是不管的，包括挂科！
所以GitHub的license是一份具有法律效力的免责申明！既然免责，为什么要惩罚我？法盲吗？
另外我要提醒大家！在GitHub上发代码，都会挂一些GPL3、MIT什么的协议，我推荐GPL3，这也是我一直用的，为什么？因为想抄GPL3要满足四个条件
其中第二点和第三点就是我的免责理由！因为第二点和第三点其实是在说，如果你想抄我的代码完成作业或者考试，就请自觉去找老师自首。。。要么就别抄！
任何人想要抄你GitHub上的代码，为了完成第二点和第三点，他就有义务自己向老师报告说，“我抄了某某某的代码，哪里哪里哪里是我自己改动的”，所以说，说你违背学业诚信是不正确的。
如果你的同学在你的GitHub上搬走了你的代码，并且他想作业或者考试作弊，必然不会做到第二点和第三点，你的同学不单单是作弊，而且是违反了GPL，所以你也是受害者，更不应该受到惩罚。
注意到这背后微妙的逻辑了吗？你在GitHub上公开了代码，挂了license，这些license是要求抄你的人必须自觉的把你的源代码附上，并告知全世界，他是抄你的，所以你也是在帮着老师奋斗在反对考试作弊的第一线知道吗？
So，你把代码发GitHub的行为，意味着你做到了诚信，你也要求借鉴你代码的人也必须诚信！简直不能太正义了。。。
然后谈谈你的同学，想抄你的代码，既不想让老师知道，又不想违反GPL，那只能学你的思路自己从头写呗。。。
还有知友问，这是有道德问题的。。。
这没有道德问题，放心。。。为这种事情较真的老师不单单是法盲，其实连是非都有点分不清的。。。应该去参加一些pedagogical的课好好进修一下。。。
我自己本人也是老师，我不反对学生在GitHub上放代码，相反，我还鼓励！通过这样做，我很容易搞清楚，这代码到底是谁写的。我只想知道真相（谁抄谁的），并不以惩罚学生为乐。。。
但是，谁考试抄袭别人，我就挂谁，就这么简单粗暴。。。其实应该鼓励学生们把代码放在GitHub上公开，比偷偷摸摸的好不知道多少倍，一方面是教会学生如何保护自己的知识产权，另一方面，对老师的查重也带来了极大便利（我挺腹黑的）。
所以从老师的立场来说，这到底是为了什么？是为了杜绝作弊呢？还是为了享受惩罚学生的乐趣？如果是为了杜绝作弊，真的应该鼓励GitHub，让一切真相（代码谁写的）都大白于天下，查重也变得很简单。。。
开源的目的也是这个，让一切放在阳光下，想抄？抄吧，公开的抄比偷偷摸摸的抄更容易监控，你抄了别人的代码，被我发现了，这科挂掉你可别怨我。。。至于把代码发GitHub的那位同学，谢谢你的合作，不然我还真搞不清谁抄谁呢。。。
不要问我，万一被人偷了代码抢先发了github怎么办？。。。这是你自己的问题。。。
我明显本意是在反作弊，你们要看成是鼓励作弊我也没办法……
上传github并使用license，本质上就是在保护自己的代码。特别是GPL的第二点和第三点，这就是让抄袭的人自己去自首的意思不是吗？
另外我不支持和老师对杠的做法，只是指出这样做是正确的。至于有些老师会因此给你零分，只能自求多福，人无完人，老师也一样……（有些老师就是不明白GPL的第二点和第三点就是让抄袭的人自己去自首的意思，也不明白鼓励大家使用github其实是对反作弊有利，既然你都上课教人写代码了，自己开个github账号和学生互加好友就那么难吗？还可以长点粉丝啥的。。。一切都很公开透明，查重也变得很容易。。。）
有知友提出这样的观点
我觉得说有道理，这是非常现实的考量，但从另一个角度可以看出悲观情绪。老师都不愿意被学生们当“傻瓜”，可是很遗憾，大多数老师都被学生当成了很容易就是非不分的“傻瓜”不是吗？
我发现很多人都没有仔细阅读这个答案就已经开喷了……
我不支持跟老师对杠！
我不支持跟老师对杠！
我不支持跟老师对杠！
重要的事情说三遍……吃不准，你可以课上问老师啊～问个老师成本有那么高吗？
另外，我开了两个专栏，发了一些干货满满的技术型文章，关注度居然没有这个答案高……个人感觉挺讽刺的……
我发现很多人就是看不懂我到底在写什么。。。我这里总结一下我到底是在说什么。
我的建议适合这样的你
你的情况符合以上三点，并且做到以下两点：
那么，上传github挂GPL是最安全最正确的做法！
为什么？你的同学面临以下两个选择
两者必居其一！如果违反GPL抄袭，那是明显违反你的主观意愿的！说白了，挂GPL就是给人参考但委婉的不让别人抄！
所以我就不明白了，一个明理的老师为什么要惩罚你这样的好同学。。。这叫什么知道吗？这叫
""You are playing the game! Nothing goes wrong!""
PS、还有人说我一开始就嚷嚷着要抄要抄的。。。喂喂？开门见山也可以是假山好吗？请读下去。。。
关于学生作业的版权归属问题，因为这和雇佣关系有巨大区别，所以学生的代码的版权不应该属于学校，除非例外情况。其实在stackoverflow上早有这样的讨论，请阅读
第一高赞回答的第一句就足够说明问题了：
所以沟通很重要。我知道有些学校会事先让你签合同的，真的动笔签哦！。。。这种就别想了。但是这样恰恰说明，默认版权是你的，不然干嘛脱裤子放屁呢？
另外有些学校会控告你misconduct，因为你发布的作业让低年级学生作弊。。。这种情况并不是每个学校都普遍存在的。这些学校会控告，究其根本原因，他们不但允许而且支持老师们可以重复利用课件特别是试题和考题，哪怕换个老师也用一样的。。。
我表示理解！但是我们这儿是不行的，课件可以重复，但是考试绝对不可以重复，因为想想就知道，你以为GitHub是唯一的渠道嘛？私底下就不能问啊？所以我们大学是不允许老师考题重复的！
但。。。我只想说，事先沟通很重要！
既然版权默认是你的，你有选择GPL的自由。大家要讲道理嘛。。。
我还要声明一下，我也没有鼓励大家去和学校怼。。。但是有一点是肯定的（也没什么好藏着掖着的），大多数学校的学生都是弱势群体（北欧大学除外），也就是说，被不公正对待且放弃了上诉权。。。而看多了这些的人觉得这世界就应该这样，所以跑过来笑我naive。。。
实际上，绝大多数事情，你是可以做到有理有利有节的，并且在动干戈之前就可以化玉帛的（事先沟通好，事后就不用互怼了不是吗？而缺乏沟通到最后搞不定的，纯属一手好牌自己打坏了。。。）。
最后，我想留一个问题给大家思考，习题和考试让学生写代码，特别是take home这种，意义到底在哪里？可以互相参考吗？我们是真的想把平时不好好学习的学生们拍死在考试的路上吗？还是希望他们每一个人都能最终能学到东西并写出自己的代码呢？
教育的目的究竟是什么？教育的目的是育人，不是毁人。。。这就是我所说的政治正确，然鹅还是有人嗤之以鼻！
我相信，答案一定是，可以互相帮助互相参考，毕竟老师都让你带回家做了，可以谷歌可以百度不是吗？看谁不是看呢？但是请write your own code from scratch!
所以我个人倾向于鼓励学生互相帮助，因为GitHub可以挂GPL这种优秀license，所以非常适合让学生互相之间公开代码互相借鉴，并保护自己的代码，但是必须要严惩抄袭的学生！
另外，作为一个多年写代码的人，我可以告诉大家，不论你是菜鸟还是代码高手，当你写代码没思路的时候，最好的办法就是去读别人的代码并从中借鉴。。。只要你还在写代码，你一定会一直不停的阅读别人的代码。。。
开源的出现不是没有原因的。
再这么添加下去，文章要越来越长了。。。我个人不喜欢修改已经写过的东西（除非是错别字这种），会造成上下文缺失。希望这是最后一次添加。。。
","最简单的办法，就是掩盖你已经写好代码的事实，反过头去问他要代码。这样一来，他一定不会再跟你要代码了。在最终要交作业的时候，佯装熬个夜啥的，最后一刻提交。既保护了你的代码，也不至于伤害室友关系，某种程度上还能树立你牛人形象，毕竟我在大学期间就特别羡慕那些熬一夜就能解决任何问题的人。
这样做唯一的不好，就是有一点虚伪，对朋友不诚实。
但是我要告诉你，当你今后步入社会之后，会经常遇到类似的问题，我把这类情况总结为：“能帮，不想帮，不帮伤感情，帮了我吃亏”。
朋友借钱，你明明有钱又不想借，怎么办？
同事让你加班帮他干点活，你明明会干，但是就是不想干，怎么办？
亲戚想借你车，你正好不用但是就是不想借，怎么办？
这种情况通常面对的都是非常要好的亲朋好友，你绝对不想因为一件小事而弄得不愉快或者从此心存芥蒂，但是你又不想当包子让自己吃亏。那么怎样才能在不伤害感情甚至不明确说出拒绝的情况下，处理这种情况呢？
很简单，给自己创造一个和对方类似的诉求。
朋友买房跟你借钱，你可以说：“老婆想换辆好车，正想找你借点钱呢，看来咱俩手头都紧啊”
同事让你帮他干活，你可以说：“正想找你帮我弄个xxx呢，看来你现在真忙”
亲戚想借车，你可以说：“我也正想借辆车呢，我的车不跑了”
然后，你的困扰就解决了。
当然，诚实永远是优秀的品质，只有面对无理的要求时，适当的不诚实，可以让大家不至于那么难堪。
","给。
大学有次，室友抄我代码，把我写在注释上的名字也抄上去了。结果我们连带挂了。
后来我创业，室友从上海赶到北京帮我做了3个月。
我觉得人生就应该这样。有借有还，算那么清楚就没朋友了。大五又如何，大六又如何？
","身为一个大学前有点基础的留学生，我大一给几个有些困难的朋友轮流写过作业。
我们有的课程甚至可以复制代码，网上的别人的都可以，但要写明出自哪里。
我喜欢编程，多写点也无所谓。他们不想学就不学，多点时间做自己想做的事。
我也不在乎别人成绩超过我啥的，听起来可能有点虚伪，我甚至不在乎学历一类的，毕竟走出学校去工作去科研，还要看真本事。
人都有自己想干的和不想干的事，想做什么做什么，想给就给，不想给就不给。
说到copy代码，最近看到个笑话挺有意思，大家笑一笑就好
thx~
","曾经我把我的数据结构与算法课设代码给了别人，然后他又给了别人，然后别人又给了别人，然后又.......
最后他们成绩90+，80+，我却只有74分………………
","回答有讲自己经历，讲自己的处理方式的，也有质疑舍友的关系的，这些都不是问题的关键
关键是，题主问了这个问题，答案已经很明显了。
不想给，又不想伤害感情，两难了
这个问题不涉及编程、不涉及代码，也不涉及什么作业……
大体上可以确定，题主犯上了取悦别人的毛病，即不敢说“不”
如果你们几个的关系比较好，你说不让他抄，是不会伤害彼此之间的感情的，但是你拿捏不准，害怕伤害别人，如果我不给舍友抄，一个小小的作业，就让我们的感情散了，不值。
造成不敢说“不”的原因，只有一个，那就是你也害怕自己的要求，被舍友拒绝。

你高估了说出“不”后，对舍友的伤害。
你拒绝给舍友抄代码，你觉得会伤害感情，舍友不会这么想的，在他眼中，这是小事，一两天后这件事可能就把它忘了，除非你们只是表面兄弟。
当然，说不也是有艺术的。
假如你告诉舍友：“不给，自己不认真学，怪谁？滚回去好好念书吧。”
是谁都会种想踢死你的冲动。
最好的方法二十四个字：
说出类似的话，我不相信会伤害你们之间的感情。
还有，最重要的一点是，拒绝要果断，不要拖拖拉拉，越拖，越容易伤害感情，越犹豫，舍友觉得好像有希望，就很想继续劝服你，可是你又不给，来来回回，久而久之，结果就不言而喻了。
——以上是来自W3Cschool的回答。


","用rust写代码，我大一一直用的c,cpp写代码，主要也是课程要求，后面没有语言限制了，我就用rust完成我的大作业，因为这语言用的人比较少，老师看了肯定有印象，而且也不好改动，我的室友看了我代码一般都会知难而退，因为这种语言老师一般都会多问几句。
","取决于你室友是什么样的程序员
渣渣程序员：改改variable的名字交了，结果查重99%重复，卒。
普通程序员：改variable名字，改代码结构，你用for loop，他写个while，你用array，他改用ArrayList，运气好查重查不出来，改的差一点的，卒。
未来的BAT：改variable名字，你用for loop，他写个lambda for each，你用boolean，他用int表示，你用equals，他写个comparator，你代码600行，他代码400行，你甚至一度怀疑自己是不是抄的他的。
其实抄代码也是一门艺术，抄的是思路，不是语句。抄的好代码整洁度++，抄不好return重修。
"
3,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
4,现实中程序员是怎样飞快敲代码的？,"当你看到一个程序员的两只手在键盘上上下翻飞，行云流水的时候，多半不是在敲击代码，
大概率是在跟产品经理撕逼讨论需求
另一种可能就是在跟测试打口水仗
10%几率是在论坛码字摸鱼
1%几率是在跟MM聊天
可以手速飞快而不需要停下思考的代码，多半也可以靠Ctrl + C/V 搞定。
而当你看到程序员双目呆滞，遥望天际的时候，多半编程开始了
——————————————
6月7日更新
没想到随手写的段子
竟然戳中了这么多人的心。
感觉就像随手划了根火柴，
却炸翻了整座山头
既然这样，那我就多说点儿。

每逢项目之初，
我们飞速写下的每行代码，
都宛如十四行诗般简洁优雅，
每个变量都宛如慈父膝下的爱子，名正言顺
感觉每一处精心设计的逻辑，
都是一段完美的乐章，
应在维也纳的金色大厅永久传唱
每一段完美实现的逻辑代码块，
都应该镌刻在石碑上，
供后辈顶礼膜拜
就在你得意之际，更新SVN时，
一段“ int aa = 0;”莫名出现在你的代码里，
这感觉仿佛是石碑上被油漆笔歪歪扭扭喷上了“XXX到此一游，嘿嘿嘿”
一个不孝忤逆的逆子，
让你血压飙升，头发尽断
满屏的诗和远方，
瞬间成了眼前的苟且
—————————
9月29日更新
随着窗外街灯的亮起，
夜
谦卑地跪在你的面前，
奉你为此间的主人，
双手呈上久违的宁静

你其实并不喜欢加班，
但却有些享受在办公室独处的感觉。
日间的嘈杂、突如其来的会议、打断思路的问题
让你无法集中精神
反而是现在，
除了机箱风扇散热发出的轰鸣声，
和空调百叶偶尔发出的咔哒声，
周围一片，万籁俱寂。

你伸了伸懒腰，
略微活动了下手指，
戴上耳机，
颠了颠手边略沉的快乐水，
一切准备就绪。

空灵的音乐带来无比的专注，
专注的力量令你灵感迸发，
敏捷的思维仿佛是疾走的奔雷，
划破厚重的迷雾，
整段代码原本错综复杂的逻辑，
被瞬间照亮，清晰无比。
在这一刻，你是无比自信的，
思路没有丝毫的滞塞，
指尖在键盘丛中飞速游走，
轻盈弹跳，整块代码一气呵成，
逻辑完整得就像整除一样干净利落，
没有丝毫得拖沓。

用户的每一步操作、每一处错误，
都在你的意料之中，
你就像是循循善诱的牧羊人，
指引着迷途的羔羊，
重返阳光大道。
用户仿佛是你座下的子民，
按照你预定的轨迹，徐徐前进。
而你，
此时此刻，
便是此间无可争议的王。
......
一个电话突然打了进来：
“先生，您的筒骨粉到了，
给您放到楼下门卫那了，祝您用餐愉快！”
“好的，我下去拿。”
你将剩下的快乐水一饮而尽，
空易拉罐被捏成一个小蛮腰，
划过一道完美的弧线，
落入垃圾桶中。
你胡乱地踏了双人字拖，
渐渐消失在昏暗的走廊尽头，
唯有油亮的脑门和门禁的荧光绿，
在黑暗中若隐若现，遥相呼应。

","我来回答一下吧，一天7.5个工作小时。
1.早上九点到公司，打开手机看会儿新闻，朋友圈。
2.开始进入工作状态，看哈需求有没坑，再构思一下怎么写会好点。
3.开始vc大法，找找以前的代码，copy一下，看一下能不能运行。如果没有，差不多就自己写，开发工具也很智能，给出提示，自动补全类。如果没搞过的，百度一下，看看别人怎么写的，能拷贝就拷贝。
4.大约10.30左右，休息一会儿，喜欢抽烟的就去抽烟，不喜欢抽烟就刷一会儿朋友圈，讨论一下中午吃什么。
5.这时候差不多11.30了，停下工作，准备吃饭了！
6.中午吃完饭肯定是要睡一下，13.30开始工作，这种状态能持续到15.00左右。
7.休息半个小时或者一个小时，聊天，抽烟，刷朋友圈。
8.差不多16.00到17.30再次进入工作状态。
9.准备下班了！
ps整个开发过程内心是这样的
傻逼客户，提的垃圾需求
傻逼项目经理，做的垃圾计划
傻逼产品经理，做的垃圾需求，看不懂
傻逼测试，不会测试，乱点
傻逼同事，写的垃圾代码
傻逼架构，搞的垃圾架构
傻逼百度，找不到查不到想要的问题
众人：傻逼开发！
","直接上视频，看看现实中程序员和想象中的程序员敲代码有何不同！

是不是发现自己生活被偷窥（手动滑稽

当然不仅仅如此：
现实中，很多程序员更熟练运用 Ctrl/Command + C 和 Ctrl/Command + V。
拿到一个需求，先搜有没有轮子，能直接用，绝对不自己写。能通过改改改就能用，绝对不自己写。
当然，如果他写的烂，我还是会嘲讽一波，然后自己写个更好的（手动傲娇

我是程序员客栈，中国领先的程序员自由工作平台，技术新人力解决方案。
我们签约经验丰富的程序员，采用线上开发、驻场工作、招聘猎头等方式，帮科技企业解决软件开发和技术用人难题，为程序员提供新式工作机会。
程序员客栈的使命是为程序员服务，当好程序员的经纪人，布道先进技术。

我的相关回答：
","飞快敲代码？不怕秒得腱鞘炎吗？
一天也就是100-200行代码，加上IDE的各种神奇自动补全功能，能敲几次键盘？
如果我听到我的组员在飞快的敲键盘，我都不要站起来看，就知道他们在撩妹，不会干别的，一定是在撩妹。
【此处有神秘的微笑】
","先上图

拿图的请自觉点赞
10点前一秒赶到公司打卡范围钉钉一下
慢悠悠挤电梯，上楼，放包，摆正电脑
下楼买个包子或煎饼或灌饼，顺便带一杯咖啡或脉动或气泡水
吃完早点10点30啦，然后抽根烟开始美好工作新一天
打开文档编辑器浏览器等乱七八糟
然后开始刷微博刷知乎刷微信刷一切
或者去论坛啊社区啊指点江山围观热点
刷到11点，看看领导状态
如果盯着我或者来姨妈，就放下手机回忆回忆昨天的进度
如果开会或者春风满面，继续刷刷刷
反正上午是不可能敲代码的
除非到了deadline
11点半到45之间开始幻想中午吃啥
11点45开始带薪拉屎腾空肚子
12点准时拉上小伙伴抢电梯
12点45或13点基本吃完饭又回到工位
趴着简单刷下消息，然后开始睡觉
睡到14点到14点30（看有没有人催）
然后倒杯水，看状态迷迷糊糊到15点或15点半
抽根烟开始正式敲代码
Start >
Branch 1 > 敲到18点，下楼吃饭，不饿就下楼散步
19点上楼继续敲代码，或者开始搞点新技术什么的
基本上没有需求就是自己玩奇奇怪怪的东西
Branch 2 > 敲到17点，周一评审会，周四研讨会，周五定审会
开会大约到18点30，然后下楼吃饭
19点多点上楼，敲代码，或者开始搞点新技术什么的
或者继续开会
End >
然后到21点看情况加班，比如上线或开会或挨批或批人
下班以后10分钟走路到家（住的比较近）
或者磨叽到10点就打车去远处朋友家彻夜撸串，或者去夜生活什么的
带薪抽烟一天大概五六次的样子，一般10-15分钟，可混时间约1小时
带薪拉屎基本上还是要分情况的，小号才是真的个人需求，大号都是混时间，正常人哪有那么多屎。。。大号20分钟起步吧，大概2次左右，连带着小号又是1个小时过去了
基本上每天就是下午那两三个小时加上晚上一个小时，这是10 9 5工作制度
10 7 5工作也差不多，只不过下午就纯敲代码，19点下班，正经工作时间差不多，但是思维比较连贯，效率稍高一点
而且因为没有晚饭时间，所以加班都很急，赶紧干完赶紧走，反正没有补贴，磨叽到10点要三个小时，实在难熬，所以基本没有打过车。。。
但是需求来了就真的急，往死里逼那种
晚上回家熬夜继续敲，周末在家自己想办法搞定，高铁飞机继续敲
紧急情况一个电话打过来，地铁上开个热点就是干
所以电脑随身带，有事没事都得背个包
有些复杂需求随便搞搞就到了23点了
但是23点打车，显示排队50位+。。。
","不，荧幕上电脑高手的原型，并不是现实中的电脑高手，而是作家本人。只有作家才需要噼里啪啦的敲键盘，这样才能让输入速度赶上他的思维。而编程语言的信息含量要远高于自然语言，所以不管是读、还是写，都远比自然语言要慢。
所以初学编程，千万不要因为自己无法“流畅阅读”代码而自卑，谁都办不到的。
","
————
没想到这么多赞，那就补充几个具体的案例吧。
——————
某些跟数据库有关的项目，CV大法比自己敲快很多，也少出错。
很多时候有很多字段，因此写增删改查的时候。
往往是想把一个表的字段拷贝到注释的地方
然后一个个剪切或者拷贝粘贴弄到相关的代码里。
这样比自己敲，更不容易出错。
————
一些算法要求比较高的项目，但是在开源项目上，比如github只有py的，而实际项目是用php的，这个就蛋疼了，需要改。
而具体操作就是像素级别的改写，具体操作是一个一个函数拷贝过去，慢慢改语法规则。
——
最后，现实中程序员能飞快的敲代码是一个流传很广的谣言。
事实上大部分程序员敲代码的速度远小于文员敲键盘的速度，或者是打字员敲键盘的速度。
这个谣言跟一些谣言有得一拼，如：

","买过编程类图书的人应该都知道O‘REILLY的大名，这个系列的图书封面辨识度很高，标题之外通常会配有一个手绘的动物形象，比如这样:
有网友制作了一个O‘REILLY封面生成器（链接在文末），让人们可以自己填写文字内容，生成类似风格的书籍封面。
于是就有了以下的作品，调侃了现实中程序员的工作状态：
「Copying and Pasting from Stack Overflow」
「从Stack Overflow粘贴复制」
「Trying Stuff Until it Works」
「不断尝试直到成功为止」
「Changing Stuff and Seeing What Happens」
「改变一些代码看看会发生什么」
「Googling the Error Message」
「搜索错误代码」

生成器链接：O RLY Parody Book Cover Generator
国内网友制作的版本（支持中文）：O'RLY Cover Generator

欢迎关注>> @文森特·凡喵
","Google在职程序员，坐标硅谷。
写代码的时候，我有相当一部分时间在【Ctrl+C】+【Ctrl+V】。Google internal IDE Cider-V的AI插件会随后自动猜测出我大概要写什么代码，然后自动填写大致内容。之后，我会扫一遍代码，确保没有逻辑错误，并且进行调优。
我的大部分时间其实花在并不限于：
如果我以180迈的速度飞快打字，那只有三件事：
最后给大家欣赏一下我的工作专用：

更多文章，请关注我的专栏：

","一定要用机械键盘，因为声音大，要干就干得轰轰烈烈，让全世界都知道你每天8小时都在写代码；
一定要用vim，因为快捷键多，可以增加按键次数，让别人听起来你一直没停；
按回车键的时候一定要最用力，让别人知道你这么快又写了一行；
按删除键不要太用力，否则别人会认为你老在写没用的代码；
一定要戴上耳机，因为别人说你太吵你可以假装听不见。
再补充一个，就像评论里面很多人同意的那样，机械键盘要选青轴，青轴可以敲出很悦耳的声音，传说可以练成钢琴手。
","Google研究过，一个程序员一天能够写出的高质量代码也就是100-200行。哪里需要飞快的敲键盘。像sloth一样一指禅都来得及。
程序员工作的本质是用程序来解决问题。程序员大部分的时间还是用在寻找解决方案，测试验证方案。用在敲打码上的时间很少。如果你看到程序员在飞快的敲代码，那多半是在和PM撕逼，或者写文档。

","自己剪辑的视频里面有一段就很好的诠释这个问题。代码从没飞快过，只有我们被气的飞天。
写代码总共有两种情况
1、一动不动的呆着，想了半天，哦，要这样，然后一个一个的打出来，速度慢的旁边人看着都急。一般逻辑性强的人，打得非常慢，也非常稳，飞快是不存在的。
2、复制粘贴小修改，开会撕逼再吃饭。
程序员不会追求飞快，那样是无意义的，要追求的是思路清晰，码字沉稳，中间不会被产品、运营、实习生等一系列问题打断。一个人安静独处时多么重要，就跟程序员的电脑，下班后从不会关机一样。
而现实中想更快速更沉稳的敲代码，只可能多练，多敲，多看项目，在自己脑子里形成事件线路。就跟我们要多刷题是一样的道理。
来来来，赶快把下面小项目都收藏了，让手速，快人一步。
javaEE电商项目
资料链接：https://pan.baidu.com/s/13AV_9UsvAoQuP2BRkCKkrw 密码：eilw
linux项目百万电商系统架构设计
配套资料：https://pan.baidu.com/s/1a-FtJ2tl3zPw0ybxGoe_4Q ：220t
容器化部署微服务项目
配套资料：https://pan.baidu.com/s/16OPPtfe-6KF6V8MVEEOBBA 提取码：i9o3
python实现头条项目接口自动化测试实战
配套资料：https://pan.baidu.com/s/1aIqVKrdoeZO44DszzqTiNw 提取码：i4m7
电商秒杀项目实战终结版
配套资料：https://pan.baidu.com/s/1QHu5JuazxorzbcnmNzqaRA 提取码：8t6e

电商项目秒杀系统实战（一）
配套资料：https://pan.baidu.com/s/1kmd5yNORVQAyxK_bjhBXyQ 提取码：twc6
电商项目秒杀系统实战（二）
配套资料：https://pan.baidu.com/s/16LYHO0XRjmHwoLDxlVi6aw 提取码：oa6k
电商秒杀项目实战终结版
配套资料：https://pan.baidu.com/s/1QHu5JuazxorzbcnmNzqaRA 提取码：8t6e
JAVA完整游戏项目开发：大咖带你玩得风生水起
配套资料：https://pan.baidu.com/s/1aiHz5txPxnt2PenUBpE_iA 提取码：cuw2
物流项目
商城项目
Android毕设项目_
点赞数上升有点快啊，那就五个视频都给链接吧。
","呵呵，不要被电影骗了，就算是黑客，也用不着噼里啪啦没完没了地敲键盘。剧情有趣还表现真实（仅指操作计算机）的黑客类电影我安利《防火墙》（主演:哈里森·福特,曾饰演《空军一号》中的美国总统），虽然里面用的是老掉牙的 Windows XP，好在 UNIX/Linux 及 iptables 这些年交互上并没多少变化。瞧瞧人美国总统（哦不，安全主管）和黑客敲代码/命令的“速度”，已经非常快了，但也没有不停的敲，毕竟电脑运行也要时间。
而程序员是不是抢票都要写代码？这得说说为什么要写代码了，写代码的目的就是把流程描述出来，然后嘛，让机器替代你不厌其烦的、没完没了的执行呗。所以，抢个票为啥要边写代码边抢呢？写个 JS 让他不厌其烦的替你点呀点呗，至于程序员，喝杯茶听听歌，等着唱“在那山的那边、海的那边有一群……”。
围观一下最早的作者。当然了，现在都被收编了，铁老大也松口开始开放更多接口创收，抢票插件/软件也都不再那么没个正经了。
现实中敲得快不快，别人我不知道，至少我敲了一二十年，肯定没此刻打字快；敲 10 分钟休息 1 小时，挠挠头、喝喝茶、吵吵架，基本上就这个样子。
关于敲代码快不快有个悖论：如果对一个问题很熟悉能连续的敲代码完成这个任务，那么我为什么要重复地、不停地敲呢？把它封装好下次直接调用/设置不就行了？
所以程序员总是在面对新的问题，这也就是为什么大家说敲代码时间不长的原因，查资料、讨论、调试才是真正要花时间的。
","电视剧看多了吧。
程序员更多的还是脑力劳动，而一些影视作品里那样霹雳哗啦的敲键盘的是真正的体力劳动。
上海堡垒中操作无人机手指都没接触到键盘，一大堆代码就噼里啪啦出来了，你也敢信？
先说下我前天的工作：
9点起床，洗漱；
9:10分开车到公司；
9:30到会议室开会；
11:20会议结束，去泡壶枸杞菊花茶；
11:30处理邮件，打开聊天工具看下消息；
12点打开IDE，准备写代码。突然惊奇听到同事喊吃饭。
13点午休；
14点起床，上个厕所先；
14:10分回座位的路上巧遇产品经理，一起顺便讨论个需求；
14:50服务器同学说对下技术方案；
15:30测试同学问这个需求怎么测，一起过下用例；
16点参加隔壁小王同学代码评审；
17:30回到座位上，旁边的同学问这个技术难题怎么解决，去帮他分析问题；
18点以为终于可以敲代码了，却又惊奇发现到饭点了，先去跑个步；
19点跑步结束，到家了，吃晚饭；
19:30去公司；
20点再开个会；
21:30写个周报月报总结专利啥的；
22点终于顺利打开IDE准备干活，leader丢个bug过来，这个问题你先看下，和测试沟通怎么复现，然后看代码；
23:30夜深人静，终于可以敲代码了……
在敲代码的过程可以很快，可以基本上不停，但是在实际工作中占比很少。因为前期杂事比较多，会议多，沟通多，讨论多。有产品经理，有测试工程师，有PM，有设计师，还有leader，有bug。

在编程过程中，脑子中思考的是各种各样的逻辑和架构，注重先思后写。在开发一个较复杂的程序前，会经历很多步骤，比如画流程图，写文档，画架构图等等，而真正的编码则是在一切都想清楚以后才会开始进行的。

甚至，高级程序员可以使用编辑器和IDE的自动完成功能，避免手动输入代码的错误。除了intellisense之外，还有很多其他自动完成功能可以同时启用。比如自动完成行，自动完成文件路径，搜索所有打开的文件自动完成词等等。某些程序员不用这些功能并不等于它们不存在或者不重要。

所以程序员总是在面对新的问题，这也就是为什么大家说敲代码时间不长的原因，查资料、讨论、调试才是真正要花时间的。

练成熟练而快速的敲击并不是一件很难的事情，也许不到半年就能练成，但是能够编写出低耦合高效能的代码却是一个程序员毕生的追求。

事实上大部分程序员敲代码的速度远小于文员敲键盘的速度，或者是打字员敲键盘的速度。

所以别被电影中的那些镜头给欺骗了。理想很丰满，现实很残酷，同志们还需多多努力。
","这几点：
这次我真的凑不到7了:-)
","我为什么想当程序员？就是因为太懒了，同一件事干多了就干不下去。
所以我要用编程语言告诉蠢萌的电脑，遇到A情况应该怎么做，遇到B情况应该怎么处理。然后让它一遍又一遍地重复我不想做的事情。
所以思考的时间至少是输入时间的3倍，跟写文章差不多。敲代码也是一阵儿一阵儿的。
--------
以上是理想情况，现(zheng)实(qian)的情况是：
我就是甲方的翻译，他需要什么功能我翻译给电脑。
然而很多甲方并不知道自己需要什么功能，然后电脑干的不对还要甩锅给我。
","看到这个题目就猜到高赞那个视频会出现，我也知道关心这个问题的人都不是现实中的程序员。
真正的程序员必须明白一个道理，程序的灵魂是可复制性。可复制性也是软件开发区别于其他行业的最显著特点。可复制性有两层含义。一层是说代码客户有多个实例在运行，同样的程序可以在你的电脑上跑，也可以在别人的电脑上跑。另一侧含义就是代码可以开源，大部分通用需求都有开源代码可以用。
一个程序跑起来所需要的代码，绝大部分都是别人写的，即使是一个“Hello World！”。
程序员敲代码速度多块，都比不上找到合适的开源代码快。当你要实现一个需求的时候(例如解析一个Excel文件)，如果完全自己实现这个功能，敲代码再快也不如找到一个合适的开源库。
所以，现实中的一个程序员敲键盘之前，应该首先问自己一个问题：我要实现的功能难道只有我这个产品用到吗？还拿解析Excel的例子来说，难道世界上就没有别的程序员遇到要解析Excel的需求？既然有这个需求，就早有人做过了，我绝对不是第一个遇到这个需求的人。如果有人做过了，多半就有开源代码可以用。
上面这步非常重要，找到适合自己的开源库、框架、组件，是快速高效开发一个软件的前提条件。然后才是敲键盘，当然还有Ctrl C/V。
记得很早以前，刚毕业的时候吧，有一次去王府井外文书店。书店里正在播放一个英文听力VCD，场景是在森林里父亲教孩子打猎。父子俩藏在草丛里，动物出现了，孩子比较慌张。父亲在儿子耳边说了三句话：First，listen。Second，think。Third，Action！
我觉得短短这几个词组成的三句话非常有用，特别适合现实中的程序员们。
首先，要听。听什么？做项目，听用户的声音。做产品，听产品经理的讲解。了解需求，知道真正的需求是要做什么。否则，干活不由东，累死都无功(我初三班主任经常说这句话)。
然后，要想。想什么？如何能够高质量、高效率的实现功能。这其中就包括上面提到的常见通用功能如何找到可靠的开源代码。
最后，才是行动。这一步才是编码。如果没有上面两步就开始编码，上午敲得多快，下午删的更快。
其实，现实中的程序员，一项核心能力要求就是：如何准确快速的找到开源项目，并快速学习掌握，然后正确的应用到自己的代码中。
","最近，国外有个叫 Mckay 的开发者，基于 做了一个代码助手：，特别牛逼。
它可以通过语音对话，自动帮你生成代码，并将代码推送到 GitHub，部署至 Vercel。
就想钢铁侠电影里的贾维斯一样，自动帮你搞定一切！
此外，里面还提到了一款名为 CodeWand 的工具，它能通过自然语言，结合 GPT-4 来快速开发应用。不过目前还在内测，需要申请才能试用。
最近几天，我接收到的 GPT 和 ChatGPT 相关内容比较多。
为了方便自己后续学习与阅读，我整理了一下 ChatGPT 玩法技巧和实用工具，最终弄成了这么一本《玩转 ChatGPT》手册，有需要的同学，可以学习下。
手册地址：玩转 ChatGPT · GitHubDaily
文末，照旧安利一波我们的公众号：GitHubDaily，平时主要分享比较实用或有趣的开发工具与 GitHub ，偶尔也会聊聊技术圈内最近发生的新鲜事，感兴趣的小伙伴可以关注一下～
","你如果听到同事键盘噼里啪啦，手速飞快，大概率是在聊天打字，记笔记，写文档等！
编程功底再深，写代码也是需要思考的！教学视频里老师编码那都是敲了无数遍的结果
","短答案：敲代码的过程很快，可以基本上不停，但是在实际工作中占比很少。因为前期工作很多、很多。
首先大佬会提出一个 idea，假设从 lead 这个 idea 开始。
这时候基本上大多数时间都是在读代码库、看之前的相关 bug、写文档以及和各个相关的人讨论、调研。把详细的设计、工时以及 milestone 都搞出来。
拿到划分好的模块之后，这期间就可以开始构思怎么实现了。有必要的话我一般还会写一个小小的 demo。主要是思考过程居多，敲代码实际上很少。一般会考虑
参考资料：我的回答 程序员只是负责编程吗？
这些都搞好之后，就要开始敲代码了。如果一天 8 小时算，可能平均正式敲代码的时间最多只有 1-2 小时。其他的时间全部基本都在准备编程。在这 1-2 小时内，编程基本上很快，就像代码已经提前打印在脑海里一样，直接往外冒即可。
如果途中遇到卡壳，一般是搜索，看看常规的解法。Stack Overflow 肯定是必须要参考的网站之一。
所以到真正敲代码环节实际上是非常迅速的，只可惜大部分时候我（们）都没有在敲代码。
"
5,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
6,你的编程能力从什么时候开始突飞猛进？,"百度多了
你就明白：它也许有用，但它封印了你精进计算机英语的机会。
Google多了
你就明白：各地大佬们的文章很Nice，但它们仅是你技术知识体系的精华补充。
开始读书了
你就明白：你以往东拼西凑几十篇烂文才明白的事，书上那几页纸都写着，而且详细的很。
接触到国内外大社的经典书后
你就明白：那些烂大街的21天宝典，7周速成，都是些什么玩意，误人子弟！
图灵牛逼，动物牛逼，Manning牛逼。
好书读多了
你就明白：技术是一环扣一环的，有牢固的技术知识体系，学啥都事半功倍。
多做业务
你就明白：所学的技术该用在哪。
多做用户量大的业务
你就明白：光会用技术，和用好技术是两码子事。
多找第三方开源
你就明白：原来工作摸鱼不是梦。
太随便用第三方
你就明白：某天需求一变，它兼顾不到，可以把你往死里坑，坑到你得去看源码。
第一次看完源码
你就明白：开始还是很讨厌的，等全盘搞明白了，发现“咦~有点意思”。
源码看多了
你就明白：自己的查克拉莫名的增多了。而且吐槽文档不全的习惯也渐渐少了，一个不服就跑去观摩别人的源码，顺便偷个师。
再往后，或许你的技术确实突飞猛进了，然而你却只会觉得编程本来就是这个样子的。
因为，但凡通过点滴付出，累积出来的结果，都是平淡无声的。
突然获得这么多支持，十分感谢大家。
知乎就是师兄的心得记事本，喜欢的可以关注哦~
「卫星｜ktshixiong，深度职业规划＋」
一、新手进阶，可看
《重构 改善既有代码的设计》
本书的优点：篇幅短小，示例经典，讲解细致。最重要的是新手读起来不费力，可以作为长久阅读的床头书，开卷必有益。
本书的作用：帮助你学会如何写出有层次的好代码，让你在工作中赢在细节，更容易获得有实力的前辈的认可，职业发展更轻松。
二、寻求职业长久发展，可看
《人月神话》
本书的优点：偏重于讲述编程哲学，几乎无代码阅读成本，笔者像一位睿智的导师，以亦师亦友的口吻，有条有理地为你分析各种项目问题，分享各种工程与人的权衡，还有可靠的处理准则，有志于在编程事业上长久发展的朋友推荐阅读，可以少走很多弯路。
本书的作用：主要是打开你规划工程的格局，次要是积累行业谈资，一石二鸟
《UNIX环境高级编程》
本书的优点：就是全书都是优点，UNIX作为经典中的经典，它的设计理念，基础功能的实现方案，都是值得熟透于心中的，无论往后有多少新系统，最底层的东西都是大同小异。书的内容量大，适合长年小口啃。
本书的作用：打牢基本功，基本功是你技术高度的基石，永远要记住这一点。
此外，不要局限于自己是什么IT岗，只要能帮助你积累优秀的技术思维，好资料再多也不嫌多，职业路走宽了，在IT行业，你什么时候都能走得雄赳赳气昂昂。
更多优秀技术书籍，请看师兄这篇新文章就够了
适合程序员入门与进阶，阅读目的都有说明
→ （持续更新）
相关 IT 高赞干货：
师兄总结的一波行业经验（精华版）
→
师兄多年来对编程的小感悟
→
→
师兄谈自学编程的小心得
（带过 10 来位新人入行的经验）
→
→
师兄关于职场的经验分享
→

以下为冷门，但我自己很喜欢的知识点。
师兄讲编程的难，有趣又真实得心痛
→
师兄实践了多年的自律方法论
→
师兄关于优秀书籍的分享
→
最后，
还是万分感谢大家的支持^_^。



","update:
评论区很多学弟学妹要求整理一个学习路线，刚写了篇文章：
从小白到后端工程师的自学之路 - MutexLock的文章 - 知乎 https://zhuanlan.zhihu.com/p/130364187
---------------
在啃掉一本本计算机经典书籍和写下大量代码以后。
疫情原因回不去学校，作为一个马上毕业，即将入职腾讯的大四生，分享一下自己的学习历程吧。
本人在大学之前从未接触过编程，最开始的编程学习还是在高考完后，从书店买了本C Primer Plus，然后暑假开始啃，前前后后也就看了几十页。
大一上的时候，来到了华中师范大学，还没有转专业到计算机，一直在自学C语言和看一些计算机入门书籍（编码、计算机科学概论）。当时也很迷茫，不知道以后道路如何，所以也学了一些杂七杂八的东西（前端 python啥的），所幸的是，当时坚持把C Primer Plus结结实实地精读了一遍，而且几乎练习题都做了，算是比较好的开端。
大一下，转专业到计算机了，开始自学数据结构，算法和C++，部分看完了 数据结构与算法分析，并且把书上的数据结构实现了一遍，记得当时五月份给自己的flag是看完C++ Primer，然后每天上课看，晚饭吃完后也跑去七号楼刷书，最后囫囵吞枣似的看完了大部分。
大一暑假，txr大佬 @杏仁糖 给我说他面试通过了华科的联创团队Unique Studio，而且给我说他们团队都特别厉害，有些人在军训的时候就把C++ Primer给蹲着看完了，当时十分钦佩，幻想也能够进入贵团队。于是打算在大二上的时候，去报名他们的秋招。所以，那个暑假在学校自学，呆了五十多天。最初，拿起一本APUE，看了一章后感觉看不懂又放下了。然后，又拿起一本红色封面的算法第四版，这本书看完了，并且用C++把上面的算法都实现了一遍。另外，听知乎大佬说CSAPP是必看的神书，当时也懵懵懂懂地看了前面三章，做了lab。为了学习linux，还看了一本叫linux命令行大全的书。武汉的夏天很热，只能寂寞待在宿舍的我，打开了LeetCode的世界，写了一百多道题。
大二上，十月，忐忑迎来了联创的面试，前面两轮都过了，直到其特色的“熬夜测试”环节，因为实力不足+精力不足，测试败北，没有通过。清晨七点，在回学校的公交车上思考自己不足，总结是知识体系仍然不够完全，而且深度也不够。后来这个学期有点“误入歧途”的意思，入了Machine Learning的坑，记得当时花了好几个月刷完西瓜书和吴恩达机器学习课程的讲义（真佩服当时的毅力，都是英文和公式推导），后来想了想，ML/DL这个东西有点玄学，于是毅然决定成为一名做工程的程序员。总的来说，虽然这个学期的时间都投入到ML的学习中，没有学习工程方面的东西，只有用python写了一点好玩的爬虫，但是给了我以后坚定走工程方向的决心吧。
大二下，这个学期是打下计算机知识基础的关键时期。从知乎找了一系列书单，看完了CSAPP（做了lab，为了bomb lab还通宵了，强迫症想让自己把炸弹都拆了）、半本算法导论、effective C++、计算机网络系统方法（前三章）、部分TCP/IP详解等，做了一些项目，比如正则引擎（这个是参考了轮子哥的教程）等等，尝试写JSON库（未遂）。其实，因为学校只是一个普通211，找到好工作的学长学姐先例很少，一直是没有信心自己能去大厂，直到当时了解到myk @孟永康 学长在春招收割了一系列offer后，才有了些许信心，相信自己如果能够像他那样努力，那么也能够找到好工作（感谢myk学长那时的鼓励和指导）。所以，定下了一年把自己水平提升到能够在大三下春招的时候拿下大厂offer的目标。
大二暑假和大三上也一直为这个目标奋斗，补上了APUE、部分UNP、深度探索C++对象模型、STL源码剖析、操作系统概念、操作系统真象还原、Linux多线程服务端编程、部分C++ template、部分C++ Concurrency in Action等书籍。然后，也一直没有放弃刷题，LeetCode写到了三百多道。同时也做了一些项目，跟着操作系统真象还原写的操作系统、简单的协程库，阅读了一些优秀的开源项目，SGI STL、muduo、libgo、libco等。中途还对haskell产生过兴趣，打印了一本Learn Yourself Haskell For Great Good，看完后感觉坑太深，还是专注找工作吧，haskell对我一直都有很强的吸引力，但是这种也只能作为爱好吧。另外，编译器也是有这种魔力，看了部分编译原理（龙书）、部分现代编译原理（虎书）和部分Engineering a Compiler，多次尝试写自己的编译器，多次未遂（不过现在有空了，在补上之前的烂尾项目）。当年的笔记哈哈：
时间到了12月份，9号楼某个自习室内，txr大佬一直鼓励我去投简历找实习，本来我一直畏畏缩缩，对自己不太有信心，被鼓励后想着投就投吧。当时投了字节跳动和momenta的实习，面试都比较顺利，于是在大三上就在字节跳动开始了愉快的实习，比自己的计划早了大半年。当时为了准备面试，看了好多牛客网的面经，查漏补缺式地补齐自己的知识盲区。
大三下，基本都是在实习，学习了很多工程实践上的东西，接触了go的技术栈，并且对devops和软件工程方面有了认知，包括代码管理、发布流程、微服务啥的。然后实习的时候骑驴找马，找到了腾讯的暑期实习。因为这个时候没有了找工作的压力，所以开始学一些自己感兴趣的东西，包括Rust（至今水平还是不太行）、分布式系统（DDIA、MIT6.824等），零零散散学了点东西。
大三暑假，腾讯实习了两个月，开始学习kubernetes、各种中间件等实际业务用到的东西，这个时候就感觉拥有到扎实的计算机基础是最重要的东西。
最后，顺利拿到了腾讯转正和字节跳动的秋招offer，两家都给的比较高，选择了工作体验更喜欢的腾讯哈哈。
总的来说，学习计算机是需要积累的，花一两年时间啃下那些厚厚的经典书籍后，才能构建自己的知识体系，然后阅读大量优秀源码，做一些有趣的项目，编程能力就能突飞猛进啦。
现在回头来看，大学时光真是如此宝贵，这是人生中为数不多可以静心学习的一段时间，可以不用考虑任何其他事情，每天学习十多个小时。
部分藏书：








","
大概……是为了追女生而写了一个游戏的时候吧。
大概七年前，我为了追一个女生，以她和我为主角写了一个战棋类RPG游戏（其实还做了很多别的事情hhhhh），灵感来源于小时候玩的世嘉版《水浒传》。故事的背景是我大学，游戏名字叫做《凌工路2号》。
我一直都觉得，在大学，生产力的来源主要有两件事情：
这个游戏有对话系统：
有战斗系统：
有职业/升级/转职/职业相克系统：
有角色属性、物品、存档系统：
有剧情：
有作战系统和敌人的AI：
故事的背景是我的大学，这是中心食堂和足球场：
我甚至还在综合楼的自动售货机上做了一个物品买卖系统：
这个游戏大概不到一万行Qt代码，没有用任何的框架和引擎，现在看来相当原始，所有的移动和动画效果都是用Qt的定时器+一堆if/else判断徒手撸出来的（当时不知道更好的办法，就这么一根筋地写了几个月）。我自己的感觉是，写代码超过5000行的时候，自己的能力会有一个飞跃——以前从没有注意过的东西开始觉得费解，从而逼迫自己思考和学习，然后进步。在我参加校招的时候，这个游戏的代码量占我当时的代码量的差不多一半……现在回想起来，我校招能进阿里，这个游戏带来的能力提升功不可没。
这个游戏没有最终完成，也从未发布，静静地在我的硬盘里躺了七年。
四年前我跟游戏设定的女主角结婚了。
这周二我无意中看到它，拿到现在的机器上重新编译通过。在吃晚饭的时候，我问她：
“你知道我当时给你写了个游戏么？“
她说：“不知道啊”。
代码在这里（我知道它很烂），遵守WhatTheFuckPublicLicense，随便修改：
最后放几个全地图的场景，如果你和我是一个学校的，会觉得相当亲切。不过，大部分的地图都不是我做的，我自己做了中心食堂、综合楼、研教楼、校医院、一馆五个场景的室内地图。
评论区炸出了很多同道中人：
@杜凯 说：
@ Authur 说（at找不到这位老哥，刚刚at错一次）：
如果赞能破万的话我就把可以运行的二进制版本release到GitHub上……
","大学时浑水摸鱼，毕业后大约半年，在网络上寻找自学资料时，发现了GitHub和一些程序员论坛，自学了py，然后打开了新世界的大门。
包括购买了梯子，独自啃下两套纯英文官方文档，在GitHub上友好亲切的交流，刷题，看最新的软件工程实践书，等等
===========更新2：===========
一些人问《哈弗大学幸福课》在哪里看
我是在这里看的：https://www.bilibili.com/video/BV1Gs411o71d?p=1
其他的我不知道
=========== 更新 ============
断断续续的收到一些赞，写一些可能对大家有帮助的东西吧：
1、提高知识最好的途径是读书，包括但不限于计算机四大名著《操作系统》《计算机网络》《数据结构》《计算机组成原理》。经典书籍不仅仅有完善有效的知识，更重要的是这些书里的计算机经典思想，一直到现在都没有过时，十分的有用。
2、Github是个好网站，值得习惯性的到上面搜索需要的东西。比如awesome系列和一些质量很高的资料整理项目（整理常见的面试、刷题、常见工具链的git repo）
3、v2ex和知乎都是很好的网站（尽管审核方面被吐槽很多），论坛上有很多很厉害的大佬，关注认真答题大佬的动态对开拓知识领域是有一些帮助的。
4、善用搜索引擎（专指Google），最好能把自己最常用的工具的官方文档啃一遍。主要是习惯英文文档的表达方式+系统的认识自己所用的工具，对自己写文档也是有很多帮助的。
5、因个人有长期的抑郁经历，所以对心理方面关注得也比较多，十分推荐学习《哈弗大学幸福课》。这门课的综合内容十分丰富，实践性很强，能够有效的提高生活、职场中的软技能（沟通能力、抗压能力等）（这门课另外一个很厉害的地方在于，仅仅是上课的方式，也能提高你的逻辑思维能力，毕竟据说是哈弗学生选修最多的课，课程质量极其的高）。
6、有一个我自己打算做但实践得还不太好得地方：看经典开源项目得源码和架构。只看过一些小的玩票性质的开源项目，也学到了不少东西，大型的经典的开源项目还没能看（STL、Git等），这些项目对我来说主要是太庞大，时间上有些不够用。
7、最近在坚持做Leetcode每日一题，也推荐大家一起刷呀。保持手感，很多题看起来简单，但评论区也能看到有趣的知识。
8、关于职业规划这种事情，我以前是没有的（主要还是抑郁+低自尊影响的吧）。现在获取的信息太多太多，没有职业规划很容易被带偏。我是在做了长期的心理咨询+《哈弗大学幸福课》，工作、生活上都有一些经历了之后才慢慢想清楚自己将来的生活与工作要怎么打算。这种事情想清楚过后，做自己想做的事情目标会比较清晰，不会得过且过。

感谢阅读，祝好。
","学了OO, 熟悉了“设计模式”, 领悟了IoC和DI, 让我大概感觉到了程序应该有一些结构, 而不是简单的把逻辑用if-else写进去, 这是我感觉自己能力提高的第一次飞跃;
看SICP和CTM让我开始理解程序和编程到底是什么, 特别是对CTM里的最小表达力原则的理解, 这是我编程思想的第二次飞跃;
学了函数式编程思想为我打开了另外一个世界, 引导我去了解haskell, 去稍稍的学习了些category theory(这个是真的难...), 这解放了我编程思想的另外一个纬度, 抽象能力有了质的提高(主要体现在generic programming的能力提高, 高级类型的灵活运用), 我开始有意识的去降低核心程序的""熵""(程序的可能性越多, 各种可能性的概率越均等, 熵越高), 使得程序更容易理解(熵越低信息含量越低则越容易理解), 而把系统的灵活性(比如状态, config等)隔离在核心逻辑之外(这样使得变化可以在一个地方, 比如系统setup时, 集中理解, 然后用理解的setup来很简单的推理核心逻辑在这种setup下会怎样运转), 这样就使得程序的核心复杂度更加接近于核心业务的复杂度(业务的熵是本质复杂度无法用调整程序结构的方法降低, 但是, 本质复杂度也是可以降低的, 请往下看), 但是又没有写死整个系统的灵活度; 这是第三次飞跃;
然而, 最大的飞跃是当我最终把重点从编程本身转移开来之后, 当我开始去看分布式系统算法, 去理解各种云服务的特性, 去深入了解我所工作的领域或者说业务, 去了解和我们组有关系的其他部门的业务, 去了解ML(由于业务相关); 去了解需求获取, 怎样拒绝不合理需求, 怎样调整和简化需求(降低业务本质复杂度的关键), 甚至创造合理需求，去了解测试, 监控, 部署, 构架, 运维, 项目规划和人员部署, 思考为什么junior SDE会犯错, 帮助mentor别人, 甚至开始关心组内的技术文化建设;
这是因为“编程是最重要也是最不重要的事”
以上引用出自自学编程需要注意什么？

我觉得: 我们在积累技术能力的同时一定要开阔眼界, 这样才不会陷入一个""局部最优解"" (随便逮着一个点都能开阔人类边界的天才除外); 眼界太窄以至于学了一点点东西就觉得自己""天下无敌""了, 是我们进步的大敌 (也是曾经是我最大的敌人);
","回顾一下，我的技术能力（不仅仅是编程，而是解决问题的能力）的进步大约有几个重要的节点:
1. 刚入行时的入门练习题
这个是当年狼厂网页搜索部门的传统，不知道现在还有没有，入职第一个任务是完成两道练习题。一题是在Linux上用纯C（不许用C++，没有stl可用）完成一个多线程的网页抓取器，另一题是同样的环境语言完成2G大小的query（搜索查询词）的top100提取，有时间要求。
入厂之前我在Linux上没有写过代码。
两天时间从Linux基本命令的熟悉，vim gcc gdb的使用学习，从malloc和free开始搞内存管理，从0开始码hashtable(还得自己写hash函数），从socket开始实现http client和各种协议码解析，使用pthread多线程和信号量互斥同步，基本把操作系统计算机网络复习了一遍。
这两天把我四年本科三年研究生没搞扎实的工程基础全部补上了。
结论:有目的的练习，尤其是一个完整的应用问题的解决，是学习的不二法门。
2. 接手一个完整的模块（子系统）
搞完入门练习，leader过来跟我说：小胡，现在有一个重要的模块交给你，赶紧熟悉一下，然后完成如下功能升级。
这个模块是前厂存储网页的核心模块，在当年内存4g的奔腾主机上单机存储几千万网页，几台机器存下了当时整个中文互联网。支持高性能的随机存取和顺序读，可以说把机器性能压榨到了极致。
3w行，纯C。
啃了几天终于搞明白了结构，（多年以后我还得感谢source insight），同时也对写这个模块的大牛佩服的五体投地，为了压榨内存把每一个bit都物尽其用，各子模块之间的分工又是那么的优雅。
然后是上手改，看懂了之后功能升级很简单，只改了十几行代码，但上线的时候真是手发抖！
后来才知道这个模块好几个前任都没成功接下来就被fire了....
后来又经历了若干次升级，解决各种诡异bug（搞过高并发存储系统的应该知道坑有多深），编码和解决问题的能力突飞猛进。
结论: 学习系统设计的最佳途径是看一个优秀设计的源码，检验成果的方式是改造它应用于你的实际场景。
3. 接手一个完整的系统
搞定存储模块之后，我的下一个任务是升级喝扩展一个完整的抓取系统。
和入门练习做的抓取器不同，这个完整的抓取系统（又称spider）是工业级的，需要每天完成千万级的抓取量，还需要考虑并发压力控制，网页更新调度，垃圾网页处理，去重等等诸多现实的工程问题。
大大小小十来个模块，十来万行代码，大部分是C，还有接近一万行的bash脚本（用bash实现分布式的网页去重处理你信？）
这时会发现很多模块内部都有不少实现不尽如人意的地方，但是由于借口定义的好，模块直接容错性强，整个系统还是work的。
这促使我思考系统级的架构，最需要关注的重点是什么，良好的结构远胜于细节的雕琢。
大约小半年后，我对这个系统基本做到出任何问题能立刻反映到是那个模块出的问题，对问题的分析定位能力又上了一个台阶。
结论: 理解了接口定义和系统结构重于实现细节，就迈出了架构师的第一步
4. 设计一个完整的子系统
此时大概工作快两年了，原来的抓取系统有一个很大的问题，就是积累的网页数太多，更新资源分配不过来，导致系统中大量网页在互联网上已经404但仍然会进到线上被检索出来。我们称之为死链接问题
通过对死链的规律分析，我发现互联网上大部分死链存在站点或目录级聚集的现象，这个其实很好理解，一个网站无力维护了，自然就全部挂掉，目录级很可能是网站改版了，或者一个子频道关闭了。利用这个规律，我们可以大幅度降低死链检测的资源耗费。
在这个认识的基础上，我设计了一个独立的死链检测系统。上线效果很不错，检查死链的流量开销降低到原来10%，网页库中死链还下降了。
结论: 架构师首选要解决的是待解决问题的精确描述，和对问题域的分布规律的挖掘，然后才是结构设计。
5. 设计一个新的系统
工作第四，五年间，hadoop在业界逐渐流行起来，基于Google三件套的设计，当年的hadoop最上层的table还很不完善，但是mapreduce和hdfs已经很可以用了。 如何利用分布式基础框架改造系统，让系统更健壮（以及永更廉价的硬件給公司省钱），成了当时的一个重要问题。
整个抓取系统和建库系统的分布式改造，相当于重新设计一个新的大系统。需要考虑方方面面，如何逐步升级兼容原有系统？如何保证功能的完整性？原有设计中有一些不合理的地方，如何利用这次迁移同步改造？
主导完这些工作后，系统架构方面再也没有遇到搞不定的问题。
结论: 好的架构师需要在合适的时机解决重要的问题，业务发展才能给你这样的机会。
上面5个节点，大致是T3 T4 T5 T6 T8的水平。
新冠在家隔离，半夜睡不着码字这么多。看完给个赞呗。
","阶段一：啥也不会，抄代码都运行不起来，学会了百度+google，学会了舔着逼脸去求大神。
阶段二：学会天坛看教学视频，得瑟能写一些页面，停留在CURD阶段，顶多培训毕业水平，疑难杂症无能为力。
阶段三：开始了解底层，看书研究底层，原来发现全是数据结构算法、操作系统、网络底层，开始沉迷研究底层技术，用优雅的设计。
阶段四：知道一些底层，开始跟别人喷技术的优雅性，忽略了我们技术是为了业务带来收益。
阶段五：能灵活判断业务的情况，给出合理的技术架构。
总之，突飞猛进的时候是自己会实践用起来，同时在项目环境中碰到问题，研究底层最终解决疑难杂症，随着经历无数个疑难杂症的积累，也就是这时候。
说明：很多小伙伴都在问，就是抛出了现象没说每个阶段怎么解决问题，大家可随便评论区问问题，我收集完统一系统性回答。
没想到瞎写写这么多赞，谢谢大家！
近年来，有些读者会问我一些形形色色的问题，让我很难去回答，甚至给不出建设性的意见。
举个例子：
1. 我学习什么能进入优秀的互联网公司工作？
2. 我想做研发我应该学习什么？
众所周知，这问题就像你问学霸说你这么厉害一样让人难以回答。我作为一个双非软工本科学生，经过大学自己摸索和不断试错，毕业开始在百度从事研发工作。其实，我当时也有很多的疑惑，在这里给大家讲讲我的踩坑历程。
记忆中，我当年逛知乎、求助高人、甚至我的导师，都无法给出一个可操作的建议。除此之外，在我那种二本学校，知名企业都不会去咱学校校招，我和学长们对春秋招的概念微乎其微，进大厂是件很困难的事情，概率与踩狗屎不相上下。
作为探路者，求助知乎和论坛，给出的结论几乎都是好好学习数据结构/算法、现在大数据很火你应该学学Hadoop/Spark、你要是会微服务、docker、k8s一定会很加分。
让我想起了我当年问学霸题目如何解？学霸说：这个题目是来源于第X章第X例题，你这样解，答案就出来了，很容易的。至于为什么他能想到，鬼也不知道。
当时，我真的是花里胡哨的啥都学，啥都去倒腾，不知道是不是梁静茹给我的勇气。前端、后端技术栈、Hadoop/Spark、docker/k8s这些几乎都实操过，只是很多只是入门并没有深入研究，效果自然也十分有限。
这些概念，对于小白或者在校生来说，这仿佛在对说你不用学了，除非你天生技术欲望特别强烈。这对于大多数普通人来说，明显是劝退的节奏，可操行十分有限，几乎没有参考价值，不知道从何下手。
其实，道理是没有错的，多研究底层和热门技术栈是有益的。但是，脱离实际情况谈技术就是扯犊子，就像让中国男足拿世界杯冠军显然不符合实际，更应该是根据实际情况，做产出最大的事情，否则会信心全无。
接下来，我系统性拆分问题，在不同阶段应该「学什么」、「如何学」、「学到什么程度」，重点讲我当时遇到的问题，还有我是如何去思考的，最终如何解决的，思路比结论重要。
根据问题归类来看，主要在我自己的角度谈谈普通本科如何实现进入Top级互联网工作？
首先，说说在大厂工作都是些什么样的人，他们当年都是背着什么光环混进去的？
经过我的调研和分析，重点说一下在校招中面试官看中和考察的东西。
大概思路就是，要么你证明你令人信服的天赋如逻辑系统思维、聪明，让人觉得你可以被快速培养；要么你有丰富的工程实战经验，证明你具备优秀工程师的潜质。
当然，你可能会说这么多要求，恐怕神仙也做不到啊，简单太苛刻了。在这里，并不是上述要点全部满足，只是满足其中两项证明你的实力即可，毕竟面试时间十分有限必须有点让人信服的东西啊。
举个例子：
1、假设你是上海交大、华中科大大学毕业的学生，你可能只需要重点复习数据结构/算法等专业知识，辅之把学校的科研经历说一下。可能进入什么阿里华为百度问题都不是很大，专业知识对于你们来说自己不再话下，毕竟考理论就是你们的特长。
2、假如你是双非大学毕业的学生，那么你必须用国家级大赛、开源项目、互联网公司经历证明自己。总之，多做项目，专注于技术本身，让自己更早具备职业软件工程师的实战技能。
简而言之，你没有光环，那就比别人多努力点，提前做好职业规划，把时间投入技术本身不要投机取巧。
鉴于上述分析，知道需求是什么？对于我们来说，主要把精力投入在技术本身。
接下来，我们将面临一系列问题。 1. 我应该做什么方向？（方向） 2. 我应该学习什么内容？（规划） 3. 我如何学这些内容？（方法/策略） 4. 我应该学到什么程度？（量化） 5. 如何把理论用到实际项目/产品中？（产出）
不同方向，意味着不同领域不同，学习的知识和实战项目有共性也有差异。在这里，我主要讲一下通用的思路。重点拿我擅长方向举例，其他方向可按照同样思路举一反三。
根据我的经验，可将内容分为原理、应用、擅长方向三个纬度。原理和应用纬度必须学习，方向纬度根据自己擅长方向深入学习。


原理：计算机网络、操作系统、数据结构/算法，这些东西都是专业课好好学即可，数据结构/算法可以偶尔刷题。校招的时候再重点复习，初级阶段不必花太多时间深究。
应用：它是最基础的内容，不管你从事什么领域都将离不开它们。这也是小白入门重点花费时间的地方，你将在这里不断与程序斗争如调试、验证、异常、解决。
方向：不同方向本质上就是在基础应用上扩充，发挥它们擅长领域和特性去解决特定问题。在这里，简单列一下涉及的技术栈。
基于上述分析，主要讲了整体思路，大家可能会觉得有点不太好理解。接下来，拿我当时遭遇的处境进行举例阐述，这样让不同水平或时期的同学有不一样的体会。
假如有时光机让时间往后倒退3年，时间来到我刚上大二的时候，作为一枚小萌新开始学习JAVA走上后端开发之路。
对于我来说，操作系统原理、计算机网络先战略性放弃，毕竟刚接触编程，看高大上的原理，每次上课都想睡觉。当然，数据结构/算法我还能好好听听，毕竟我数学功底还行让我不排斥。
为什么不先学习基础性原理？
举例：假设你学骑自行车，你是直接上去就蹬？还是先把轮子拆下来研究清楚原理再去学习怎么蹬？
重点：根据我的经历，在新手阶段不管是接触新的语言，还是新的方向。最快的方式就是先把自行车蹬起来，等你蹬熟练了再去研究轮子是怎么造出来的。
根据上述策略，刨除我踩的一些坑，我把学习征途划分四个阶段，实现学习效率的最优解。

第一阶段：新手入门
在我入门的时候，我遇到的最大困难是代码不会写，DEBUG不会做，程序报错不会看毫无头绪，甚至大家常说的百度一下的关键字我也不知道搜。
这时候，最大的目标就是根据百度/查文档/看视频，把程序调试出预期结果，甚至你抄代码都行，很多时候抄代码你都不一定能DEBUG出预期结果。这就是现实，主要就是要把对编程的排斥消磨殆尽。
这个阶段，不需要太关注底层实现原理，最重要的工作就是把应用层面的技术，不断练习直到熟练掌握上面提到的应用纬度「 编程语言、Linux、数据库、HTTP网络协议 」。
对于现已从事计算机行业的同学，其实这部分内容非常简单，可能按照正常水平少则几天，多则不超过一周就能开发出简单模块。简单说，它顶多是普通本科毕设设计水准，主要是让新手在感官上体验软件产品。本质上，在计算机世界里，抽象来看就是数据的计算、传输、存储。随着你的经验增多，你会发现很多技术都是诞生或优化性能都是在解决计算、存储、传输的问题。 在这里，主要让大家在系统的角度感受最简单、最初级的技术模型。

作为小白，我们不得不面对一个现实，小白阶段中大多数人对计算机了解几乎为零，尽管你小时候玩游戏贼牛逼。就像写个HelloWorld，你起码要安装好环境，安装好IDE，可这简单的两步都能捶死在坐的各位弟弟。
幸运的是，我们在互联网如此发达的时代，市场如此火爆，视频资源可以随便搜索，甚至自动给你推荐。
我是特别推荐这个时期，大家去完整找一套视频来系统学习。尽管新手视频对于现在的我来说很费时间，但是对当时小白的我来说，这是新大陆，它能带你简单过下计算机体系导图。我在课余时间学习视频，让我在课堂上学习理论的时候，能够有豁然开朗的感觉，自然就比别人强了。
在这里，我就简单给大家推荐一些学习资源。
假如你学习java，推荐你去尚学堂/尚硅谷/网易云课堂，它们会有成熟的学习路线，视频也是那种手把手敲的，新手学习比较友好，我狂喜的是可以不投币白嫖。
第二阶段：项目练习
通过第一个阶段学习，你对编程从一无所知到有所斩获，对计算机世界充满了好奇，甚至有所开心。这时候，你最应该做的就是去满足你装逼的梦想。
假设你是爬虫方向，你应该去爬表情包、爬知乎数据、自动抢票，去满足你无数个装逼梦想。
假设你是算法方向，你可以去研究推荐算法、图像识别模型，去做个商品推荐、人脸识秀一秀。
假设你是后端方向，你可以去研究下网络编程/网站开发开发个仿微信聊天应用，体验下lowB版微信。
画外音：多做项目，坑是一步一步踩出来的。
作为大学生，实验室、软件设计比赛、开源社区都是你发挥现象力的天堂，这些倒腾的经历将是你毕业时最宝贵的经历。
第三阶段：强化理论
经过前两个阶段实践，时间来到大三，这时候基本的软件开发已入门差不多达到普通培训班毕业水平。同时，专业课如数据结构/操作系统/计算机网络也上的差不多了，对概念多多少少有初步了解。
这时候，你会发现很多原理你不懂，将很难更上一层楼。
你将处于写代码一时爽，一直写一直爽，遇到性能问题直接土崩瓦解。所以，你不得不去学习理论知识让你走得更远。
问题：为什么在这个阶段强化理论知识？
在新手阶段去强化理论知识，会让你兴趣骤减且产生学了有何用的错觉。同时，这是最好的时机，学校专业课学完你有基础概念，你有实际软件应用场景，这些东西让你深挖理论的时候会快速给你构建起基础图谱，让你兴趣激增不断体验学会的东西，将戳痛你最痛的神经，瞬间把你以前遇到的问题有新的认知，这就是答案。简单说，面向问题，解决问题，让你实实在在感受到成长，这就是成就感的力量。
问题：如何高效的学习理论？

其实，编程语言和计算机基础都是相通的，只要你学透一门编程语言剩下的就大同小异。当然，计算机基础毕竟是枯燥无味的，学习毕竟是有方法的。
举个例子：
站在编程语言的角度，你用心去总结，你会发现不管什么编程语言，变来变去都是换了个花样在谈以下内容。
不管在面试还是技术探讨，重点考察的都是集合、网络通信、线程/线程池。源自于它跟计算机基础有紧密结合，你要优化它们你必须具备扎实基本功。
基于我的研究经验，我建议大家在学习计算机基础的时候，不要因为理论而理论。你应该去通过编程语言源码去学习计算机基础，只学你当前认为最重要的。
举个例子：
当我去学习数据结构/算法的时候，我会一边学习源码一边思考数据结构，这样就让我有实际应用场景不会因为理论而理论。我学习list、set源码的时候，我就学会链表、栈。我学习map的时候，我就学会了红黑树、散列表。
当我去学习计算机网络的时候，我会一边学习socket的用法，学习Linux网络通信模型epoll，这样就重点把网络协议学会了。同时，很多应用场景极少的理论知识，我就粗略记忆或者跳过，这样就节约了很多时间。
当我去学习线程/线程池的时候，我会学习锁机制、生产者/消费者模型这些操作系统原理的重要知识，跟编程语言中关联不大的我就粗略记忆。
第四阶段：深究专长
经过前面三个阶段的学习，你已经具备扎实基本功和项目实战经验。接下来，你需要做的就是更加的专业化，研究一些有生产意义的东西。如果你一直写学生管理系统，这些没有价值没有意义的东西，那么毫无意义。
这时候，你应该去互联网公司验证你学习的技能。除此之外，你可以去学习额外的成熟先进技术栈。这样，你就有实际业务经验，就有技术的宽度，同时又有深度，这就是你核心优势，毕竟算法/数据结构这些东西在竞争的时候大家都会。
画外音：去实习，最好去大厂实习，接受互联网软件开发的挑战。要是不能，那么去研究实际企业技术栈的应用与底层研究。
举个例子：
假设你是后端开发，你就可以去学习微服务的技术栈，springboot、dubbo、docker、hadoop都可以去学习。除此之外，设计模式，redis原理都可以去学习研究，只有这样当你去面试的时候，你有很多话题和故事讲给别人听，你的专长研究既可以让你说业务场景，你又可以讲底层原理，对答如流。
经过上面的训练，已经具备了解决问题、快速学习、编写代码能力，也就是具备软件工程师的职业素养和扎实基本功。
这时候，进入互联网公司开启职业道路，你将会很快有产出，不会陷入徘徊自闭的状态。更何况，你的职业素养已经能够让你遇到问题，能快速的学习克服困难。但是，要是让你去参加面试可不一定能独善其身，毕竟工作拧螺丝，面试造火箭可不能疏忽大意。
接下来，重点讲一下如何应对面试？
面试也就是把自己卖出去，让别人觉得你值。简历是至关重要的环节，所有的知识和技能全都是围绕它展开，否则毫无意义。因为在面试中，面试官关心你有什么，也就是面试完全围绕着你会的东西展开提问，所以你就把你的优势发挥到极致就行。
环节一：准备简历
简历一定要认真对待，一定要简介精炼，尽可能把内容压缩到一页，毕竟简历筛选就30秒不到。这时候，简历排版、简历字体、简历模板都有讲究，细节决定成败。
在写简历的时候，主要分为个人资料、实习经历、项目经历、专业技能。其实，没什么技巧，参考STAR原则，重点体现你在项目中的价值和思考。
假设有读者需要简历模板，可关注提供给大家。
环节二：梳理知识体系和刷面经
以前，学习知识是零散的，学习策略更多是面向解决问题，以至于知识不系统，表达逻辑层次有限。面试官逻辑思维强，所以你必须做好充足准备才能脱颖而出。
最好的策略就是梳理知识体系和准备面经，我们都知道要是你面试官问的问题是你刚好熟悉的问题，你岂不是轻松闯关成功？所以，准备考纲、梳理知识体系、疯狂刷题这就是最好的策略。
按照互联网面试流程大多数分为三轮面。
一轮面试：主要是考察计算机基础知识和擅长语言基础知识，重点考察数据结构/算法、网络编程、擅长语言基础。但是，绝对不是死记硬背的东西，一定是深度和广度紧密结合，环环相扣直到把你肚子里的东西全部挖出来。
举个例子：
你会发现每个问题都是环环相扣，从简单到难，目的就是挖掘出你的极限。大多数情况都是，从数据结构/算法入手，扩展到编程语言特性，再扩展到并发/网络编程不断进行深挖。当直接问实际用法应试者答不出来的时候，就会再次引入到计算机基础知识，这样不断反复调度试探应试者的是深度和广度。
二轮面试：这轮考察实习/项目经历，重点考察你的面试储备。众所周知，大部分应届生项目经验十分有限，大多数是图书馆管理系统、电商系统这样。重点说一下应对策略，可以去网上找你做的项目可能遇到的领域难题，去找解决办法，最终扩展补充到你的项目中。
三轮面试：这轮面试更多是经理考察应试者的基础能力。也就是逻辑思维、抗压、时间管理等基础能力，看下是否能融入团队，毕竟适合团队的才是最好的。
这里主要讲了思路和应对策略，至于篇幅有限，面试题只能读者自己梳理，假设有需要后续再聊。大体的思路： 1. 梳理知识体系看面试可能考哪些东西？ 2. 去网上搜寻和整理面试题？ 3. 把数据结构/算法、并发编程、网络编程串联起来，还要学会理论知识和实际实战中来回串联。
总之，作为普通学校的同学，你只有花更加多的时间在项目实战中，实习/打比赛/逛开源社区，这些时间让你更快接近成为职业软件工程师。当机会来临的时候，你抓住机会就踏入大厂的大门了，幸运永远不会无缘无故眷顾你。
经过读者提问，再附之我的思考，我大概总结出来分为这么几类问题。
不卖光子，直接说下整体解决思路。
问题：那些学了有用？
有用：计算机理论（算法、网络、操作系统）、项目、实习。
企业招人就一个目标：来了公司能干活，培养完能干活。
软件研发这职业，像奖学金、三好学生、学生会主席、英语四六级，对于咱们这职业来说用处不大，有只是能彰显有亮点可作为加分项，锦上添花。当然，你能去拿到这些东西尽量去拿，毕竟别人能拿到，你拿不到你怎么证明你比别人强？
前端、后端（产品或架构）、测开、运维、大数据开发、数据分析
从大学时间角度，每个学年会拆分出目标。
从专业知识角度，根据不同解决学习不同知识。

总的来说，实际操作起来还算清晰。
阶段一：找培训机构视频学习，只要能独立实现可让人访问的应用如仿微信聊天软件。
阶段二：做项目，你可能会学习崭新的技术栈（springboot、redis、kafka），需要什么学什么。
阶段三：通过做项目使用了很多新兴技术，计算机理论知识也学了很多。这时候，你核心目标就是把学过的东西总结归纳，拿着他们去面试找工作，这时候你要能说出怎么用，还要说出为什么要用。
开源学习网站：
要是觉得还得写不错，点击 @码农皮邱关注，有惊喜！
","我有幸有个姑父在腾讯做的蛮高。。。我曾经请教过他这个问题，他的回答是 ”读顶尖代码“

他有个观点，好的 programmer 不是教出来的，更多是师傅领进门。这个东西就像武侠小说，真正的高手不用你出手，光是走几步，就看得出来了（代码风格）。而所幸一切顶尖的”招式“都在 github 上有对应

要做什么事情 ---> github看看做的最好的是怎么做的 ---> 代码一点点拆分、阅读、分析，看看有什么可以学习、借鉴、模仿，甚至蒙住看自己会怎么写 ---> 自己动手做，学习，比较，学习

具体来说，多关注一些 github 上的技术狂热者，热衷分享技术和代码，比如 lucidrains https://github.com/lucidrains ，用 PyTorch 复现了VIT、AF2、styleGAN、DALLE2、imagen、denoising diffusion 等等各种前沿，真的是宝藏男孩
","每个人的编程能力应该都是在不知不觉间慢慢提升的，仿佛“随风潜入夜，润物细无声”一般.
我想正常情况下应该也没有“风如拔山努，雨如决河倾”的瞬间提升和突飞猛进。
作为一个本科双非，研究生也是双非，即将入职字节跳动核心部门的普通学生，来分享一下自己在过去一年时间，也就是校招开始前一年的时间里通过自学 C++ 、操作系统、计算机网络、数据结构与算法、数据库等科目，最终顺利上岸的历程吧。
身边朋友说我是逆天改命的典范，因为一个普通二本的学校学生不仅能够拿到华为、百度、B站等互联网公司的offer，还能拿到一线大厂字节跳动的SP offer！！！
在如今这个十分看重学校和出身的时候，这几乎是不可能的事。
老实说，我真的觉得真的有点夸张了，我只是比别人多花了点时间而已，仅此而已。
他们所谓的“逆天改命”，不过是在自己坚持不下去的时候，告诉自己，再挺一下，再挺一下下就可以。
首先问大家一个问题，不知道大家有没有这种情况的出现：“在实验室或者图书馆怎么想也想不出来某道题/某个 bug 的解法，但刚出实验室/图书馆，立马就想到了”。
在过去一年这种情形出现在我身上太多次了。。。。
话说阿秀自己经历了2021届的互联网秋招，在面试的过程中，被问过各种各样的问题，但是大部分都是基础性的题，所以基本功很重要，也很关键。
在我以前通过校招上岸字节跳动后，将自己的秋招找工作笔记开源在github上了。
可以说我能够凭借双非的学历进入字节跳动全靠我自己总结的这份笔记，后来我将这份笔记制作成了PDF，并且同步到了自己的校招学习网站上，现在免费分享给学习学妹们！
自己以前的学习笔记包括操作系统、计算机网络、数据库（MySQL、Redis）、常见情景题、智力题以及计算机面试中需要注意的问题。
下面是我的校招学习笔记网站内容大纲
不少学弟学妹们在这个网站的帮助下，顺利进入BAT、TMD，甚至去了字节跟阿秀一起做同事，都跑来找我报喜！
这是我的学习笔记网站：
说回自己当初的学习，这种感觉，就很奇妙。
回到问题本身，就我自己而言，我想应该是在我绞尽脑汁克服一些困难的时候提升的，没有某一个瞬间、某一天、某一周或者某一个月忽然提升了自己的编程能力的说法。
比如：
B 站的教学类视频收藏多了、也看多了的时候；
周日别人跑出去玩，我却在实验室里看各种技术书的时候；
力扣上的刷题数量从 0 开始逐渐变为 400+，通过从 40% 逐渐提升到 70% 的时候；
《剑指offer》中的每道题过了一遍又一遍，以至于都可以出一个刷题笔记专栏的时候；
大冬天的早上别人还在被窝里睡大觉，我早早来到实验室复盘昨晚没做出来的算法题的时候；
导师有时候疯狂 push 项目、催进度，只管提需求不管如何实现，搞得我崩溃得受不了的时候；
纳闷钱包越来越薄、支付宝余额越变越少、实验室书桌上的技术书越来越多以至于放不下，一看当当网消费金额被吓一跳的时候；
在食堂吃饭排队打菜，忽然想起来刚才那道题/那个 bug 怎么解决，大叫一声“卧槽，我知道了”被女朋友嫌弃，被别人当作傻子的时候；
我就按照 2019.8 - 2020.8 这十二个月来分享一下自己的自学和找工作过程吧，想到什么就说什么，没有大纲，写到哪就算哪，不煽情也不贩卖焦虑，就写出自己的文字就好。
说来惭愧，在 8 月之前，我对 C++ 的影响还停留在 “Hello World” 上，本科时期老师教过的 C++ 基本全忘光了。
C++ 三大特性的“ 封装、继承、多态”我真的只记得一个多态，还是死记硬背的那种。
当时选择 C++ 而不是 Java作为自己的学习语言除了因为实验室项目的需要，还因为 C++ 比 Java 要难学一点。
是的，就是因为 C++ 比 Java 难学一点，大家都贪图入门快、简单、易上手，我偏不这么干，简单易上手也代表着跟你竞争的人更多。
思虑再三，我还是选择了 C++ 作为我的主攻语言， C/C++ 能让我见识到整个计算机体系结构是如何被搭建起来的、程序是如何跑起来的、程序是如何被编译链接在一起的、函数的底层构造是怎样的....
说干就干，我经过再三比对和考究，选择了某马的 C++ 入门教程，于 2019 年 8 月 17 日，我开始了 自己的 C++ 自学之路。
我是一个喜欢动手操作的人，一边看着授课老师在上面讲，一边在底下自己开始学，跟着视频敲代码，他怎么写，我就怎么写。
没吃过猪肉，还没见过猪跑吗？
我看的很快，我记的开的是 1.5 倍速看的，十天左右的时间我就看完啦，当时还去留了个言，现在想想也确实感谢那个时候的自己。
说到这里，也分享一下我自己以前准备校招过程中做的一些学习笔记，比如C++、计算机基础等的笔记分享给你，也正是因为这些笔记的存在才顺利拿到的字节跳动SP的offer！

还好当时正值暑假时候，老师的项目暂时停滞，也没什么事情需要我去做。所以自己也能够有一个多月的时间去入门和学习，这是一段很完整的学习时间了。
对于每一个 C++ 技术栈的同学来说，《C++ Primer》几乎可以说是一本圣经，我当时在看完上面的视频后就直接去看这本大黑书啦。
月末的时候，我去 LeetCode 写下了自己的第一道题，也就是“两数之和”的题解，从此自己就走上了一边看书 看视频，一边刷题复盘的不归路。
转眼就到了九月，这个时候也开学了，研究生老师也开始慢慢安排事情了。
由于白天需要帮老师做横向项目和看论文，所以我一般都在周一到周五的白天去干活写代码做项目，傍晚去跑步溜达溜达的，而在每天晚上八点之后看 C++ 书籍和刷力扣题，周六周日两天则是自己的全部学习和复盘时间。
在九月自己在看完《C++ Primer》的前八章后就开始疯狂得在力扣刷题了。因为刚上手的缘故，自己刷题速度也比较慢，对于一些不会的题往往需要两三个小时之久。
自己能顺利解出来还好，解不出来就跑去评论区看别人的解答。在刷题过程中真的是感觉到人和人之间是有差距的，实在不明白有些人的脑子在呢么那么好使。
我现在还记得力扣第一题的评论区有一句名言“有人相爱，有人夜里开车看海，有人 Leetcode 第一题都做不出来。”
有时候对象邀我一起回宿舍，我也会说你先回吧。就觉得这道题没做出来回去了也睡不着，一定要把它做出来为止，为此搞到半夜一两点也是常有的事。
整个九月我都沉浸在 C++ 的世界里，也没去学别的科目。
我前段时间整理了很多不错的书籍，包括数据结构、操作系统、数据库、C++、Python、Java还有关于简历修改、面经笔经、大厂高频考点等等，简单统计了一下，已经有超过1000本书和各种干货了~
这可能是整个GitHub上最全的计算机经典PDF仓库了。
地址1：https://github.com/forthespada/CS-Books（如果由于网络等等因素，如果不能访问可以尝试地址2）
地址2 ：https://gitee.com/ForthEspada/CS-Books
其中涉及C/C++、Java、Python、Go语言等各种编程语言，还有数据结构与算法、操作系统、后端架构、计算机系统知识、数据库、计算机网络、设计模式、前端、汇编以及校招社招各种面经等~
进入十月了，在七天假期里除了第一天跟对象出去吃了顿饭，剩下的时间都用来看书学习了。嗯，是的，七天假期我也没出去玩，也没打游戏，都用来看书学习啦。
在经过九月一整月的学习我对于 C++ 有大致的了解后，就没那么把心思和时间都花在 C++ 上了。
我开始着手学习操作系统和计算机网络了，比如哈工大的操作系统、清华大学的操作系统、南京大学袁春风老师的计算机基础课程都是在这期间刷完的。还有韩立刚老师的计算机网络视频，韩老师讲课确实有意思，整个课程欢声笑语不断。
除此之外我也看了一些比较经典的书籍，像《图解HTTP》、《图解TCP/IP》、《网络是怎样连接的》都是在这个月看完的。前期有了视频的铺垫，看起来很快的。
老师依旧还是那样，我们每周五还有组会要开，要汇报自己一周的进度，包括项目上的，学习上的。
说实话挺烦的，有时候自己一周明明啥也没干，也没啥进展还要在组会上吹牛逼，读研读了三年别的没咋学会，写 PPT 、美化包装自己工作的本事倒是精进不少....
时间在指缝中不断流逝，自从开始有计划地学习后，感觉时间过的更快了，有时候一周在不知不觉中就过完了。与之相对的就是视频越看越快、PDF 越滑越快、桌子上的书也越堆越多，吃饭速度也越来越快，每晚回宿舍的时间也基本都在十二点之后了。
那段时间，我是我们宿舍回去最晚的一个，还好自己的室友们都给我留着门哈哈。
走在回宿舍的路上，我都会想哪一个知识点还没搞懂，明天要再重点看一遍；还有视频中讲到的某一个题，为什么自己没有解题思路；还有哪些书自己还没有看到，规划一下自己的未来一段时间的进度.....
十一月的时候我慢慢的开始去看操作系统的书籍资料了，像《现代操作系统》、《深入理解计算机系统》都是这段时间看的。我本科时间干的为数不多的正确的事就是硬着头皮把 《深入理解计算机系统》啃完了，真的是为数不多的有价值的事了，二刷的时候就很舒服~
前段时间的某一天我忽然突发奇想，想看看知乎上计算机领域内评分最高的Top 20 经典书籍有哪些？
分别抓，哦不，手动收集了知乎计算机经典图书推荐问题下的高赞回答后得出的好书集锦，选择标准就是每本书都在推荐版上出现过 5 次及其以上！！
最终将抓到进行数据清洗和合并，得到一份计算机领域类的书籍榜单！
说实话让我觉得有些意外，因为Python类和机器学习类书籍确实不少，不过Top 3却是一等一的经典！
就是下面这三本，现在免费分享一下自己以前抓到的豆瓣上计算机领域内评分最高的Top 20 经典书籍
转眼就进入十二月了，《C++ Primer》也快啃完了。看书过程中，除了记录自己的所思所想，在看这本书的过程中有些课后题我也没放过，很多人说没必要做课后习题，对此我持否定意见，每章课后习题数量不等，前三道我基本都是必做的。
这样一本经典的书籍，它的课后题都是经过精挑细选的，你看完一章学没学会检验一下就知道了，不是你觉得你自己学会了你就学会了的。
到圣诞节前后，《现代操作系统》和《深入理解计算机系统》也看了一大半了。力扣刷题也一直没落下，在刷题过程中，自己也知道了 C++ 中还有 STL 这种神奇的东西，也知道了另外四本经典的 C++ 书籍《Effective C++》、《More Effective C++》、《STL源码剖析》、《深度探索 C++ 对象模型》。
我一口气全部买回来了，兴冲冲的直接去看源码剖析，差点把当场我劝退。。。。
我又去搜索大家在看这本书的时候是怎么看的，有没有什么值得借鉴的方法。由此知道了侯捷大师，也知道了侯捷老师的几门经典课程。
------更新一下---
很多同学说侯捷老师的视频以及下架了，不能看了，还好我以前有保存过侯捷老师的全部课程，给大家分享一下！
主要有：
-------------------
就跟我开始学习C++时会选择从黑马C++教学视频入手一样，在学习STL的时候，我也选择了从侯捷老师的 STL 讲解视频入手，依旧是 1.5 或者 2.0 倍速看的。
十二月的时候我除了看操作系统的书籍之外也另外看了“STL标准库”和“C++内管管理”这两个视频。
感觉时间真的不够用啊，想看的书和视频也越来越多，可是自己一天只有 24 个小时，还要帮老板做项目和看论文。
元旦那天，我和对象去吃了四川串串晚上去看了电影，然后继续看书、刷题。
在放寒假前我特意把两本 《Effective C++》 带回家了，现在想想还好自己带回去了，没白白浪费那个寒假。
因为疫情的存在，2020 年的寒假注定是不同寻常的一个寒假，很多学生跟我一样都到了四五月份才开学。
一月份回家的时候，把侯捷老师的 STL 源码剖析视频下载下来了，存在 Ipad 里，因为以前就看过一遍，在火车卧铺上迅速过了一遍，也没花多长花间。
回家的时候家里有人生病了，一直在医院接受治疗，外出打工的爹妈也还没回来我就去陪护了。就类似下图这种病房，但我们那是十八线小县城，没有这么干净整洁。
一个病房四个床位，每天来探病的人络绎不绝，在那种嘈杂的环境下不可能看得下去书，我又掏出自己的 Ipad 接着看视频，比如尚硅谷的 MySQL 视频、Linux视频都是那个时候看的。
一月下旬的时候，家里人出院了，我也能顺利回家不再继续陪护了。也终于能有一个相对安静一点的环境看书学习了，我捡起闲置了大半个月之久的 《Effective C++ 》和《More Effective C++》开始囫囵吞枣起来。
也许是《C++ Primer》 打的基础比较好，看着两本书的时候并没有花很多时间，很快就看完了。
在家的时候，每天早上八点起床，吃过早饭修整一下就开始看书了，一直到中午十一点左右，中间也没什么人来打扰我；下午吃过饭就午休一会，醒了就径直去医院拿中药回来，然后就开始下午的学习了，下午我一般不怎么喜欢看书，我比较喜欢写代码，我会选择做一些课后题或者复盘一下以前做错的力扣题。到了晚上则是看教学视频，十点多了就玩玩B站，看一些比较有意思的吃播，比如华农与竹鼠的爱恨情仇、硬核厨师阿远、还有大姨绵羊的视频。
睡前会跟自己的对象视频一会，然后就不知不觉的睡着了。。。
多说一句， B 站真的很多优秀视频，总是有人问我该看什么资料看什么视频，其实你自己去 B 站输入一些关键字，直接找播放量比较高的视频来看就可以的，播放量比较高的视频，质量一般都过得去。
话说阿秀自己经历了2021届的互联网秋招，在面试的过程中，被问过各种各样的问题，但是大部分都是基础性的题，所以基本功很重要，也很关键。
在我以前通过校招上岸字节跳动后，将自己的秋招找工作笔记开源在github上了。
可以说我能够凭借双非的学历进入字节跳动全靠我自己总结的这份笔记，后来我将这份笔记制作成了PDF，并且同步到了自己的校招学习网站上，现在免费分享给学习学妹们！
自己以前的学习笔记包括操作系统、计算机网络、数据库（MySQL、Redis）、常见情景题、智力题以及计算机面试中需要注意的问题。
下面是我的校招学习笔记网站内容大纲
不少学弟学妹们在这个网站的帮助下，顺利进入BAT、TMD，甚至去了字节跟阿秀一起做同事，都跑来找我报喜！
这是我的校招学习笔记网站：
后来到了二月，这时候国内疫情已经进入了比较严重的时期了。武汉全城封锁也已经好多天了，每天起来第一件事就是看看疫情发展情况。
在学习的时候不断的有新名词冒出来，就好像在学习 C++ 的过程中，网络编程这个词也慢慢出现，我也是知道了 C++ 后台开发跟网络编程有关。
第一反应就是直接去知乎看有没有推荐的资料，在看过差不多二十多个高亮回答后，我发现有三本书出现频率最高：《TCP/IP 网络编程》、《Linux 高性能服务端编程》、《Linux 多线程服务端编程：使用 muduo C++ 网络库》。
我最先看的是游双老师的那本《Linux 高性能服务端编程》。讲真，确实有点云里雾里的，因为以前也没怎么接触过这个。后来转头去看了《TCP/IP 网络编程》，你别说，真的越看越有意思，就有时候可能不是自己脑子有问题，是因为没在恰当的时候看合适的书。
在看这本书的过程中，我知道了一个简易版的 Web 服务器是由服务器和客户端两方组成的，也知道了回声服务器是什么意思。
这本书上例子很多，我很快就看完了，然后就开始看《Linux 高性能服务端编程》和《Linux 多线程服务端编程：使用 muduo C++ 网络库》了。前者我好好看完了，收获很多，但后者我没怎么看完，随便翻了翻就没看了，我也不是很推荐这本书。
后来疫情逐渐严重起来，接到学校通知说要延迟开学，我有点不爽，可也有点高兴。不爽是因为在家呆久了，老妈整天唠叨我，干啥都有错，高兴是因为自己有更多的时间来学习看书了，一回学校就要开始做老师的项目课题了，就没有这么多空闲的时间了。
进入三月后，因为一直没能回学校也复习不了C++，我的笔记都在书上，看不了就很难受，只好转头去看操作系统和计算机网络的知识。同时力扣上的题也开始二刷了，当时我重点刷HOT 100 的那 100 道题，来来回回的刷，一道题最多的时候来回刷了七八遍。我并不是什么算法大佬，自己脑子也很榆，一遍记不住我就刷两遍，两遍做不出来我就去做三遍，总有能做出来的一天。
老是有人说什么算法太难，你先看看自己下够功夫了没？对于每道题，你是真的会做了没？是不是你自己做出来的？对于你不会做的题目，你有没有及时复盘和总结？
如果你的回答全部都是 Yes，那你不可能做不好算法题；如果有 No，你可以看看自己缺的是哪一步。
最多在刷题的过程中你可以选择性的看一些别人总结好的资料，比如这种前人准备好的一些刷题笔记之类的，支持三种语言就很不错，如果算法题有障碍可以多看看。
在复习完操作系统和计算机网络后，我除了开始继续刷力扣HOT 100，也在慢慢刷《剑指offer》，这本书上的题目都比较经典，经常出现在一些笔试面试中，可谓是经久不衰。
再者，虽然我已经有一个实验室的项目可以写在简历上，但一个项目还是不太够看，思考再三，我决定走前人走过的路，我也选择做一个 WebServer 服务器。
emm，真香！
我是根据 TinyHTTP 和 游双老师的《Linux 高性能服务端编程》的课后大作业为基础，这两者结合后做的自己的 HTTP 服务器，后来我把它作为我简历上的第二个项目了。简历上的第一个项目是实验室的项目，跟了快两年了，终于能发挥点用处了。
可项目还没做完，学校已经给消息了让尽快回去，本来想在家把这个项目做完的，没办法匆匆买票，赶紧滚回去了。
可能谁也想不到，一个寒假居然能放 150+ 天的。回去学校第二天，我就立马把《C++ Primer》捡起来看，因为第一遍看的时候比较用心看，所以第二遍过的时候即非常轻松加愉悦了，很快就看完了。
然后又把以前的《STL 源码剖析》这本书捡起来看，因为寒假时候已经看过了相应的视频，看的很快，不到十天就看完了。随后又看了《深入探索 C++ 对象模型》，重点看了一下第三章，至此 C++方面的几本经典书籍都看完了，这几本书对于校招足够了，基本不会考察这几本书之外的知识点。
在此期间也是把自己的服务器项目完成并且开源到 Github 上了。
因为我是在一个普通二本学校读的研，历届的师兄师姐没有去大厂的先例，师兄师姐们貌似对于秋招找工作也不上心。
按理来说金九银十，他们一般在九月份就应该开始找工作的，但以前的师兄师姐都是在十一月份才开始写简历找工作，去的也都是一些愿意来我们学校进行校园招聘的企业，所以找到的工作质量可想而知。
我也私底下问过他们，得到的解释和答案就是学校比较差，然后 balabalabala 之类的。
emm，我信了，因为师兄师姐比我多上一年学，见识也多一些，但还是想努力一把，想着万一能有一点机会呢。
万幸，自己努力了一把。还好，自己坚持了一下。
在六月份校招提前批的时候，我就兴冲冲的投了简历，结果全部石沉大海，后来才知道提前批是选拔优秀人才的，提前批能上岸的也都是一些好学校的学生，比如各种本硕985、211本985硕的。
投完简历没有后文，我也在找自己的原因，除了学校不行是一个因素之外，在思考有没有其他可以改进的地方。后来看了一些比较优秀人才的简历，我觉得问题有可能出在自己的简历上，因为自己的第一版简历写的着实垃圾。
所以后面又迭代完善了自己的简历，足足写了 26 个版本的简历，也正是自己精心打磨的简历使得自己在接下来的秋招正式批中能够收获到不少胜利果实。光是修改这 26 个版本的简历，就足足花了我十来天的时间。
说到这里，分享一下我自己以前准备校招过程中做的一些学习笔记，比如C++、计算机基础等的笔记分享给你，也正是因为这些笔记的存在才顺利拿到的字节跳动SP的offer！
去年的秋招正式批是在 7 .15 号开始的，在经过提前批投递简历的全盘皆输后，我开始有些畏手畏脚不敢投递简历，因为每个校招学生可以投递一个公司的机会是有限的，比如京东，每个学生都只有一次投递的机会，每次可以投递两个岗位。所以投递简历的机会，不能随便浪费。
在别的小伙伴开始大势投递简历的时候，我总觉得自己还没复习好，一直在不断复盘以前学过的知识点。我自己的经历告诉我，永远不可能有复习完的那一天的。
因为你每次面试都有可能遇到你不会的题目，所以最好的方法就是在实战中成长，多去投递简历。当然投递顺利是有技巧的，前期去投递一些小公司，积攒积攒经验，后期再投递一些互联网大厂！
所以小伙伴们不要抱着把全部的知识点复习完事后，再去开始投递简历，等你复习完了，黄花菜凉完了，校招早就结束了。
整个七月我都是在复盘知识点 + 刷题中度过的，7.15 号正式批一开始我就立马开始投递简历了。
如果是往届的师兄师姐们，他们投递第一份简历很可能要到十月份去了。
还好自己没听他们的话....
不知道你们是否体验过笔试全部会做的感觉？就是我所投递的互联网公司发来的笔试，我居然都会做...这不是装逼或者凡尔赛，就是我当时的真实情况，来一道过一道，来两道过一双。
在牛客网看到他们发帖讨论今天 XX 的笔试题好难，求交流求解答之类的时候，我下意识地以为他们是不是在夸大难度，因为我觉得貌似没他们说的那么难；
傍晚在操场跑步，听到旁边的人在讨论今天的 XX 公司的笔试题怎么这么难，我停下来随口说道：今天这笔试第一题是力扣No.200，岛屿数量那题，很经典的;第二题是回文子串，在力扣上也有，你们也可以去查查，具体题号我记不清了，都是原题的。
然后我就在他们惊愕的眼神中扬长而去，接着跑我的步去了。。。。
在我过五关斩六将一般通过一场场笔试后，随之而来的就是一场场面试邀约，为了避免漏掉笔试或者面试，还专门用备忘录记录了一下。
最多的时候一天我面过五场面试，上午两场，下午两场，晚上一场。那天面试完后，感觉身体好像瞬间被抽空一般。
然后就是笔试、面试、复盘的交替进行、循环往复。那是真难熬啊，也真难受啊，在面试过程中遇到很多自己不怎么会的知识点，有时候也会被问到崩溃或者被面试 PUA ，可来不及伤心和怀疑自己，因为可能一会就要进行下一场面试了。
心态真的会崩，当我心态崩了的时候，我一般都是去操场上跑两圈，然后回宿舍洗个澡，再来到实验室看个电影或者看看吃播，然后第二天接着干！
还好，最后终于有所收获。
如果你能看到这里，确实很了不起。我罗里吧嗦说了一大堆，每个人的成功都是不可复制的，我也不敢说自己的经历或者学习过程一定就是正确的，但我确实是这样走过来的。
我写下这篇回答的时候是2021年的五一期间了，距离那段时光已经快过去一年了，确实挺快的，还有一个多月自己就要毕业了，时间真的很快。
有时候我就在想，“玩也一天，学也一天，为什么不试着学一下呢？万一你就成功了呢”
我是小镇做题家长大的，我记的上大学第一天代班问我们有什么才艺。
我惊奇的发现，我好像没什么才艺。但我想，我的孩子不会再像我这样了，我保证。
希望我的下一代除了会做题，儿子会跆拳道、轮滑、散打，女儿会弹古筝、弹钢琴、吹葫芦丝、唱歌、跳舞等。
文中涉及到的资料如下：

讲真的，我也不知道有多少小时。在校的时候，周一到周五白天都要忙老师的事情，基本没时间自学，都是晚上八点之后学的。周六周日两天好好利用，各种节假日好好利用。
可能是习惯了吧。以前跟师兄坐同桌的时候（他现在在华师大读博，今年该博二了），师兄很用功，每天早上八点十分就来了，每晚十二点多才走，每周工作七天，很少见他休息。我真的很佩服他，所以我慢慢也养成了这种习惯。
读研三年，差不多在校期间都是 8:30-23:30 的作息，每周 6.5 吧。这是什么概念我也不知道，只是华为二面面试官听到我在校期间的作息后，露出了欣慰的笑容。。。。
说学习累的，体验过夏天拔花生拔到腿抽筋，后背被晒得红通通的就不会觉得累了；
体验过春天弯腰插秧，秋天弯腰割稻子到晚上直不起腰来就不会觉得累了；
体验过抗 120 斤重的电缆上 20 楼就不会觉得学习累了；
体验过装灯管一天都得抬着头，到了晚上睡觉都不能躺着睡，也不会觉得累了；
体验过因为电线走线走错了，需要砸墙重来，抡大锤轮一天到晚上吃饭的时候筷子都拿不起来的时候，可能也不会觉得累了；
太多了，真的太多了，所以我觉得学习不累。
真的，学习真的已经很轻松了。
码字不易，觉得这篇回答有帮助的话，不要只收藏不点赞呀！
耽误这位准大厂人0.1s的时间，希望认真看完的你可以点个赞再走。
我是@阿秀，编程程序员话题下获20W点赞+收藏+喜欢，分享计算机学习、编程知识~
1、相遇即是有缘，我最近发现github上有几本不错的算法刷题资料，支持Java、C++、Go三种语言，其中对于面试中考察较多的链表、树、动态规划、数组等知识点讲解的都很全！
如果你算法能力比较弱，比如互联网大厂面试中手撕算法比较差的话，那要好好看看了。
Github高星！支持Java、C++、Go三种语言版本的Leetcode刷题笔记~
2、对于一些想要转行或者读研的朋友，下面两个回答肯定能帮到你！
3、建议多看经典书，而不是什么《21天学会XXX》系列，完全是浪费时间！
4、Linux C/C++ 方向自学的完整路线，很多人不知道学习完 C++ Primer 能做什么项目练手，这个回答不可错过！
5、如果你准备时间不多，就抓住重点，在最短的时间内搞定必要的数据结构和算法而去面试
6、我自己在学习计算机过程中看过的优质网课，你的基本大学四年绝对够用了。
7、如果你决定不了到底学习C++还是Java，不妨来看看这个回答！
8、我在自己八九年的计算机学习生涯中收藏了不少数据，前段时间整理一下居然有1000多本了！！！！后来就干脆把它分享出来造福每一位学习计算机的小伙伴，包括下面推荐的书籍全部都包含在内了！
5、分享一下自己在字节跳动工作的感受

不定时更新自己的社畜日常，记录一下自己在字节工作和一线漂泊的真实经历
最后如果同学们觉得有帮助的话，不要白嫖阿秀学长的回答啊！！！
双击屏幕就是最大的支持啦！一个赞就足以！这样也可以让跟多的同学看到了。
如果同学们如果还有什么问题，比如计算机考研复试、相关互联网大厂求职、技术方向等等问题，可以在下方评论区给阿秀学长留言，或者点击下方个人主页关注阿秀学长即可，不打算在知乎向同学们开通付费咨询！

","在我的码农生涯中，一共有2个节点，感到自己有一种技术上「突飞猛进」的感觉。
那时候刚刚转行一年，熟悉了同事，大致理解了公司产品的技术栈，知道整个流程是什么样的。按我现在的角度来看，当年的水平也就是个过得去的实习生（然而当时已经全职了……）。
我全心全意地想提高技术水平，然而总不得要领，也反思为什么自己对于技术的理解深度和同事们有那么大的差距。在熟悉了Python语法后，我所会的其实仅仅是将自然语言和逻辑翻译成代码，然而并不能从计算机的角度去理解代码执行的原理，当然更无从理解性能优化之类更深奥的事情。
那时候带我的数据工程师，手边经常放着一本《编写高质量代码:改善Python程序的91个建议》，我就有样学样买了一本，并且老老实实用上班的空隙时间+下班的休息时间，缓慢地啃完了整本书。再后来，觉得意犹未尽，又买了同系列的《Effective Python：编写高质量python代码的59个有效方法》，用同样的方法缓慢而持续的啃完。
这两本书讲了很多巧妙的方法，让我搞懂了同事代码中很多写法的具体原因和目的，同时自己的代码也在加持下变得更加简洁和规范起来。从这时开始，我才开始学习代码之下潜藏的更多计算机原理，逐渐能够从计算机而非人类的角度去理解代码。
打个比方。算法、数据结构这些硬功夫像《九阴真经》，学会以后妙处无穷，耗时很长。上面这两本书比较像《九阴白骨爪》，可以速成，憾之深度有限。但对于刚刚接触软件工程不久的人来说，通读这两本书，确实可以有功力大增的感觉。所以我强烈推荐，无论新老工程师，都要读一读这两本，起码要做一个 Pythonic 的程序员。
有一天CTO突然把我和另一位前端负责人叫到一起开了个3人小会，讲了一下要写一个新的后端数据读写服务。这个服务非常核心，对性能和健壮性都有很高要求。
当时会议的情况我记忆至今：CTO和前端负责人你一言我一语地说着架构，我在旁边听天书，都是没见过的词。聊到最后，CTO问我一句，「你能听懂么？」
我像美剧《硅谷》里面的Dinesh一样……
不过赶鸭子上架，用了大半年的时间写完并打磨这个组件，最后好歹完成了一个靠谱的东西（在早期还有另一个大牛同事帮我搭了脚手架，非常感激）。这也是我码农生涯中完成的最重要的东西。开发这个组件遇到无数知识盲点、踩了无数坑，数据库、运维监控、通讯协议、性能调优、单元测试……这些全折腾了一遍，感觉像读了个加速版CS本科。
做完这个项目，我的编程水平终于从一个实习生无限逼近于工业级了。回头看看，像做梦一样，居然这么熬着熬着就成为同事口中的「谷老师」了。有些事情，还真的要靠时间来打磨。
在毕业多年后开始学习写代码，让我理解了很多事情，不仅仅是计算机，也包括了「如何把事情做好」的方法。
「突飞猛进」往往是自然发生的。你在某个夜晚苦熬一个知识点时，不会觉得自己「突飞猛进」；只有在多年后某日熟练的给别人讲解这个知识点后，内心才会小小的波动一下，猛然忆起当年深夜中的青灯一盏。
总结一下：用力地啃好书。专心地做好项目。剩下的，时间会帮你搞定。
","先说结论：
1、一定要接触最好的编程体系，好的体系可以达到事半功倍的效果，否则即便智商再高，也有可能要走很长的弯路；
2、切勿有畏难心理，在学习的过程中会遇到数次平台期，期间有可能会怀疑人生，需要熬过去；
3、编程水平的提升需要经过大量的练习，不存在不劳而获；
4、要和优秀的人一起学，遇到不会的问题，要放下面子，敢于提问；
5、遇到不会的知识点，需要硬啃，今天不解决的问题，明天不会自己解决；
6、数学对于编程非常重要，请学好数学；
7、教别人会让你自己水平变高；
我是从初一开始学编程的，一开始学编程只是为了多玩会游戏。2010年在三线城市的普通初中，编程这个事情压根就没有普及，我也不知道学这个东西有什么用，那时就是学着玩呗。因为也没有人教，我就买了一本清华大学出版社出的Pascal的教材在那边瞎折腾。那时候网上也没什么资料，所以我学了三年啥也没整明白，像搜索、最短路这些算法我连名字都没听过，更不用说会写了。
进入了绍兴一中，我突然发现，原来编程不是我以前认为的那样子的，是另一个样子的。因为周围有一些很牛逼的人，就是那些能拿国内甚至国际奥赛金牌的人，我才意识到差距不是一般的大，他们五分钟十分钟能解决的问题，我自己搞了两三天都不知道在干什么，就只能拼命地学，每天压力也很大，因为周围的人都比我水平高，他们都是从好的初中过来的而我的初中水平差，我每天就担心自己会不会垫底，所以心态很不好，人就很焦虑。
我那时从初三暑假开始在绍兴一中学，一个暑假就学会了很多东西，因为有学长带着，就把动态规划、图论基本上都学会了。后来想一想好像我也愿意走这条算法竞赛的路，就继续学了。
我人生有三次编程水平大飞跃的时期，我的高中时期是第一次。但这次背负了太大的压力，因为世界第一次向我敞开了大门，我之前根本就不敢去想清华北大之类的学校，因为我的人生目标一直都只是考上一个一本学校，然后回老家做一个公务员。突然间，看到了不一样的希望，因为太想要，所以最后也得不到。每天就是失眠，两三点要嗑安眠药才能睡着。大冬天下着雪，我穿一件衬衫也会流汗，但我就在那边拼命地学，因为我相信努力还是能出成绩的。那时候确实也学到了很多东西，每天早上七点就到机房，晚上怎么也得到十点十一点睡觉，有比赛的话就要到凌晨两三点，第二天又是七点去机房，每天重复这样的生活，大概过了一年多的时间。最后高中我水平也比较高，小比赛都很牛逼，但由于心态的原因，一到大比赛就会全线崩盘，差点就没大学上了，也受到了很多的质疑，质疑我平时在作弊，因为我平时的水平和比赛的水平差距实在太大了。我受了很大的委屈，我从小就很看不起作弊这件事情。
最后我运气比较好，进了上海交大，进交大的时候，我心里其实是有一股气的。我觉得我要证明我自己，因为高中相对来说还是有点失败的。那我得告诉以前那些小瞧我的人，他们是错的。
很庆幸我进了上海交通大学，无论是从能力上还是思想上都极大地改变了我的一生。
大学的时候，比赛是三个人一队，有两个队友，每天都在一起学习一起训练，这样的道路就不会觉得太孤单，以前一个人的时候会害怕，总会患得患失，现在队友就是坚强的后盾，你就不会再恐惧，因为你们三个人是一个整体。
那时候我也学了很多的数学，因为高中的学习其实很多是建立在猜上的，很多都是靠直觉，直觉就是依靠多次训练之后锻炼出来的，你觉得它是对的，它也确实是对的，但就是不知道为什么。大学学了线性代数、数分等等之后，第一次知道这些为什么是对的，而不是仅仅只会用它们。这件事情让我养成了一个很好的习惯，就是写代码之前要从数学上证明自己的想法，这会让你在写代码、打比赛的时候犯更少的错误。于是我实现了第二次飞跃。
那时候，我和队友们经常一起睡机房，也经常半夜到处翻墙，因为管机房的大爷要赶我们，我们每天要和他打游击。但那时候的生活是快乐的，为什么呢？因为我心中有一个目标，我就是要去战胜世界上最强大的对手，去追求那种一览众山小的感觉，所以你不会觉得那是一种苦，相反你会觉得非常有乐趣。最后的结果说好也不好，因为各种各样的原因，最后到一半我自己就把这个事情停掉了，就去做科研了。
在这个过程中，我花了五年的时间，也慢慢地自己治好了自己内心的不安和焦虑，重新获得了小时候那种平静。最后，我也发现，我压根就不需要向世界证明什么，压根就不需要去打败任何人，我唯一想做的就是，去探索更多的东西，去探索自己的极限到底在哪里，我的人生没有那么多的观众，做好我自己就行了。
又过了几年，当我开始教别人写程序的时候，我的编程水平又实现了一次飞跃。在这个过程当中，我神奇地发现，我对一些基础的理解其实并没有那么深刻，所以就经常讲了一半会讲不出个所以然来，于是就迫使我重新回去思考，突然就发现，自己又能做一些以前做不到的事情，又学会了一些以前好几年都学不会的算法。那就是说，我以前学不会是因为自己对一些事情的基础理解是错误的。所以大家在学习的时候，也要把自己的想法和理解告诉别人，这对你来说也是一个检验和提升的机会。
还有，在学习编程的过程中，我自己遇到了非常非常多的瓶颈期，就是那种半年一年啥都没提高的状态，每天练练练就是过不了那道坎。最后其实发现，其实熬熬就过去了，编程水平的提升好像就是这样的状态，你缓很久，然后突然上一个台阶，然后又缓很久，再提升，如此循环。所以现在大家学不会也不要着急，再熬一熬，也许过一段时间就上去了。
回首往事的时候我觉得自己是幸运的，为什么呢？
第一，我确实遇到了一批世界上最好的人，无论是高中还是大学，大家因为共同的爱好聚在一起，每天不分日夜地去努力，在这个过程中互帮互助；
第二，我接触到了很好的编程体系，因为无论是高中还是大学，都拥有全世界最好的编程训练体系。我为什么对这个事情有很深刻的理解呢，因为我初中三年真的什么都没学会，初中三年做的事，高中一个礼拜就全都能做到了，如果我不进绍兴一中或上海交通大学，我可能一辈子都不会知道编程到底是什么、算法到底是什么；
第三，也是感谢命运给了我那么多的失败，让我非常早地就理解了，成功不是我追求的东西，我追求的是变成一个更好的自己；
第四，在过程中我也抵挡住了很多的诱惑，因为我的初中老师和我讲，我的天赋是低于平均水平的，但就是熬熬熬，好像把比我聪明的人都熬走了，因为他们都去做别的事情了，就我继续在干这个，好像熬一熬我也熬成了这个圈子里水平不那么差的人。所以我相信，很多事情是因为坚持，你才能够与众不同。天赋只能帮助你一时，但只有热爱和坚持才能帮助你一世；
第五，那时候我经常会死磕，经常下一个狠心，我不吃饭不睡觉一定要做完一个事情。如果没有这一次次的死磕，我想我也不会是今天这样。
后来，无论是科研也好工作也罢，我真的看到了很多很多东西，每天都抱着一种好奇心，想要对世界多了解一点，但如果不是因为遇到了编程，遇到了这么多非常优秀的人，遇到了这么多优秀的老师，我这样天赋的人是压根不可能走到今天的。所以，现在我们想把我们的好东西分享给更多的人，我们真的想要把自己了解到的东西开放出来让大家少走一些弯路。因为我们知道走弯路是什么样的感觉，我们知道那种苦涩。那么既然我们有能力，我们就应该帮助更多的人。我们后面做的很多事情都是基于这个逻辑。
","18年开始编程，从一个连for循环都写不利索的跨专业小白，到后来21年秋招能拿到不错的offer。在这两年多的时间里，从0到1，我感觉自己水平突飞猛进的节点主要有三个：
第一个时间节点是能够合理地使用搜索引擎，特指Google。
其实能够从巨量的互联网信息中搜索出想要的信息并不是一件很容易的工作，哪怕是有了百度和Google。当出现bug的时候，总是会有一堆的报错信息，而搜索引擎的信息检索是有字数限制的。如何选择关键的字眼放到搜索框中搜索以及如何从已经排序过的网页信息中找到想要的内容，这两个问题其实并不简单。
对于第一个问题而言，其实首先需要将报错信息好好看一遍，大概地明白可能是哪个地方出了问题，再把最重要的关键字挑出来进行检索。关于检索的关键字，最重要的是信息量尽可能地大，有位答主说得很好，相关链接在这：
对于第二个问题而言，其实核心在于按照自己的经验如何在大脑中对网页结果进行一次再排序。一般而言，网页边上有广告两个字的就不用看了。在debug的时候，最重要的网站莫过于, github, 相关开源软件或者商业公司的官网，但这些都要求使用者具有一定的英语水平，所以大家尽可能地提升自己的英语水平，尤其是阅读能力吧，可以有效地提高自己debug的能力。
第二个时间节点是将一个大型项目编译通过。
说到这个，一下子又回忆起被环境配置等各种问题支配的恐惧。当初读研究生遇到的第一个任务就是将一个大型跑起来。而当时的我刚跨专业考进来，代码量大概是一千行不到这个量级。连命令行是什么东西还不太清楚，只明白一些基础的概念，刷过几十道leetcode。我对编程的接触只局限于写一个函数，也就是在大括号填点东西。如何将几十万行的代码组织起来，变成一个完整的可执行文件，并把这个可执行文件运行在机器上，这些东西，我一无所知。那个时候有点像刚学会在地上爬就得去参加马拉松一样。但没有任何办法，只能硬着头皮去搞。
现在想来，最核心的问题在于看懂Makefile。其实正常的软件编译，出了问题Google一下总是会有一堆的教程。但我要编译的软件是一个存在了几十年的用Fortran写的工业软件，在网上什么信息都没有。只能硬生生地去啃Makefile，从最外层目录开始看，一层又一层地链接，一共有几十个Makefile文件，都只能一行一行地看。不断地make，不断地报错，不断地解决问题。各种软件依赖问题，各种链接问题。真的是令人痛苦不堪。
这是我从事计算机行业遇到的最大的问题，每天一睁眼就是想着如何解决bug，有的时候一个礼拜都解决不了一个bug。对于自信心打击巨大，常常失眠。不过硬啃了将近一个半月的时间，终于把软件跑通。也是从那以后，我开始有了强大的自信，相信自己能够解决任何bug，对于一个程序员而言，这一点真的是特别重要。
通过这么一个事情，我感觉自己的技术水平有了突飞猛进的进步。也开始把课本上的那些知识点一步步地串联起来，我熟练了Linux的各种命令，明白了如何用将几十万行甚至更多的代码组织在一起，知道了各种静态链接、、编译参数的作用，搞清了一堆的字符串文本如何被转化为一个巨大的二进制文件，然后如何从磁盘中将这些二进制文件加载到内存中，最后控制器将这些二进制文件按照格式一条一条地从指令cache中取出，加载到CPU的ALU中，搭配着寄存器进行计算。所有的代码都被翻译成指令集中几十条乃至于两百行的指令。
那个时候感觉计算机的知识就像一条汹涌奔腾的洪流，无比壮阔，涌进我的脑海中。从那以后，即使面对着大型程序中的数百万行代码也不再有恐惧感。我终于树立起信念，相信自己能够解决一切问题。
第三个时间节点是使用acwing系统性地学了算法。
这个部分在我其他的回答中详细地聊了一下。
我在这里再简单地说一下，为什么我们学算法觉得难，刷leetcode觉得难。主要是因为两点：一是没有系统性地学习知识点。计算机不像数学或者物理，有着大量的初高中老师，有着详尽又充实的教辅材料。带着大家学完知识点a，而后学知识点b，难度层层递进，科学又合理。而我们刷题的时候，刷了一道题，有一个知识点a，瞅一瞅。又刷了一道题，有一个知识点g，再理解理解。这个学习的过程是散乱的，而是并不是线性的，有的很简单，有的特别难。这种学习曲线简直就是噩梦。第二点就是没有特意去训练自己的肌肉记忆。正常学数学，高中数学，都是一个知识点，无数的题目，五花八门，不断变化，就是那个知识点，做了一遍又一遍。大家不用动脑子就知道。比如立体几何，第一步建直角坐标系，第二步，转化为坐标系的一些运算，然后blabla套公式直接算。而刷算法的时候，每一个题都像是一个新的内容，得去记，去背。但题是背不完的呀！真正的方法应该是总结出一套模板，把各个题映射到不同的知识点，再用对应知识点的模板，改一改，调一调，拿去用。不断地重复这个过程就是形成刷题的肌肉惯性。
总之，通过Acwing，针对这两点问题，开始系统性地进行学习，然后养成刷题的肌肉惯性。当然，也通过刷题积累了大量的编程经验，可以较快地解决一些常见的bug。当我学完相关的基础内容和部分提高内容，又在leetcode和acwing上刷了几百道算法题，写代码的感觉不再生疏，越来越得心应手，这也为我后面找工作提供了巨大的助力。
码字不易，觉得对您有帮助的话，恬不知耻地想要个赞哈。
","经常学习到凌晨后，看完一本本大黑书，做完一个又一个的lab，整个大学不敢谈恋爱，不敢有其他爱好，全力投入到学习编程中！
垃圾本科，非985/211学历！
就只靠自己一个人的努力，本科毕业前实习过多个大厂，拿到字节跳动，腾讯等多个大厂offer。
我知道我其实算不上计算机系最厉害，最努力的同学。
现在回想到当年努力的自己，顿时一种热情油然而生。
出身农村没有富裕的家境，不能报高档的培训班，没有过人的天赋，高考成绩也不好，比不过985/211的同学。
要么自己拼命努力毕业近大厂，要么躺平毕业去干销售，最后没有选择只能背水一战。
大学计算机系的同学努力一些的，要么专注于比赛论文成绩绩点，保研出国，要么只专注于计算
机技术毕业拿到大厂offer到手软。
一路走来，我也踩过不少坑，走过不少弯路。学长作为一个过来人，给计算机专业学弟学妹们分享计算机专业学习的一些经验。我会从校内学习，再到校招各个技术岗位的求职学习，再到求职找工作一一分享。无论你现在是大一研一还是大四研三，真心希望下面的内容都能帮助到你们。
大部分的专业，大学里主要的优秀就是学好专业的课程，取得一个优异的成绩，考试排名班级考前，然后再参加一些专业相关的项目比赛拿到奖项，就足够代表这你在学校内很优秀了，毕业找工作求职也够了。你的待遇也完全和你学历成正比。
但是计算机专业属于强技术类的，就和普通专业很不一样。
计算机专业技术岗位的求职几乎跟校内的成绩没有什么很大的关系，甚至可以说校内的学习成绩对于找工作来说几乎真的没什么用，每次排名垫底，毕业照样拿大厂offer。
产生上述现象的原因：
就是国内的计算机专业课堂上所传授知识，跟企业里的面试官要求的标准相差太多了，
大学里面学的比价杂，需要自己专门深入学习一门技术才行。

每年计算机专业都会出现很多奇葩的现象，就是成绩比较不错的同学反而求职并不成功。
天天只顾读死书，没有搞清学习和面试的区别，也没有取了解的一些校招和面试的情况。
我有见过一个985大学，计算机科班，成绩排名全班第一，面试连一个最基础的冒泡排序
都写不出来，具体一些技术内容也是模棱两可。
但另一方面，我还见过有的同学，大学天天逃课，成绩排名办理倒数，学校里所有的活动都不参与，只专心低头学技术。最后毕业的时候成功拿了很多大厂offer。
有很多双非本科的学校，ACM校队实力超群，每年都会有很多能力超强的选手在ACM编程比赛上摘金夺银。
但是尽管他们并没有非常牛的学历，甚至有些选手校内成绩也一塌糊涂，但是并不影响他们毕业找工作时疯狂收割offer，甚至本科就可以进入谷歌微软等知名外企。
也正恰恰因为如此，计算机专业也是不限出身，不看成绩，最可以通过努力就可以逆袭的专业。
我在大一的时候，也跟所有普通的新生一样，面对崭新的大学生活，各种社团，学生会，活动及其丰富，当时也很迷茫，不知道以后道路如何。
大学刚开始在C语言课程，遇到有些不懂的，我就去找学长请教。通过一两个月的时间，我就发现真正厉害的学长学姐们都特别的忙碌且低调，他们一般并不在各个社团里抛头露面，也不谈情说爱。而是一有空就去泡图书馆，我每次去图书馆都能看到学长的身影，学长的书桌上堆着很多计算机书籍。
每次向学长请教，学长也会很耐心的回答，并指导你如何学习计算机，以及一些学习路线。
自己也去了加一下编程学习网站，加学习交流群。偶尔在一次CSDN上评论某个腾讯工程师的博客，竟然得到了回复。以后经常关注他的博客，跟着前辈一起学习技术。
我大一上学期学了C语言，python，计算机科学导论，第一本学习C语言的教材是谭浩强老师的C语言程序设计。
这本书可以算是C语言入门的初级书籍了，经典的入门级程序hello world!程序就是从这里开始的，哈哈。虽然这本书比较基础，但对于刚接触编程的我，一开始没看太明白。上课根据老师讲的，自己敲代码运行程序，课后也会花时间自己琢磨一些。待整本书学习之后，又重新看了一遍，才大致看明白一些。
这本主要讲解一些C语言变量，函数，循环，数组，指针一类的基础知识。刚开始学指针的时候也比较疑惑，不知道为啥要使用指针这东西。对指针的用法也不甚了解，自己甚至写过返回局部变量指针的这种低级问题。
在学完谭浩强老师老师的书籍后，自己也在学长的建议下买了一本C Primer Plus，当时坚持把这本书结结实实地精读了一遍，而且几乎练习题都做了，算是比较好的开端。自己也会用C语言编写一些计算器，万年历等一些小程序！
看了C Primer Plus之后，个人觉得C Primer Plus更适合入门学懂C语言，书中有穿插一点C语言的历史故事和应用背景，更贴近实际。书的语言更像一位老师循循善诱你一步步理解C语言，一开始给出代码例子，可以让你上机体会，然后一步步逐渐深入讲解这段代码各语句各函数的作用。这样学起来个人觉得更能吸引学生学习兴趣。
大一下学期就开始学习数据结构和算法，C++。对于计算机在校的学生来说，首先最关键的就应打下坚实的编程功底，提前尽早扎实的掌握算法与数据结构基础。
学业方面：如果你大学里想要超过很多同龄人，在成绩比赛等加分方面超过别人，大学计算机专业里有非常多程序设计类比赛都是非常有含金量的。蓝桥杯，天梯赛，PAT，ACM都是着重对算法的考察。学好算法，并在这些比赛中摘金夺银对你以后考研，找工作都是不少的加分。
考研方面：如果你有意向大学毕业进入高等学府继续深造，那么无论你是保研还是考研。现在国内著名的计算机高等院校复试均有上机在线编程考试。无论你大学里成绩多优异，无论你考研初试多高，研究生复试机考永远是你不可避免的一关。大学里热爱算法，热爱编程很多的同学们，往往都会在机考中取得优异的成绩，甚至可以弥补你初试分数低的不足。
找工作方面：随着国内互联网行业的发展，对编程人员求职者编程能力的考察越来越重视。如果你以后希望去国内互联网大厂工作，你会发现大厂非常注重对求职者算法与数据结构基础的考察。算法属于基础，算法题过不了，其他一切面谈，就是这种模式。很多面试题背很多，很多开发框架了解多少，面试造的火箭对你以后做的工作。
大一下学期就比较忙了，课程逐渐增多，要学的东西也变的很重要了，难度也加大了。这个大一下学期就没怎么休息过，上课，做实验，下课去图书馆。图书馆闭馆后，晚上回寝室继续学习直到转钟，有时候也不能学习的太晚，会打扰到室友休息。
我是一个非常喜欢早睡早起的人，我的本科室友们都是会玩游戏到很晚，早晨起得也晚。我为了不
打扰他们，同时又不让自己懒床，我天早晨都定两个闹钟。
一个是金属闹钟放到床下桌子上：
闹钟设置成06:00, 手机振动设置成05:50。
这样每天就能05:50被手机振动叫醒，同时因为10分钟之后，床下闹钟就要响了，自己还不能贪
睡。这样就能做到，既让自己早起，同时又不打扰到室友。
同时起床之后洗漱完毕，我也会静悄悄的收拾好书包，然后迎着6点的清晨第一个冲到自习室。几乎
无数个日子每天都是在这样的晨曦中开始。
我学习学习算法的第一本书记是《算法（第四版）》
这本也是比较今典算法方面的书籍,读完的感觉真是感觉爱不释手。总体难度难度相对较低，当然这是后面感受到的，刚开始学的时候不这么认为。有些知识越学到后面就会发现哪些简单，哪些困难。这本书需要通读，里面知识比较全面，各种数据结构都有涉及到，里面全是Java实现，自己需要用C代码重新实现一遍，方便自己理解。
还有我看的难度较大的算法大黑书，就是《算法导论》
这本书我并没有全部看完。这本书里面有很多算法复杂度分析，会让人觉得读起来很困难。算法导论看完前面17章即可（到贪心那章），算法复杂度分析的部分可以尝试去看看，如果实在讨厌公式推导也可以跳过，但是要能够掌握推导一些常见算法的复杂度。
为了应付公司面试时的算法题，同时也是为了积累自己的代码量，我就开始去力扣刷题了，这个刷题一直持续到我找到工作。当时我按照题目的tag来刷，这样更容易增强自己的解题能力。
大学期间，我就已经在力扣上刷了300道题目了。




学习C++语言，我用的《C++ Primer》，感觉这一本书就已经很全了，里面各种C++的知识都有。由于这本书比较厚，当时学习也花了挺多时间。上面每个程序都自己实际运行一遍，学完一遍又头头开始看了一遍。总体感觉学这本书不能求快，一个一个章节的搞懂才能继续往后面看。 这本书值得收藏，堪称C++学习字典。
大二上学期主要学一些编程基础，拓宽学习视野，算是平稳度过。
大一学完C/C++，算法之后。大二上学期学校又开设Java课程。

Java在当时看来是一门非常牛逼的语言，初学习Java后，发现Java里面又大量的类库，开发起来及其方便，而且快捷很多。Java里面没有指针这种难搞的东西，用引用代替。当时学习Java看的 《java语言程序设计》，后面没准备往Java方向发展，Java的学习也就到此为止。
那个时候Python也开始火起来了，我也开始学了下Python。自己买了本《Python基础教程》，学习了下基本语法。
然后就开始尝试使用Python爬取百度热搜，当当网和豆瓣的一些数据，感觉还挺有意思，在学习的过程中，也可以对html、http协议等有一些了解。
当时运行的一些调试程序 ，哈哈！
在学习和了解学习多种语言，自己也会去尝试做一些项目提高自己的编程兴趣。
自己大学和工作后看的书籍和一些面试资料学习经验都在这里了，可供下载：




我做的项目:
在学习C++的时候，自己尝试使用QT写了一个3000多行的带图形界面的桌PC端软件，把这个当成实验项目交给老师，老师直接就给了我90分的成绩让我学习兴趣倍增。
自己在学习C++网络编程的时候，用C++实现过一个简单的IM单聊，群聊群聊，消息推送，消息同步功能。
麻雀虽小，五脏俱全。把这个网络编程与协议的知识统统用上了，加深了对其理解。
然后同时用java写过web，搭过电商网站......
回忆起来最开心的事情，是我曾经还花了一个通宵的时间帮别人搭建了一个网站，大学第一次通过技术赚取了300元。
当时一晚上赚了300元了，我还请室友一起吃饭了！
时间来到大二下，这个我选择linux C++方向发展。这个学期是打下计算机知识基础的关键时期，看了很多书，这里由于书籍太多就不一一列举了。一下课就直接奔去图书管，图书馆有我一直占的座位。图书管关门后，就去寝室学习到凌晨2点。
这是宿舍夜战，当时拍的照片。
图书管长期占的作座位
晚餐饿了就去附近食堂吃个简单的饭，然后继续看书学习。
大二下学期看完了CSAPP、effective C++、计算机网络系统方法（前三章）、计算机网络：自顶向下、部分TCP/IP详解，做了一些项目，比如正则引擎，尝试写JSON库（未遂）。
APUE、部分UNP、深度探索C++对象模型、STL源码剖析、操作系统概念、操作系统真象还原、Linux多线程服务端编程、Linux内核设计与实现、计算机网络：自顶向下、部分C++ template、等书籍。同时也做了一些项目，跟着操作系统真象还原写的操作系统、简单的协程库，阅读了一些优秀的开源项目，SGI STL、muduo、redis、libevent等。
CSAPP 《深入理解计算机系统》，这本书涵盖了从一个bit到一个网络应用的系统知识，初学者会有很多概念都难以理解，建议是尝试检索相关内容去理解，实在学不会就先跳过，继续后面的内容。读书过程中，也不需要一定按照其安排的章节顺序，可以先挑自己喜欢的读，例如为了理解计算机中的cache，就去读第六章。这本书是CMU CS15213 课程（Introduction to Computer Systems）的配套书籍，该课程相关的资源也可以用来辅助学习，另外，最精髓的就在于配套的Lab了，难度不低，这个一定要做，如果做的很困难，也要坚持去做，完成后会发现自己的能力有很大的提升。这本书也不用一口气读完，有些章节不太感兴趣，或者读不下去的话，可以留着，等后面知识更加丰富了再回头来看（例如网络那章，我看的是很难理解一些概念，后来学习了计算机网络和网络编程后，就发现读起来比较简单了）。
《Linux内核设计与实现》，当然这种书不必通读，挑自己感兴趣的章节看就好了
对于计算机网络的学习计算机网络的学习，理论先看《计算机网络：自顶向下》，可以只看前面三章，即应用层和传输层，做下每章后面的lab。再就是对TCP/IP协议的学习，推荐《TCP/IP详解：卷1》，也是为了节省时间，可以只看TCP相关的章节。这本书英文版是第一版，中文版是第二版，个人是先看的英文第一版，然后再看第二版，挑了新加入的内容看。学习的时候，建议用wireshark来抓包，感受一下这些协议是怎么工作在这互联世界的网络中的，会很有趣的。
当我踏入大三年级的时候，我的成绩已经在专业排名里比较靠前，综合素质排名全系第一。
因为自己真的大一大二太辛苦了，自己原计划在大三可以休息一下。
但是学长得知的一个消息，彻底改变了我的整个大学轨迹。
因为我本科的学校是一个垃圾本科，没有很多985名校那些学生自带光环的学历。
之前一直觉得这样的学校是不可能有机会进入阿里腾讯这样的大厂的。
但是自己大三的某一天突然得知，自己上一届有一个一直非常低调的学长毕业拿到了阿里巴巴的offer。
自己永远记得当时自己那个惊讶的程度，在那时的我眼中，垃圾本科学校跟阿里腾讯这样名企是根本毫无关联的事情。
然后我就详细跟这个学长请教了好久好久，那时候我才刚刚知道什么是互联网校园招聘，什么是大厂求职面试，什么是秋招春招。
同时学长也告诉我，去大厂实习非常的重要，不仅可以学到学校里学不到的企业里真正的研发技
术，同时还可以作为简历上很大的加分项。
我在大三上学期花了三个月的时间，每天早睡早起，除了上课以外，放弃所有的课余休息时间，复习准备冲刺。
看了无数本重要的技术书籍，学习并跟着做了好几个比较优质的项目，在csdn上写了400多篇读书笔记，现在总共已经写了超过1000篇了。
然后开始准备在网上投递简历，寻找实习。
原本以为普通垃圾本科的我不可能又大厂会看上我的简历，真的没想到在投递后，竟然有很多公司
的hr电话联系了我，其中还有很多大厂。
原以为自己能找到一个实习就很错了，但是真的没想到最后经过了非常多公司的忐忑的面试后，自己竟然几乎全部通过了，其中还拿到了多个大厂的offer！！！
下面分享下我整个大学看过的书：
我这里整理学习近百本计算机经典书籍，包括各种编程语言，算法，网络编程，数据库，分布式等等各种技术。对于学习计算机的同学帮助非常大，且十分系统！面试找工作的资料汇总都打包放在这了，这套资源可不是一般那种网上找的资源，非常宝贵，不要错过！
书单：
别人的人生我不了解，至少我看到的世界里，我周围所有的同学，同事，小伙伴们都是: 越优秀的人越懂得努力，越极度的自律。经常学习到凌晨一两点，基本没啥其他课外活动，专注学习。
同样越早的掌握信息，越早的找到努力的方向和学习路线，也是很重要的事。
作为计科学生，大学期间一定多看书，老外的大黑书很全面，有的不要全部看，但事至少要知道一些。

大家买书一定不要吝啬，这是回报率极高的投资，对于一些喜欢的书，买下来！推荐给大家一个很好的购书渠道，就是关注京东图书的活动，经常会有400减300、300减200的活动，十分划算。大概统计了一下，大学期间我花了五千多块钱去买书，这算是我花的最值的一笔钱。
计算机专业真的是一个不看出身，甚至连专业都不看的行业。你只需平时多努力学习并早早的关注求职，校招，面经等。早早的出去实习，学校里的很多无意义的事情，甚至成绩你都可以不用关心！毕业的时候拿到bat大厂offer不一定是遥不可及的事情。
无论你现在处在任何阶段，请卸载手中的王者荣耀，关掉电脑中开着的游戏，好好对未来规划一下，我觉得一切都还来得及。
写到这里.....感觉手好酸.....
看到结尾的同学，如果觉得有收获，不要只偷偷收藏白嫖盼学长， 给盼学长留一下一个赞呀，这样也可以让更多的小伙伴看到呀！
推荐阅读

c++硬核学习路线和学习资料
记得帮我 @盼盼编程 点个赞哟~
","每次信息流刷到这个问题，都会拨动我记忆的缓存，让我想起那段大起大落的时光。
自从写完那个项目后，我没再怕过任何代码。
19年夏的某一天，在各大公司陆续推出自己预训练的BERT，并开始用它们做离线任务时，lead把我叫进会议室，说老大想上线BERT，需要尽快写一个C++版本的BERT服务。
不是那种用tfserving或者libtorch哦，是直接用C++写。
我面无波动地答应了下来，实则内心已经裂开了。
自己不是CS科班出身，压根没写过完整的C++项目，虽然有些Java基础，但到底几斤几两我还是蛮清楚的。
打比方的话，就是让第一次玩塞尔达、刚开完四个神庙、出了新手村的我直接去打盖农，悲壮之感难以言表。
P.S. 小伙伴们要的Cuda编程入门资料放在文末啦～
但我作为新时代的自强女性，还是开启了冲向海拉尔中心的旅程。
第一步，就是搜集可以参考的开源项目。
Fortunately，我找到了知乎开源的cuBERT项目，作者写得特别清楚，并且同时提供了GPU和CPU版本，但老板看了速度之后仍不太满意，最终我靠着极强的搜索技术又找到了英伟达刚开源的fastertransformer，用Cuda C++直接实现了transformer底层运算，速度秒杀其他方案。
在经历了各种make、install的折磨之后，我终于摸清了如何在服务器配置相关lib并运行c++代码，也顺利跑通了官方demo，性能完全符合预期。但不能高兴得太早，因为这个库只有transformer层的实现，前面的tokenization、embedding、pooling都没有写。。所以，这意味着我要读懂源码，然后自己把剩下的补全。
第二步，我开始读源码改项目。
这里有碰到了第一个难点，就是跑官方给的模型没问题，但运行我们自己的模型后就出现了 nan 这个恐怖的结果。于是我开始使用 print 大法，但惊讶地发现 cuda 底层全是并行的，一打日志都是乱的。。。于是我学会了 synchronize，在每个 operation 之后同步再打印结果，最终花了两天时间定位了问题：原来是Softmax没加溢出保护。立刻给作者提issue，不过在等待作者回复的过程中我居然自己给改好了，还默默学会了 Parallel Reduction 算法。
期间我还会卡在各种各样的事情上，经常会卡上一两天，陷入自我放弃的漩涡。
最终还是搞懂了源码，搞懂了cuda运算，并加上输入输出层搞出了完整的C++ BERT。
但仅仅有个程序还是不够，服务接口在哪里呢？
第三步，整一个服务。
于是我又搜啊搜，找到了一个宝藏：TensorRT Inference Server。当时的版本提供以下超赞的功能：
所以又花了几天把C++ BERT适配TensorRT框架，成功变成了服务。
变成服务之后又有问题，就是每次换机器都要重新配置环境并部署，于是我又学会了docker，减轻运维负担。
整个改造差不多耗时小两个月，也是我工作至今记忆最深的一段时刻。
我永远忘不了，那种看着看着代码就想站起来掀桌子的感觉。可以一起体会下：
当然也忘不了身边同事牺牲自己时间给我的帮助，还有lead和我一起翻了半天C++ Primer 才解决问题的欣喜。
故事的后来很圆满，压测效果满意，成功服务了团队的BERT上线。包括后来我在20年初和其他两个大厂团队的人交流，都没有听到过更快的速度，甚至有同学直接质疑了我，因为他们的延时是我们的两倍。。。
现在回想起来，这段经历真的太宝贵了。虽然不想再经历一次，但自那以后我再也没怕过任何代码。
做算法也有了底气，我可是搞过CUDA C++的女人，别叫我调包侠。
如果想快速提升，那就去挑战一座山吧，找一个高质量的项目，读懂并进行修改，在一次次自我放弃中成长。
就像走过高考、走过考研、走过校招那样，过去那道坎就没什么了。
另外，为了push大家学习，奉上我总结的cuda编程入门资料：
一些参考：

","很多次。
大二时和同学吵架，气得看了一遍菜鸟教程。
学会了前端三剑客，学会了php，学会了自己建站。
然后就开始接各种项目玩，有小程序，有物业管理系统，甚至还有澳门皇家赌场(做完了怕被抓没交付)。
第二次是进鹅厂，负责重构我们所有jq系统的前端项目。
花一个月写各种方案被老板叼得破防大哭。
上手踩了不少坑，吃了无数bug，挨了无数骂，背了无数锅。
天天喊辞职，不过终于搞出来了，收获颇丰。
觉得还能再加油加油。
第三次是成为负责人开始带队。
对整个软件工程有了更多的理解。
开始站在更高的视野看各种事情，以前不理解的也开始理解了。
做事慢慢也形成了各种方法论。
开始重新review之前的代码，从架构层次开始局部重构。
开始系统的完善工程化，系统的优化性能和用户体验。
第四次是遇到各种奇葩问题。
于是开始看各种框架源码，开始看chrome源码，开始看各种牛批的库。
学到了很多技巧和想法，并且应用到了工作中。
发现之前觉得无从下手优化的东西现在就是一坨shi。
又开始做各种优化。
第五次是开始准备搞自己的独立游戏。
我脑海中有了一个有趣的世界，我想实现它。
自学了unity，学习了gpu和shader，学习了各种姿势。
同时也理解了绘画，音乐，写故事等辅助技能。
不得不说，很多时候跨界的知识也会带来很多有趣的思考。
第六次还未来，不过我还活着，还在努力。
等发现了再分享分享。
不难总结，所有的经历都有一个共同点。
那就是离开舒适区，向外探索。
哪怕很难，哪怕很苦逼。
只要有正确的大方向，只要不死，就努力找方法去解决，去踩坑，哪怕走点歪路，吃点亏。
所以我虽然在鹅厂混得还可以，也似乎有点机会往上更进一步。
我渐渐意识到，打工是有天花板的。无论是职业上的还是身体上的。
我也渐渐意识到，打工只是在某个经济系统中扮演其中一个角色。
我更想跳出看看要怎么才能创造出属于自己的经济系统，从生产到销售到售后。
我更需要有自己的产品，虽说这条路也很难。
但我想试试。
4月初更新，感觉终于算是跑通了独立开发这条路，虽然没啥钱，但是很快乐。

俺发布了一个Vscode插件——XMouse
〔拖拽导入代码片段、项目文件、npm包〕

简单推广了下，用了几天，虽说用处没有那么大，但还是有点快乐的，欢迎一起来体验。
(づ ●─● )づ 大致如下图，直接商店里搜索安装就行。

咳咳，言归正传。
一开始其实很多想法。
等等等等，很多很多想法，其中很大一部分也花了不少时间(比如摸鱼插件和写书)
但是想了想，最终还是做了减法——想法越多，进度越慢，先上线再说。
然后我就减出了XMouse，第一个版本很简单，只有代码片段的crud与拖拽。
自己用了下还挺好玩，分享给了朋友们反馈也还行(也可能是照顾我面子)，然后也写了篇文章推广，没想到真吸引了一些用户，还有朋友希望共建。
不得不说，把我当时高兴坏了。
虽然没啥钱，但确实比发工资爽。
当然也欢迎朋友们打赏投喂加鸡腿。

ps：项目开源，请放心食用。
今天先说到这，后面再更新。
都看到这儿了，点个赞和关注吧。
有兴趣也欢迎来找我聊天，联系方式如下 ( 'ω' )
免费多个朋友不是坏事，反正一键能拉黑。

","
啃完一本本书, 做完一个个lab
没有突飞猛进, 一切都是量变最终累积成质变!
但是会有那样一些时间节点,你会明显感觉到自己的编程能力确实有提高不少,能够实现更多的想法.
不过老实说，就编程能力上确实没有“突飞猛进”的感觉，都是逐渐的进步，量变引起质变嘛。
我们都是普通人，不可能像张无忌一样因跌落悬崖，意外获得《九阳神功》，从此开挂，走上巅峰。
只有靠不断的看书、coding、学习优秀开源项目，构建自己的计算机知识体系，并且在特定的领域不断专研，这样才能成为一个优秀的工程师。
滴水穿石非一日之功，学习计算机还是需要沉下心来好好啃书、看源码、写“轮子”，逐渐构建起属于自己的计算机知识体系，学习一定要系统，这里推荐一个计算机系统学习网站，有Java、C++、Python、操作系统、网络等学习路线，计算机必读书籍PDF、C++、Java、计算机基础面试题等：
我在大学之前完全没有编程经验，高考后，填的专业前几个也是清一色的传统工科，被软件工程录取纯碎是意外。
当时甚至很担心完全没有编程基础的我，上大学会不会跟不上。
后来大一，第一门编程语言就是学的C语言，怎么说呢，老师讲的，书上写的我都能看懂，但是一让我写一个大的程序，我就摸不到头脑，不知从何下手，学了半学期，也只能写写课后习题，算算水仙花数什么的。
而且当时对计算机缺乏系统认识，即便我知道指针就是变量地址，也很难理解它到底有啥用。甚至分不太清数组和指针的区别，以至于会出现对函数局部变量取地址返回这样现在看来很低级的错误。
大一上考完C语言后，我便在心里默默念想，这辈子再也不写C了，只是没想到的是，后来这成了我最爱的一门语言。
大一下开始学习数据结构与算法、数字逻辑这些计算机核心课了，此外，还学了一门当时我看来非常牛逼的语言—Java。
为啥说我当时觉得它牛逼呢？因为刚经历过C语言的摧残，发现Java丰富的类库，各种方便的工具类。再也没有指针了，变成了对象引用。
Java我学得很认真，当时还看过马士兵的Java Se教程。
自己也用Java写了不少好玩的东西，比如联机五子棋、HTTP服务器等等。这让我第一次感受到编程这么有趣，俗话说兴趣是最好的老师。
在学java的时候喜欢在网上搜资料，但总觉得各种博客上的知识过于零散，为了学好Java，我在知乎搜索各种书单，先后看了《Java编程思想》《Java核心技术卷》《Java并发编程》好几本书(不是全看哈，大部分主干章节
大一暑假在家自学了安卓，并写了几个app玩，但发现自己不太喜欢客户端，于是大二开学就开始学 Java 后台开发，从 Servlet 到 SSH SpringBoot，基本上都过了一遍，后来越来越觉得这条路就是在学各种框架，总觉得不太对劲。
在这里也分享一本帮助我拿到BAT 等一线大厂 offer 的算法笔记，是一位阿里大神写的，对于算法薄弱或者需要提高的同学都十分受用，算法一定是计算机学习的重中之重：
编程指北：Github 疯传！史上最强！BAT 大佬「LeetCode刷题手册」电子书开放下载了！
同时，大一暑假有大四学长学姐在学校广场摆摊卖书，我也买了些，其中有一本就是被称为计算机神书的CSAPP。
大二在上一些无聊的课时，我总把这本书带着，每节课可能会翻个几页，那时候看到汇编、内存管理、存储器层次我是真的云里雾里，因为还没学操作系统，C语言也学得很差。所以断断续续的看了几章，说不上学到了什么，但让我对这种枯燥的基础知识第一次产生了兴趣，有一种想彻底搞懂它们的想法。
为了看懂这本书，又去看了王爽那本《汇编语言》，重学了C语言，由于已经学了汇编，指针对我再也不是问题了，同时看完了《c和指针》、《C专家编程》、《C陷阱与缺陷》，C语言使用得也愈加的熟练。
大二上那段时间，学院里突然刮起全员学机器学习的风气，虽然不至于全部，但是真的是很多人都在学，于是我也不例外的加入了，先后看了点吴恩达的视频和西瓜书。跟着写了手写数字识别这种入门必做的项目，但是后来总觉得对机器学习、深度学习提不起兴趣，原因之一就是我觉得无法完全掌握每一步，了解每一步背后的原理。这让我学得不安心。于是ML的学习之路也止于大二。
大二是学习内容最丰富的时间，当时室友用 Python 写了抢课脚本，感觉很好玩。然后又跑去学Python，学爬虫。写了一堆爬虫，什么爬豆瓣电影、抢课脚本，玩了一段时间也没太大兴趣了。
时间来到了大二下，按照课程安排，开始上操作系统了。于是我又在知乎搜索“操作系统怎么学”，顺着一堆回答，我发现原来还能跟着别人写一个 mini OS，这对我吸引力太大了。于是我买了一本《操作系统真象还原》，这本书真的非常仔细，把写 OS 需要用到的前置理论知识、汇编、内联汇编全都给你讲清了。我一路跟着书写，写到了汇编开机打印出我的名字，再到后来进入C语言写内核各个模块，写到内存管理我就中断了，没有继续写下去，这也算个遗憾吧。
当时真的对这个入迷了，为了写Min os我还去看了Linux0.11的部分代码。把我的QQ签名改成了 jmp 0x7c00
(这句汇编就是将跳转到0x7c00这里，BIOS开始引导操作系统。
于是就这样，我越来越喜欢偏底层一点的东西，所以决定走 Linux C/C++ 路线，然而现在看来确实太年轻了，Linux C/C++ 在鹅厂好多也是用来写业务滴。。。
大二下在知乎、牛客网搜索学习路线，我大概清楚了需要看些什么书。于是开始了非常标准的 Linux C/C++学习之路。
也非常推荐大家尽早去刷一下牛客网，上面很多大三、研二的正在找工作的学长学姐们分享的帖子，早点接触这种就业的氛围，自己也会更加有动力去学习，也知道学习的方向，另外上面可以针对校招刷算法题、刷SQL等等，还挺方便的，现在很庆幸自己在大二的时候就在刷这个网站：
前前后后看了《C++ Primer》、《APUE》、《UNP》、《深度探索C++对象模型》、《STL源码剖析》、《C++设计与演化》、《Linux内核设计与实现》、《Linux内核完全注释》、《effecitve C++》 、《effective modern C++》、《程序员自我修养》、《Linux高性能服务端编程》、《Linux多线程服务端编程》(知乎陈硕大佬写的)......，顺便还看了点muduo源码，自己模仿着基于epoll写一个reactor模型的web服务器，跟着知乎Milo大佬写Json库，总之，这段时期是写了一些小”轮子“的。
学习计算机一定不要想着速成，要下苦功夫，去啃那些经典书和源码，然后自己动手写，我大学整理了一套计算机必读的经典书籍，对于CS学习的同学帮助非常大，且十分系统，这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。

我整理的这些书大家可以在这里获取，对于学习计算机的同学帮助非常大，且十分系统：
编程指北：计算机必读的书单（含下载方式）
看的书越多，其实你越能找到自己的方向，大三上我就给自己学习定位：
深入C++语言（多线程）+ 存储（学习redis、leveldb）+ 网络编程（学习muduo，各种网络编程模型）+ 学习分布式（mit 6.824、ddia、google三大论文等）
基本上是沿着上面几个方向去展开学习的，有的看书，有的论文，也有的看博客看源码。总之，知识面在大三不断扩充，自己开始关注C10K、C100K这样的后台服务器开发高性能、高并发的解决方法。
值得一提的是，大三上我们学院有门System Programing的课，教材就是使用的CSAPP，因此我之前大二草草看完的书，得以再次翻开，这一次我把附带的是个实验也挨着挨着做了，收获良多，有位运算各种奇技淫巧，有Bomb lab刺激的打怪通关、也知道了buffer overflow attack.... 还有实现基本的内存管理等等。
印象最深的便是做bomb lab，一个个 phase 的通过真的很让人兴奋，我几乎是连着把这几个phase过掉的，当然头发也没少掉。
当时还写了个记录：
再到后来，我拿到了微信实习offer，然后顺利转正。
在我大三下拿到实习offer后，我开始做一些国外计算机课程lab，一方面有钱拿，而且还不低，靠这个我在大三下就实现了经济独立，另一方面这些lab很有意思，对提高基础和编程能力很有帮助。
现在我开了一个公众号「编程指北」分享编程学习方法、技术相关的一些东西，感兴趣的同学可以去关注下～
在这里列举一些我做过的觉得有意思的lab：
第一个是文件系统
这个玩意挺有意思的，就是要让你自己去设计一个文件系统，比如文件、数据块、目录等等，而且你要提供创建、读写、删除、随机读、随机写等等接口，然后通过 Linux 的 VFS（虚拟文件系统） 机制挂载到 Linux 内核中，然后就可以用系统调用 open、read、write 这些来在你的文件系统上进行读写。VFS 是Linux一个机制，它规定了 IO 接口，然后你去实现这些接口，你就可以挂载在上面。通过这个东西我深入的学习和了解了文件系统，报酬也是非常值的。



第二个是SVC
就是版本管理系统，类似 SVN 和 GIT的，但是相对 GIT 做了很多简化，核心的就是创建分支、分支合并、回滚、commit 这些，通过这个我又去详细了解了 GIT 的实现原理，并且自己写了一个简单版本的 GIT，受益匪浅，也赚到了几千大洋。


第三个是操作系统的锁实现
这个就是让你基于硬件的原子指令 xchg、cmpxchg 这些实现一个锁，这个需要内联汇编、汇编等知识，简直是硬核！！！做完这个也解开了我对锁实现的一些疑惑。


还有个是 Web Proxy
这个就更有意思了，要求用 C++ 写一个代理服务器，类似 Nginx 的代理功能，当然，相比 Nginx 弱鸡很多，
但是麻雀虽小，五张俱全，而且老外最有意思的是要求代理服务器对一些图片和 HTML 恶作剧，就是代理服务器随机的在原始服务器，返回的响应里 插入一些图片和文字，因为那天是愚人节。。。 不得不说老外还是很有趣的。


还有模拟实现 TCP 可靠传输的
这个就更硬核了，人家老外老师就是给力，直接做了一个网站，这个网站你可以通过 TCP 连接上去，然后你需要运行几个节点，互相发消息，他们之间的消息都会经过老师的网站，所以通过网站上是可以控制丢包率的，也能控制节点的拓扑结构，要求就是让你基于这种不可靠的信道，做出可靠数据传输！这简直就是翻版 TCP 嘛，超时重传、ACK、滑动窗口啥的都给我上！就是像下面图中一样，圆圈就表示你可达的范围，不同节点形成各种网络拓扑，可以调节网络 丢包率 Loss chance。
当然也有很多写算法的，数据结构实现的，图搜索的，也有做机器学习、深度学习的，反正各个方向都有。对这些Lab感兴趣的可以去我公重号「编程指北」后台回「lab」，我会不断更新汇总做过的一些lab和课程网站链接。
如果对这些lab感兴趣的，自己也想做的话，可以看看我的这篇文章
大学靠技术经济独立的方法，全部分享给你
做这些 lab 真的实实在在的提高了我的编程实践能力，也算是检验了前期看那么多书还是有效果滴。(顺便还让我大学期间就月入上万。。。
所以写了这么多，再点次题吧，我认为自己编程能力突飞猛进就是在看完一本本大黑书、做完一个个lab、写下一行行代码之后。
附上大学期间买的一些书，毕业的时候大部分都卖了，因为实在不便携带：
这是带去图书馆自习室的书（常占位置）
这是毕业整理的书：

买这些书花了我不少钱，大家都知道计算机这些书一本就是五六十、七八十起步。大学四年光买书就花了几千块。不过我一直认为这也是我花的最值的一笔投资。
下面就是我自己整理的电子书，绝不是在网上那种打包下载的，而是自己需要学到某个方向的时候去网上挨个找的，最后汇总而成。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精
我把大学时候这些电子书库、简历模板、博客汇总、谷歌大佬的刷题笔记都打包放在这了，点击下方可以直达。
书单推荐，少即是多（含下载方式）
当然了，多刷题也可以提高编程能力，所以在这里也推荐一份我看过的谷歌大佬开源的刷题笔记：

最后给大家分享一下计算机系统学习网站，学习路线大全，包含各个方向的学习路线和资源推荐，以及学习方法，强烈推荐收藏：
如何自学篇
大家觉得有帮助的话，也可以帮我点个赞，笔芯~ 记得关注我哟 @编程指北

————分割线——
很多小伙伴在评论区问学习路线, 我找来了Linux C++ 后台开发方向的,强烈建议看看这个回答,一定对你有帮助!
评论区还有小伙伴想要我的书单，这里也给出我以前写过的一篇文章，大家感兴趣可以去收藏下：
另外，推荐一篇我写的关于指针的文章，绝对深入浅出~
在这顺便推荐一个 Github 开源仓库，基本包含了常见的 CS 编程学习书籍，可以 star 一下，需要的时候直接去上面找书：
觉得有帮助的话，帮我 @编程指北 点个赞哟~
","垃圾本科，非清北复交985牛逼学历，
智商平平，非ACM拿牌sci论文天才光环选手。
编程从来没有什么突飞猛进，都是在
一道又一道的算法题，
一场又一场的算法比赛，
一本又一本的技术书籍，
一篇又一篇的技术博客，
一个又一个的项目Demo中.... 逐步成长起来的。
作为一个出身非常一般的计算机本科同学，就只靠自己一个人的努力，本科毕业前实习过多个大厂，拿到字节跳动，网易等多个大厂offer。
我知道我其实算不上计算机系最厉害，最努力的同学，
但是当我毕业后看到这个知乎上的这个问题，
脑海中回想到当年那么努力的自己，心里是真的如翻江倒海，五味杂陈。
一个从十线小城市出来，
没有优渥的家境，没有过人的天赋，没有从小就受到精心的培养，良好的教育的普通人，
要么拼命努力，要么自暴自弃，好像就没有其他选项？
大学计算机系的同学努力一些的，要么只专注于比赛论文成绩绩点，保研出国，要么只专注于计算机技术毕业拿到大厂offer。像老学长这样两方面都有一些经历的，应该是比较少的人。
同时一路走来，我也踩过不少坑，走过不少弯路。既然问题是如何学习的，那么我也作为一个过来人，给计算机专业学弟学妹们写一写计算机专业学习的一些经验。我会从校内学习，尤其到校招各个技术岗位的求职学习都抽空写一写，无论你现在是大一研一还是大四研三，真心希望下面的内容都能帮助到你们。
首先相比于其他大部分专业，我真的觉得计算机计算机是真的可以通过努力改变命运的专业。
其他大部分的专业，大学里主要的优秀就是学好专业的课程，取得一个优异的成绩，然后再参加一些专业相关的项目比赛，或者本科能有一些科研论文，就足够代表这你在学校内很优秀了，毕业无论找工作求职还是继续升学深造都足够了。
但是计算机专业真的特别不一样。
计算机专业技术岗位的求职几乎跟校内的成绩没有什么太大的关系，
甚至可以说校内的学习成绩对于找工作来说几乎真的没什么用。
产生上述现象的原因，
就是国内的计算机专业课堂上所传授知识，跟企业里的面试官要求的标准相差太多了。
甚至计算机专业还会出现很多奇葩的现象，就是成绩比较不错的同学反而求职并不成功。
我甚至见过一个985大学，计算机科班，专业里排名前几名的女生，面试连一个最基础的二分查找都写不出来。成绩单上门门课程都写着90+，但是具体一些技术内容完全都回答不上来。
但另一方面，我还见过有的同学，大学几乎不上课，挂科无数，学校里所有的活动都不参与，只专心低头学技术。最后毕业的时候成功拿了很多大厂offer。
于此同时浙江省有很多双非本科的学校，ACM校队实力超群，每年都会有很多能力超强的选手在ACM编程比赛上摘金夺银。但是尽管他们并没有非常牛的学历，甚至有些选手校内成绩也一塌糊涂，但是并不影响他们大学里提前早早的苦学技术，看面经，毕业找工作时疯狂收割offer，甚至本科就可以进入谷歌微软等知名外企。
这里额外提一下，原来有太多的计算机专业的同学不知道什么是互联网校园招聘，更不知道面经是什么东西。
面经是指很多其他同学在互联网校园招聘中面试各个互联网大厂的面试经验，面试真题总结。
面经对同学们来说简直太太太重要了！！！
是同学们复习准备互联网校园招聘面试的关键法宝。
你首先要知道互联网校园招聘面试重点问了什么？你才能有针对性的准备吧！！！
有无数同学都来问猪学长：不知道互联网校园招聘技术岗位面试都问什么，面对计算机厚厚的书籍不知道如何阅读，侧重点在哪里？
这些问题都能在面经中找到答案，里直接分享给同学们：
同时猪学长还要额外说一下，推荐大家去多看面经，并不是让大家只看面经，死记硬背面经，投机取巧。这种只简单被面经的同学面试也是无法通过的。面经只是大家学习的一个参考。还是要踏踏实实的去多认真学习技术，多看优质的官方技术文档、书籍、博客。
也正恰恰因为如此，计算机专业也是不限出身，不看成绩，最可以通过努力改变命运的专业。
金融行业一直流传着一句非常有名的话:
如果你是金融专业，普通本科的同学，
那么毕业很难进入头部金融名企去工作，而只能是去卖保险推理财。
但是计算机专业这些年来双非本科进大厂的故事每年都在上演，只要你肯努力，一定会得到回报。
我的大一在其他同学还在游戏中疯狂战斗的时候，我做了两件让我整个大学受益4年的事情。
1、结识了很多优秀的学长学姐
到了大学的时候几乎每个人都会迷茫，我也是一样的。但是迷茫的本质是你没掌握到足够的信息。
我的开头有写到我在大学里非常非常的努力，做了很多很多的事情。
但是这些的前提是你首先要知道要了解这些事情。
我在大一的时候，也跟所有普通的新生一样，
面对崭新的大学生活，各种各样眼花缭乱的社团，并不知道在大学里该做什么。
这时候我选择走出寝室，去多结识学院里很多优秀的学长学姐们。通过一两个月的时间，我就发现真正厉害的学长学姐们都特别的忙碌且低调，他们一般并不在各个社团里抛头露面，当什么部长团长，而是都把时间投入到非常重要的事情上。但是，当你真的找到他们向他们请教问题的时候，他们都非常的友好热情而且热心，告诉你很多大学里关键的事情。
我在大一上学期的时候就认识了我们学院当时大三拿到国家奖学金的优秀学长，并向他请教很多经验。很早就知道了国家奖学金的评比条件，准则要求，大学里有哪些比赛含金量非常高需要参加。同时我在大一的时候也认识了保研名校的优秀学长，早早的在其他同学还不知道保研是什么意思的时候，学长就给我分享了当年他们那届的保研文件，对里面的要求细节了如指掌。
也正是因为我在大一就知道了很多信息，所以我才能早早的准备，因为知道自己不是天才，就只能比别人更早的行动！
掌握信息很重要。

2、大一就开始早早刷题，打下了扎实的算法数据结构基础
我看了这个问题下面的很多回答，都推荐了很多各种各样的巨厚无比的计算机类书籍或者非常高深的项目。但是我觉得对于计算机在校的学生来说，首先最关键的就应打下坚实的编程功底，提前尽早扎实的掌握算法与数据结构基础。
说大学：如果你大学里想要超过很多同龄人，在成绩比赛等加分方面超过别人，大学计算机专业里有非常多程序设计类比赛都是非常有含金量的。如果你能在大一就多刷一些题目，打下坚实的编程基础，绝对可以让你在大二大三在各种别赛中崭露头角，最后大学里各种评奖评优奖学金都不是梦。
说深造：如果你有意向大学毕业进入高等学府继续深造，那么无论你是保研还是考研。现在国内著名的计算机高等院校复试均有上机在线编程考试。无论你大学里成绩多优异，无论你考研初试多高，研究生复试机考永远是你不可避免的一关。大学里热爱算法，热爱编程刷题很多的同学们，往往都会在机考中取得优异的成绩，甚至可以弥补你初试分数低的不足。学长还见过大学里非常优秀的其他同学，就是因为只注重考试的分数，疏忽了对自己编程能力的训练，最后导致复试机考爆冷，与自己心仪的大学失之交臂的。
说工作：随着国内互联网行业的发展，对编程人员求职者编程能力的考察越来越重视。如果你以后希望去外企工作，你会发现外企非常注重对求职者算法与数据结构基础，编程能力的考察。国内互联网早些年可能不会要求职者面试时编写程序，现在几乎各大公司面试都会模仿外企的模式，考察求职者的编程能力。很多面试题背很多，很多开发框架了解多少，面试造的火箭对你以后做的工作不一定影响很大，但是你的编程功底是否扎实直接影响了你以后的工作效率。如果你没有通过编程题目的考察，几乎很难通过心仪公司的面试。
自己虽然不是ACM选手，但是也同样深知打好扎实的算法数据结构基础的重要性，在大一早早的就开始刷题。让我之后在大学中的各种程序设计类比赛，保研复试机考，大厂求职面试都受益匪浅。
说完了重要性，那么该如何做呢？
学长之前在工作闲暇之余随手回答过一个关于编程的问题，没想到帮助了很多的同学，收获了800多个赞同，这里我就不重复写了，如何做可以看一下这个：
猪学长这里分享给大家一个谷歌学长精心整理的LeetCode优质的题解小册:
里面详细的把LeetCode热门的高频面试题目按照知识点做了分类整理，同时给出了最优的题解！有需要的同学记得保存起来，日后一定会用到。由于内容太多，下面这里查看：
我们大学中大二的课程是非常非常满的，因为自己大一就定下了要拿国家奖学金的目标，所以在专业课程方面丝毫不肯松懈，不仅不能轻易翘课，就连平时作业都需要尽可能的都高质量的完成。与此同时我还给自己计划安排了大量的校内项目，国内比赛要参加。
我是一个非常喜欢早睡早起的人，我的本科室友们都是会玩游戏到很晚，早晨起得也晚。我为了不打扰他们，同时又不让自己懒床，我天早晨都定两个闹钟。
一个是手机振动放在枕边:


一个是金属闹钟放到床下桌子上：



闹钟设置成05:30, 手机振动设置成05:20。
这样每天就能05:20被手机振动叫醒，同时因为10分钟之后，床下闹钟就要响了，自己还不能贪睡。这样就能做到，既让自己早起，同时又不打扰到室友。
同时起床之后洗漱完毕，我也会静悄悄的收拾好书包，然后迎着6点的清晨第一个冲到自习室。几乎大二的无数个日子每天都是在这样的晨曦中开始。



因为自己要参加很多的计算机类比赛，大学中的比赛主要就分为程序设计类比赛与软件设计类比赛大类。
算法比赛方面:
自己在大一打下一定的算法基础之后，大二又阅读了很多算法相关的书籍:
比如非常经典的刘汝佳的紫书,第一次学习这本书简直太爱不释手了，里面有大量的精彩的高频算法题目的归纳与精彩的讲解。记得当初非常认真的去复现里面好多的题目，然后跑去oj平台上去提交。



还有蓝书，有一段时间我对图论相关算法特别痴迷，觉得紫书里面题目还太少了，就买了蓝书去专攻图论相关算法题目。另一方面也是为了后面要参加的算法比赛做准备。蓝书里面有大量的不同算法专题的ACM经典例题与讲解！



巫神的挑战程序设计竞赛，这本书也是非常棒的！里面分为不同章节，由浅入深的介绍各种算法。最关键的是，里面给出的很多算法模板都非常非常的经典。是一本不错的算法比赛学习书籍。



其实此刻在写这些的时候，回想当年的自己也是觉得走了不少弯路。当年因为我本科学校是垃圾弱校，学院根本没有ACM队伍，其实上面这些书籍的内容有些偏深了，比较适合ACM选手。但是作为普通的计算机专业学生，我当初花了好多精力练习的很多偏深，偏难，偏怪的题目其实后面也不太常用到了。还不如多刷刷LeetCode实在hhh。
然后还有剑指offer


很多同学发私信给猪学长求上面这些计算机学习的书籍推荐以及字节、阿里、腾讯的校园招聘面试面经，这里先分享给同学们：
点这里, 计算机优质书籍项目免费推荐分享！
大厂高频校招面经合集免费分享，点这里！
我是在大三时候才知道剑指offer这本书的，其实上面的那些ACM级别的算法书我都阅读过之后，剑指offer其实就有些更偏基础了，好像60多道题目，都不算很难。
在这期间，我一直活跃在各个oj平台上，然后积极参加各种算法比赛。我贴我一直比较喜欢，一个冷门一点的oj:


哈哈当年的账号都已经找不到了。
项目比赛方面:
同时因为项目比赛我不太喜欢依靠别人，抱别人的大腿，所以一般我都是自己一个人是队伍中的主力。
大二那一年我涉猎了非常多的不同方向的软件开发技术，几乎比赛需要什么，我就立刻学什么，然后就开始上手开发。
搞过Qt，当时看的是这个，顺手也把c++期末大作业给搞了。当别人的c++大作业还是控制台的某某管理系统的时候，我用QT写了一个3000多行的带图形界面的桌PC端软件，老师直接就给了我98分的成绩让我印象非常深刻。


玩儿过Android ，为我当时还在上小学的小弟开发了一个数学算数训练小游戏的App。同样不仅参加了一个小比赛，而且同时还作为了java课程的期末大作业。我记得当年好像是用安卓写了一个小的游戏机app，里面有别踩白块，汉诺塔等几个小游戏。现在app已经找不到了。


上面这些书籍与项目如今都免费分享给同学们：
计算机优质书籍项目免费推荐分享！
然后同时写过web，搭过电商网站......
这其中有的是自己对技术感兴趣，有的是项目比赛需要。
回忆起来最有趣的事情，是我曾经还花了一个通宵的时间写了一个游戏脚本，30元一份的超低价，一晚上卖出去500多元，后来才知道贩卖游戏脚本不合法，吓得我赶紧就收手了。



哈哈哈，但是我当时一晚上写游戏脚本赚500块钱的事情还是在学院里传了很久。


悲催的期末:
因为自己要参加的比赛，项目太多，有时候当比赛与期末考试周赶到一起的时候，简直就是如噩梦一般的存在。



单片机期末，通宵到天亮。
还记得当初大家都觉得单片机好难好难，我好像是全班为数不多把功能都实现的。


终有收获:
我只记得我大二那一年课真的是巨多巨多，然后真的是好忙好忙。但是努力的付出终究是有结果的！！！
当大二下学期结束，大二一年的成绩几乎满绩点4.0，同时辛苦很多时间参加的非常多的比赛都有了收获。
然后终于等来了我们那年的国家奖学金的评选。
按照当年我们学院的规定，学院每年有四个国家奖学金名额，大三学生分配三个名额。只分配给大二学生一个名额。
我当时怀着忐忑的心情像辅导员提交了申请表，因为当时并不知道系里其他同学的实力情况如何，自己能否当选。
当评选结果公布，我在公示栏上看到了自己名字的那一刻，



我感觉一切的付出都有了结果。还清楚的记得当时每个公示的时候，我的个人信息是跟三名大三的当选的学长学姐并列在展览栏里，我大二的履历栏里的经历就和他们大三时候一样多。
当我踏入大三年级的时候，我的成绩已经在专业排名里比较靠前，综合素质排名全系第一。虽然我们学校非常差，保研名额不是很多，但是只要自己大三正常上课，自己不作死，几乎保研是十拿九稳的事情了。
因为自己真的大一大二太辛苦了，同时也实现了拿到国家奖学金的这个目标。自己原计划在大三可以休息一下。
但是学长得知的一个消息，彻底改变了我的整个大学轨迹。
因为我本科的学校是一个垃圾本科，没有很多985名校那些学生自带光环的学历。
之前一直觉得这样的学校是不可能有机会进入阿里腾讯这样的大厂的。
但是自己大三的某一天突然得知，自己上一届有一个一直非常低调的学长毕业拿到了阿里巴巴的offer。
自己永远记得当时自己那个惊讶的程度，在那时的我眼中，垃圾本科学校跟阿里腾讯这样名企是根本毫无关联的事情。
然后我就详细跟这个学长请教了好久好久，那个学长人非常非常好，耐心的跟我说了好多他的经验以及准备过程。
那时候我才刚刚知道什么是互联网校园招聘，什么是大厂求职面试，什么是秋招春招，才发现校招技术岗所考察的东西跟学校里学的东西几乎完全不一样。
自己虽然是学校里“成绩优异”的好学生，但是竟然与企业里要求相差甚远。
同时学长也告诉我，去大厂实习非常的重要，不仅可以学到学校里学不到的企业里真正的研发技术，同时还可以作为简历上很大的加分项。
我时隔好久再次又在大三走进了考研自习室......跟着所有大四考研的学长学姐一起，他们准备考研复试，我开备战大厂的实习。



我在大三上学期花了三个月的时间，每天早睡早起，除了上课以外，放弃所有的课余休息时间，复习准备冲刺。
看了无数本重要的技术书籍，学习并跟着做了好几个比较优质的项目，在csdn上写了400多篇读书笔记，刷题笔记，
首先最开始的时候，
我先通过校招面试题了解到，原来想要面试一个大厂技术工作岗位，原来需要在一个方向上深入的精通，而不是像自己之前那样瞎搞，所有方向都会一点儿，并不深。我就开始锁定的方向上大量的，先结合面经，然后深入的看很多很多的书。


因为计算机相关书籍实在是太贵了，就一本一本的去网上寻找电子版的。你们可以看到我的截图里，每个书籍前面都标明了页数，这些都是我自己认认真真阅读过的书籍，并不是像其他人随便搜集到的资源。
然后项目方面，我花了好几百块钱在某宝上买了很多的优质的项目课程：


上面这些书籍与项目如今都免费分享给同学们：
计算机优质书籍项目免费推荐分享！
然后这块真的是采坑太多了！！！
网上好多的卖项目资源的都是骗子，买到手里之后发现项目都是非常差的那种，技术也非常落后。
这块真的是踩了好多的坑，浪费了不少的钱。最后终于找到了一些跟自己方向一致，比较优质的项目。
上面的每一个我几乎都是先点进去大致了解，然后最后挑选出最好的几个项目自己深入去学习，同时在电脑上配置相关环境跟着实操，以此来充实自己的简历。
然后开始准备在网上投递简历，寻找实习。
原本以为普通垃圾本科的我不可能又大厂会看上我的简历，真的没想到在投递后，竟然有很多公司的hr电话联系了我，其中还有很多大厂。
在之前我那个时候，好多公司的日常实习还都没有远程面试，都要求必须去现场面试。
因为联系我的很多公司都不在一个城市，我只能选择面试机会最多的城市跑过去面试。
最后在大三上学期结束的那个寒假，其他同学都回家过年的时候，我放弃了回家，自己一个人跑去了北京面试。
原以为自己能找到一个实习就很错了，但是真的没想到最后经过了非常多公司的忐忑的面试后，自己竟然几乎全部通过了，其中还拿到了多个大厂的offer！！！
那时候我刚刚大三上学期......
当人生中第一个offer进入我的邮箱的时候，我真的不知道我的人生从此被彻底改变......


别人的人生我不了解，至少我看到的世界里，我周围所有的同学，同事，小伙伴们都是: 越优秀的人越懂得努力，越极度的自律。
但是如果你能看到了这里，透过我的大学经历你会发现，不仅仅只能低头的努力，越早的掌握信息，越早的找到努力的方向，是远比努力更重要的事情。
同时你也会发现我的大学里也走了不少的弯路，我是少数既花时间在国奖保研上，又拼命找工作求职的。在计算机专业这是两种截然不同的维度。
如果你在大一就决定今后想要去国内外更好的学校读研深造，那么你就应该像我大一大二时候，早早的掌握保研，考研，留学相关的信息。像我大一大二那样努力的搞好成绩，然后了解清楚学院内评奖评优的各种规章制度，制定好计划，去实施！
如果你决定毕业想要早些工作，那么计算机专业真的是一个不看出身，甚至连专业都不看的行业。你只需要早早的关注求职，校招，面经，岗位等相关信息。早早的出去实习，学校里的很多无意义的事情，甚至成绩你都可以不用关心！毕业的时候拿到bat大厂offer不一定是遥不可及的事情。
在我后来的读研以及毕业后工作的期间，无数的学弟学妹们都来问我许多非常经典的问题:
我的学历不好，不是985、211有机会进大厂吗?
我本科专业并不是计算机的，有机会进互联网公司吗？
等等......
我在多家国内头部互联网大厂，跟无数面试官聊过，在校园招聘中，
几乎没有一个技术面试官会因为学历专业出身去歧视候选者。
互联网技术面试官就是会认真的去考察候选者的真正实力。
985/211计算机科班硕士毕业拿不到大厂offer的人比比皆是，
双非本科逆袭进大厂的故事每年都在上演。

我知道有很多学校非常差的同学，
有的在ACM赛场上挥洒汗水艰苦努力，有的甚至早早的就在大二从学校溜出来去大厂实习的。
而还有的同学身在985甚至C9这样的计算机名校里，
昏天黑地，游戏里激情人生，浪费四年，一无所知。
都已经毕业了，待在家里的时候才开始到处投简历。

无论你现在处在任何阶段，如果你能看到老学长的这篇回答，同时还真觉得有收获，
放下手中的手机，关掉电脑中开着的游戏，好好对未来规划一下，我觉得一切都还来得及。
最后留下一句我一直特别喜欢，一直用来鞭策自己的一句话，送给大家:


10698字....我吐了....就先写到这里吧.....手好酸.....
到这里10698字都看完的同学，如果觉得有收获，不要只偷偷收藏白嫖猪学长， 给猪学长留一下一个赞呀，这样也可以让更多的小伙伴看到呀！


后面老学长的经历还有很多很多，
保研读研，校招求职，方向专业，工作经历......之后有时间再更啦。
上文中提及到的所有技术书籍，项目课程，校招优质面经我之前一直都有认真整理，其中有很多某课上的优质课程是我曾经花了很多钱购买的，现如今也已经毕业啦，都分享出来直接分享给有需要的同学们。


如果同学们还有其他什么问题，欢迎在评论区给我留言呀，不忙的时候我都会回复的。
然后所有对字节跳动实习，或者求职感兴趣的同学，
想找学长内部推荐的，也都统统都可以联系猪学长，记得点一个关注呦

","大概有三个时间点。
第一个是很久以前一个宁静的下午，我对着电脑屏幕发呆，因为我被分配了一个和地球正对面的团队合作的任务。而该团队代码之烂罄竹难书，回复速度之慢让我时常感到便秘。我还没有权限去check in代码和部署测试环境。一筹莫展之际我想干脆先去看看他们代码库把逻辑理清楚，之后能调试了改起来也快。
没想到我看懂了。一个破request在三个service之间弹来弹去的路径和副作用被我一下午读明白了。
当时我喜悦的心情约等于解了十个复杂的bug。
在这之后我打开了一个新世界的大门。无论是工作中的代码还是开源代码，各种工具库，系统底层，想看就看。
能够脱离调试环境深入理解代码这个能力的达成条件是长期独立解大型代码库中的复杂bug，磨炼自己对代码的感觉。有些答案说写代码是没有肌肉记忆的，有些答案说写代码是没有熟能生巧的，这些我是不同意的。学习编程即使走对了方向，也仍然需要大量反复的磨砺才能达到一定的高度。如果一个人还不能无障碍阅读代码，我是不承认ta有较好的代码能力的。
阅读代码的能力大概需要四到五年来培养，天赋较好的情况下，科班出身毕业一两年就应该已经有很强的阅读能力，而转行的在入行五六年左右也应该能够有这样的能力。
如果能大概一周时间在没有文档辅助下，允许每看懂几步去调试一下验证想法，能看懂Cassandra的写路径是怎么工作的，那代码阅读能力就算合格了。之后无非是更加娴熟和自然的问题，如果跨不过这道坎，那就还欠磨练。
第二个时间点是第一个时间点之后三年的一个冬日。
以前写代码的时候我都倾向于听Two Steps From Hell这种比较激昂让人想要骑狗上战场的音乐，沉浸在一种纯粹的释放的感觉中——因为我编程多数情况下实现只是在已经想好战略后的即兴创作。有几次一下午写千行上下的代码，十分酣畅淋漓。然而这一次，我突然想听Richter的悲伤小曲。
那一天我仍然写了很多代码，几乎重构了整个service。当我提交code review的时候，我很清楚地知道我的代码能力又提高了。因为我不再过多依赖我的直觉，而是有心地去衡量代码层面的权衡取舍。再去看之前写过的代码，有质朴的严谨和小聪明，却缺少了精巧有心的取舍和大智慧。
换句话说，从前我知道如何不写坏代码，但是这之后我知道怎么写好代码了。
这方面的磨练大概就是需要不断的review别人的code和被别人review，逐渐能够站在不同角度去看问题。同时阅读大量的生产代码以及开源项目也是必要的。“不坏的代码”是一个很大的解空间，要在其中选出“好的代码”来写，是需要持续的努力和耐心的。这里特别感谢当时的同事东欧大哥，他不留情面的code review和耐心跟我讨论我的review意见的过程使我受益非浅。
我在早年学习编程的时候读过《重构》这本鼎鼎有名的著作，它教会我如何不写坏的代码，并且能够把坏代码变成不坏的代码，对我影响深远。后来我读了一本叫做《A Philosophy of Software Design》的小册子，让我开始了对好的代码层面的设计的探索。
这里特别说一句，我个人是不喜欢设计模式这种分门别类的玩法的。我对它们的态度是去理解，但是实践中仍然从高内聚低耦合，可读可维护的原则出发思考代码结构。因为写好代码是一种在利弊之间权衡取舍的有创造性和艺术性的活动，抱着教条写不好代码，只能写出教条。
第三个时间点主要是涉及到对分布式系统的理解，因为题主问的主要是编程能力，所以就不细谈了。这部分主要是读书读paper以及读代码，动手推公式，动手写prototype。
最后强调一下：即使方向选对，即使平台不错，不下苦功，靠投机取巧，写不好代码。
","当时我还在学微电子，我调查了一下比我高几届的师兄的就业情况。
然后我的编程水平就突飞猛进。
","那是一个很普通的下午，第一份工作。当时的上司把我叫过来说：这块的逻辑这么简单，怎么写了这么久啊。我来带你写一遍吧。
接着，他一步一步讲解，边讲边写。先把他想的思路告诉我，然后就直接动手写，卡住了就再退回去重新想，其间不时我也会有疑问，他直接回答。写完了又review了一遍，把能优化的地方优化完并把格式排版好看后，提交，搞定。
整个过程让我明白了，实际项目中的编程和大学里做题做作业是完全不同的：
编程实际上是一门设计的艺术，如何把现实中的事物抽象成二进制考验的是设计功力。经此一役，好像打通任督二脉一样，后来的学习都一马平川无比畅快。同时还学会了一句很经典的名言：
PS：看完下面的视频记得回来点赞。

"
7,室友想抄我的代码，给还是不给?,"给，但是换一种方式，别微信传，也别U盘。
Github上创建一个Repository，先空着。让他Star你。当然他一个人还不够，让他想办法发动更多人去Star。
超过10 Star，你就把代码Push上去，然后让他Fork。
超过100 Star，都不用他修改变量名，服务到家，你帮他改。然后用他的Github账号Pull Request。
这个Repository留着，以后学弟学妹们都用的到。平时Private，有人找你要代码，就把他加为Collaborator。这就是Github允许私有仓库人数无限制的福利。
这么多Star不仅仅是数字，而是你毕业找工作时简历上最亮的那颗Star。记得找工作期间Make Public。
不是开玩笑，如果我是大学老师，我就要求学生这样交代码作业。这是程序员的必备技能。我会给每一个班创建一个Organization，他们交作业我都知道，代码有问题就发Issue。全专业的学生互相Follow，谁的代码写得好，大家就Star。下次上课，我可以打开Github，讲评一下比较好的代码，也可以让同学们互相学习和评价别人的代码。
大一新生入学，先学习Github的基本用法，然后一项练习就是Star学长们的Repository，为他们找工作贡献一份自己的力量，这个优良传统一届一届传承下去...
软件程序的一个根本特征就是可复制性，这是其他行业没有的特质。开放源代码也是目前软件产业发展的一个主要驱动力。应该让即将从事这个行业的新人们更早更深刻的认识到软件可复制可分享的本质特点。
关于如何最方便的浏览GitHub上的源代码，我之前专门写过文章。这里只给一个最简单最酷的办法，看这个视频：
演示的是浏览LInux一个C程序代码。
只需要把http://github.com换成github.githistory.xyz就可以浏览当前源代码文件以及它的历史变更。

","当然可以给，但是建议你在代码里做点手脚。
最初级的方法是在代码头部加入版权声明的注释，像下面这样子（以 C++ 程序为例）。但这种方法只能针对看都不看，直接原封不动地复制粘贴交作业的室友。
对于那种稍微警觉一点的，会复查源代码的室友，会把以上注释去掉，甚至换成自己的注释，到头你反而解释不清楚了。这时候就需要将版权声明放在稍微隐蔽一点的地方。比如，使用 ASCII 码来代替纯粹的英文字符，将版权声明隐蔽到运行结果里。
这样的话，室友即使复查你的代码，肯定也看不懂那串数字是什么意思（这都看懂了那还会找你抄代码吗！），越是看不懂的就越不敢乱改，等把作业交上去以后，老师一运行，自然知晓真相。
但是这样还不保险，万一室友运行了一遍程序，发现了你隐藏在代码里的版权信息怎么办？没关系，我们可以用条件触发器，超过指定的时间才显示版权信息！
如此，就既不丢人情，也不怕被卷入抄袭风波了。
更新：补充 cout 和 endl 前漏写的 std 命名空间。
","现有回答的答案都服务太不到位了。
岂止是要给啊，还要为了不让老师看出来，给改好了再给。

想当年我上大学的时候，老师留的作业，我也是啃了好久才啃出来。
然后，顺理成章地，同学们就来索要了。我说好，为了不让老师看出来，我给你个变种的版本。（你那水平，给你去改我都不放心。这句话没说出来。）
于是，一个作业我写了4份，每份的算法都有些差异。每次我都有新的收获和进步。（那年头，我们一个寝室8个人。）
等我把4份写完了给他们，我再取其精华，充实一下自己的作业，我还是那个最好的。
要不是那样，我怎么能理解内存分配、怎么能掌握调试的精髓？

所以，要给。如果有精力还要多给几份，多改改。
这是不可多得的练习重构代码的机会。

一个附带的效果，就是我虽然人单力薄，但是在寝室里从此说一不二。谁敢忤逆，我就一句话：你还想不想毕业了？

至于他们今后的死活，能不能找到工作……那我就管不了那么多了，我跟他们还没那么深的交情。
","我不光给 我还传到校园网上。。。我毕业十年了。。。学校里还流传着我的代码 恶心着一代又一代的老师。。。
话说。。当年的代码写的真是烂啊。。。
","伤害室友感情级别，由低到高：
1、给他抄。
2、给他抄，但附加合理的收费。
3、不给抄，但提供帮助/思路
4、礼貌且果断的拒绝，明确表示我不愿意让别人抄作业，关系再好也不行。（让他知道这是你的原则，不是因为你不把他当兄弟）
5、犹豫且模棱两可的拒绝。
6、用拙劣的借口拒绝。
7、拒绝并附带嘲讽（划水挂科活该，您配吗？）
8、爽快答应，但暗中使用手段，使室友被查出抄袭。

你室友想抄你，他自己也会觉得理亏，你不给他抄不太会影响友情。（如果实在来不及了，你们关系又不错，可以适当帮一把）
但你要是答应给他抄，然后背后捅刀子，别说这段友情必然凉凉，你的臭名甚至会传遍整个专业整个学校。大家都知道xx班有个笑里藏刀的小人，表面装好人，背后害自己兄弟。
做这种事，老师不但不会夸你机智，还会瞧不起你。我们班就有一个偷偷举报污蔑同学被抓包的，老师同学都不正眼看她，可想而知一切奖项好事都没她的份了。
","当年学期末邻近，编译原理大作业让写个C0或者P0编译器。我上网找了个c实现的p0编译器，花了两天看了一遍，自己用Java重写了一份，打包上传交差。注意，我的版本是运行在命令行的。
室友看我写完了，拿走我代码，在上面包了个特别简单的UI，可以选择源文件，然后把编译结果输出在UI里的那种，然后也打包上传交差。
隔壁有个哥们从室友那里拿走了代码(他俩关系比较好，所以没直接找我拿)，扔掉了UI，做了个简单的jsp网页，可以上传源码，然后调用核心代码编译，返回编译结果，美其名曰在线编译。
结果你猜怎么着？？

我60分，室友80分，隔壁那货95分。
所以你看，懂得包装和忽悠是多么重要！！现在我一线搬砖，室友小头目，隔壁那哥们早已不从事技术工作，部门经理，专职忽悠。古人云“三岁看到老”，性格决定命运，诚不我欺。
你所关心的抄不抄，给不给抄之类的都是细枝末节，对以后发展大方向没啥影响的。
PS，我当时对这种做法很不屑，但是后来回头看，这神特么“在线编译“，不就是后来大火的“云服务”思想的萌芽么？当时可是2006年，别说在线办公，互联网几乎各种空白，连新浪微博都没影呢。
","你放到github上，贴上一个gpl协议，告诉舍友地址。
你维护的开源项目对吧，也有你的维护记录，老师也能看得到。
","想起叔当助教那会儿，班上有对儿小情侣，如胶似漆，在我office hour的时候，他俩也不问问题，就在我眼前腻着。叔心如止水，叔古井无波。。。
小妹子写的代码就每次都给那个小伙子抄，一模一样的。我也不好意思直接说他俩，叔说他俩自己也心虚啊，毕竟叔年轻时候也。。。。于是就天天暗示他俩代码要自己写才好，学到的东西才是自己的。还苦口婆心跟他们说如果我看到代码雷同，两边都给低分。无果。于是就每次多给给小伙子1～5分，如果小妹子98分，就给小伙子99分，如果小妹子70分，就给小伙子72分这个样子。
真爱啊，那小妹子竟然足足忍了一个月才终于受不了了，责令以后作业都小伙子自己写，然后她抄！
（本故事纯属虚构，如有雷同实属巧合，千万别对号入座。你俩最后要是成了也得谢谢叔，要是没成也不能全怪叔当年评分搞鬼对不对？）

","我从大一就定下了一个规矩，我永远不会帮你写代码，但我会无条件的指导你思路，让你自己能写出来
时间长了，他们也就都只问我思路了
关系好的关系不好的知道我这么严肃
也就不想抄了
更新分界线
我的回答的核心就是“要自己学会，自己懂”
以下是一个栗子
我努力往好的方向带别人
难道不好么？




","
原回答：
给啊，为什么不给，不光给，我还会手动帮他们改好，他只需要把名字签上就ok了！
服务就是这么到位，您只需要支付500元就ok了，超值！
什么，您没钱？
吃我一记素质五连！

事实上，作为一个在大学代码写的还行的小哥哥。这种事情是免不的。没人跟你借代码那只能说明你水平不行了，因为大学会写代码的真没几个。
其实我大学的时候有一个同班女生，为人豪爽，跟我兴趣相投，遂结为异性父女。。。。扯远了，就是关系很铁那种，她不会写代码，而我为人懒散不喜欢文案报告之类的东西，我们一拍即合，我承包了她大学本科所有的代码工作，而她帮我搞定了大学本科所有的报告类工作。
而且。。。有一门课叫web开发，只有大作业没有考试，她的代码是我的复刻版，功能有什么还是我手把手的教她说的，结果她分数比我高。。。。
其实现在回想起来，我亏了吗？没有，我觉得血赚好吗！！
她亏了吗，她也血赚好吗！没我给她写代码，就她那水平她要毕业得秃了！

其实吧，我的真实做法是，舍友跟我要代码，我会给，老师查重，我会提醒说你改改，也不会太上心，我这样是因为我不想出国也不要保研所以对分数很佛系，能毕业就行。
评论里也有人会说什么对舍友负责之类的，给别人抄作业是害了他之类的说法。
对不起我不同意这个说法，大家都是成年人，我不需要对他负责。只要他不让我蒙受损失，他需要帮忙，对我来说也是举手之劳，我乐意效劳。就这么简单，他要抄我就给他抄，他有问题问我我就给他解答，他考一百我考60那是他的本事，我不吃亏的。
总有人会觉得教会徒弟饿死师傅，可我从来跟他们都不是竞争关系，他们只是我的舍友朋友好哥们，我才不会说为了他们好而不给他们这种屁话了。
试问我如果这样做了他们会感激我吗？完全不会！他们会觉得我是个自私自利的小人罢了。
为人处事的原则是人人为我我为人人，而不是好为人师教人做人。
或许将来有一天，我有求于他，他会念我当年一码之恩，给我方便，而不是对我说：对不起，我不能帮你，我这是为你好。。。。。
学校的感情是最纯真的。勾心斗角的，何必呢。

你们要的表情包







","想起了大学的时候，一个C语言大作业，我写了90%吧。另外一个室友不会码代码，做了一些杂乱的工作(当时还没学数据库，所以自己用csv当数据库，这个兄弟的任务就是填充csv，很杂也挺费时)。这个任务是5个人一个小组，按人头排名报上去，每个人根据作业得分和排名再得分。
我们小组分了一个女同学，从头到尾没做事的那种。其实这没什么，有的人做事，有的人不做事，挺正常的。但是最后要交排名的时候，另一个大概做了5%任务的兄弟，居然提议女士优先，让女生排第一个。我当时就不乐意了，凭什么我得这么“绅士”，而你们下课就去LOL没想过作业的事？然后他可能觉得我不好说话，又提议让女生第二。我还是看不过去，你排第三，自己让出排名我没意见，但是凭什么让做事第二多的兄弟让位，慷他人之慨？我室友大大咧咧的北方人，很少计较得失，虽然成绩不行吧，但至少做作业的时候态度是端正的。真就欺负老实人呗？
我觉得你的困境和我室友一样的，当你室友(我故事中提出女士优先的那个男生)先向你提出这个要求的时候，他就已经在借你们间的情分慷你之慨了。但这事有意思的是，如果你不同意，反而最后是你落个口实，说你不够意思(正如我室友不答应可能就被说有失风度，毕竟码农专业妹子那么稀缺)。
借作业的事屡见不鲜，我的建议是，如果对方确实做不了(我室友第一次考试写出过case1-case99这种代码，草稿纸都不够用，笑)，而且成绩差可能挂科，那看看情分能帮就帮；对方是混混日子，亦或是家里有矿不在乎这些成绩，那必然自己要为一些行为负责。别说什么怕挂科，怕影响排名，都尼玛扯淡。不帮他，让他涨一次记性，是为他好。而真正需要考虑排名的学霸，是不会出现找你借专业核心课作业抄的情况的。
就酱！
","你问对人了，我这个糟老头子可是坏的很呐
来，试试这个 ：python代码在线混淆
这个东西大家应该都知道怎么用吧
如果你们是手写实验报告代码的话 嘿嘿嘿


混淆前（你的代码）：
混淆后（你舍友的代码）：

专治复制粘贴程序猴



哈哈哈，我舍友交实验报告回来了
我去给他开下门∑(´△｀)
他说要把我的头按到键盘上？怎么ke ejdj jfjtiogos ji de dian ge zan meebfsjf kskfddddk dkskwggdjs
fkskkdmmrmdhdjkdk






","前面可以直接跳过，直接从最后三大段看起！
你们老师做的什么事儿啊。。。凭什么不能抄代码？代码界宣传了那么多年的开源开源开源，都喂了狗了吗？以前微软吵吵着要干死开源的，现在不也成了GitHub的大股东了吗？还带着头的搞开源。。。
你同学要问你抄代码，你让他们抄（其实说让他们抄不太合适，应该说让他们参考。。。），首先这肯定不是你的错，因为本着开源的精神，你的做法是值得赞扬的！你同学自己不做作业，被查重查出来了，倒霉也是他自己的事儿，因为这本质上是一个作业，评分标准确实是老师说了算。。。
但是，保险起见，我给你出个招儿吧，绝对不会有问题。
去类似GitHub这种开源网站开个账号，把你的代码传上去，然后挂个GPL3或者MIT什么的license，然后让你同学随便抄好了，查到你头上，就把网站扔给你老师看。
如果这都找你麻烦，那就是你老师的问题了。
有同学问，抄作业虽然不违法，但是违反校规呀？我同意
but！抄代码和抄作业还是有很大区别的！如果按照我上面说的做，那么你就会有三个优势
1. 你是被抄，不是抄别人的！你把自己的代码发在github不违反校规吧？(那些把“作业禁止上传到github”写进校规的大学就别往下读了，老师考试前明确表示禁止把作业上传到github的也别往下读了。。。)
2. 别人抄你github的代码，那肯定是别人的错呀……和你没关系！退一万步说，请拿出证据证明是你主动给别人抄的！这种确凿的证据，除非抄你代码的同学想坑你提前给你录音，否则根本不存在！既然拿不出证据证明我是主动给别人抄的，别人抄我的github我又没办法控制的……就奇了怪了，明明我是被抄袭的对象，为什么惩罚我？
3. 不要问我为什么要发github，发github好处太多了，我必须要快点发，早发就可以宣誓主权这点道理不知道吗？
有的同学问，严格地说，在课程结束之前把代码公开发布就已经违背了学业诚信了
这我完全不同意哦！这种事情不能一概而论的，至少代码不行，因为个人写的代码其实是一种知识产权，并不是普通的考试答案。
我自己本人就很喜欢在GitHub上公开自己的代码，不管是考试的还是paper所属的，从来没听说过有学术诚信问题。谁抄袭了，出了问题自己担着，我肯定是免责的。
核心问题还是在于，你要证明我是故意给别人抄袭。如果是公开自己的作业和笔试考试答案，那肯定逃不了干系的。但是在GitHub上公开代码恰恰不能算做是故意给别人抄袭。因为这和申请专利一样，申请某些专利意味着你要公开你的设计的，这不是给别人抄袭，而是告诉别人，这是我的，不准抄！GitHub是要挂license的，一个道理，告诉别人，这是我的知识产权，你们不可以偷，license确保我可以分享的权利，你们抄了做什么用处和我无关，但是出了问题我是不管的，包括挂科！
所以GitHub的license是一份具有法律效力的免责申明！既然免责，为什么要惩罚我？法盲吗？
另外我要提醒大家！在GitHub上发代码，都会挂一些GPL3、MIT什么的协议，我推荐GPL3，这也是我一直用的，为什么？因为想抄GPL3要满足四个条件
其中第二点和第三点就是我的免责理由！因为第二点和第三点其实是在说，如果你想抄我的代码完成作业或者考试，就请自觉去找老师自首。。。要么就别抄！
任何人想要抄你GitHub上的代码，为了完成第二点和第三点，他就有义务自己向老师报告说，“我抄了某某某的代码，哪里哪里哪里是我自己改动的”，所以说，说你违背学业诚信是不正确的。
如果你的同学在你的GitHub上搬走了你的代码，并且他想作业或者考试作弊，必然不会做到第二点和第三点，你的同学不单单是作弊，而且是违反了GPL，所以你也是受害者，更不应该受到惩罚。
注意到这背后微妙的逻辑了吗？你在GitHub上公开了代码，挂了license，这些license是要求抄你的人必须自觉的把你的源代码附上，并告知全世界，他是抄你的，所以你也是在帮着老师奋斗在反对考试作弊的第一线知道吗？
So，你把代码发GitHub的行为，意味着你做到了诚信，你也要求借鉴你代码的人也必须诚信！简直不能太正义了。。。
然后谈谈你的同学，想抄你的代码，既不想让老师知道，又不想违反GPL，那只能学你的思路自己从头写呗。。。
还有知友问，这是有道德问题的。。。
这没有道德问题，放心。。。为这种事情较真的老师不单单是法盲，其实连是非都有点分不清的。。。应该去参加一些pedagogical的课好好进修一下。。。
我自己本人也是老师，我不反对学生在GitHub上放代码，相反，我还鼓励！通过这样做，我很容易搞清楚，这代码到底是谁写的。我只想知道真相（谁抄谁的），并不以惩罚学生为乐。。。
但是，谁考试抄袭别人，我就挂谁，就这么简单粗暴。。。其实应该鼓励学生们把代码放在GitHub上公开，比偷偷摸摸的好不知道多少倍，一方面是教会学生如何保护自己的知识产权，另一方面，对老师的查重也带来了极大便利（我挺腹黑的）。
所以从老师的立场来说，这到底是为了什么？是为了杜绝作弊呢？还是为了享受惩罚学生的乐趣？如果是为了杜绝作弊，真的应该鼓励GitHub，让一切真相（代码谁写的）都大白于天下，查重也变得很简单。。。
开源的目的也是这个，让一切放在阳光下，想抄？抄吧，公开的抄比偷偷摸摸的抄更容易监控，你抄了别人的代码，被我发现了，这科挂掉你可别怨我。。。至于把代码发GitHub的那位同学，谢谢你的合作，不然我还真搞不清谁抄谁呢。。。
不要问我，万一被人偷了代码抢先发了github怎么办？。。。这是你自己的问题。。。
我明显本意是在反作弊，你们要看成是鼓励作弊我也没办法……
上传github并使用license，本质上就是在保护自己的代码。特别是GPL的第二点和第三点，这就是让抄袭的人自己去自首的意思不是吗？
另外我不支持和老师对杠的做法，只是指出这样做是正确的。至于有些老师会因此给你零分，只能自求多福，人无完人，老师也一样……（有些老师就是不明白GPL的第二点和第三点就是让抄袭的人自己去自首的意思，也不明白鼓励大家使用github其实是对反作弊有利，既然你都上课教人写代码了，自己开个github账号和学生互加好友就那么难吗？还可以长点粉丝啥的。。。一切都很公开透明，查重也变得很容易。。。）
有知友提出这样的观点
我觉得说有道理，这是非常现实的考量，但从另一个角度可以看出悲观情绪。老师都不愿意被学生们当“傻瓜”，可是很遗憾，大多数老师都被学生当成了很容易就是非不分的“傻瓜”不是吗？
我发现很多人都没有仔细阅读这个答案就已经开喷了……
我不支持跟老师对杠！
我不支持跟老师对杠！
我不支持跟老师对杠！
重要的事情说三遍……吃不准，你可以课上问老师啊～问个老师成本有那么高吗？
另外，我开了两个专栏，发了一些干货满满的技术型文章，关注度居然没有这个答案高……个人感觉挺讽刺的……
我发现很多人就是看不懂我到底在写什么。。。我这里总结一下我到底是在说什么。
我的建议适合这样的你
你的情况符合以上三点，并且做到以下两点：
那么，上传github挂GPL是最安全最正确的做法！
为什么？你的同学面临以下两个选择
两者必居其一！如果违反GPL抄袭，那是明显违反你的主观意愿的！说白了，挂GPL就是给人参考但委婉的不让别人抄！
所以我就不明白了，一个明理的老师为什么要惩罚你这样的好同学。。。这叫什么知道吗？这叫
""You are playing the game! Nothing goes wrong!""
PS、还有人说我一开始就嚷嚷着要抄要抄的。。。喂喂？开门见山也可以是假山好吗？请读下去。。。
关于学生作业的版权归属问题，因为这和雇佣关系有巨大区别，所以学生的代码的版权不应该属于学校，除非例外情况。其实在stackoverflow上早有这样的讨论，请阅读
第一高赞回答的第一句就足够说明问题了：
所以沟通很重要。我知道有些学校会事先让你签合同的，真的动笔签哦！。。。这种就别想了。但是这样恰恰说明，默认版权是你的，不然干嘛脱裤子放屁呢？
另外有些学校会控告你misconduct，因为你发布的作业让低年级学生作弊。。。这种情况并不是每个学校都普遍存在的。这些学校会控告，究其根本原因，他们不但允许而且支持老师们可以重复利用课件特别是试题和考题，哪怕换个老师也用一样的。。。
我表示理解！但是我们这儿是不行的，课件可以重复，但是考试绝对不可以重复，因为想想就知道，你以为GitHub是唯一的渠道嘛？私底下就不能问啊？所以我们大学是不允许老师考题重复的！
但。。。我只想说，事先沟通很重要！
既然版权默认是你的，你有选择GPL的自由。大家要讲道理嘛。。。
我还要声明一下，我也没有鼓励大家去和学校怼。。。但是有一点是肯定的（也没什么好藏着掖着的），大多数学校的学生都是弱势群体（北欧大学除外），也就是说，被不公正对待且放弃了上诉权。。。而看多了这些的人觉得这世界就应该这样，所以跑过来笑我naive。。。
实际上，绝大多数事情，你是可以做到有理有利有节的，并且在动干戈之前就可以化玉帛的（事先沟通好，事后就不用互怼了不是吗？而缺乏沟通到最后搞不定的，纯属一手好牌自己打坏了。。。）。
最后，我想留一个问题给大家思考，习题和考试让学生写代码，特别是take home这种，意义到底在哪里？可以互相参考吗？我们是真的想把平时不好好学习的学生们拍死在考试的路上吗？还是希望他们每一个人都能最终能学到东西并写出自己的代码呢？
教育的目的究竟是什么？教育的目的是育人，不是毁人。。。这就是我所说的政治正确，然鹅还是有人嗤之以鼻！
我相信，答案一定是，可以互相帮助互相参考，毕竟老师都让你带回家做了，可以谷歌可以百度不是吗？看谁不是看呢？但是请write your own code from scratch!
所以我个人倾向于鼓励学生互相帮助，因为GitHub可以挂GPL这种优秀license，所以非常适合让学生互相之间公开代码互相借鉴，并保护自己的代码，但是必须要严惩抄袭的学生！
另外，作为一个多年写代码的人，我可以告诉大家，不论你是菜鸟还是代码高手，当你写代码没思路的时候，最好的办法就是去读别人的代码并从中借鉴。。。只要你还在写代码，你一定会一直不停的阅读别人的代码。。。
开源的出现不是没有原因的。
再这么添加下去，文章要越来越长了。。。我个人不喜欢修改已经写过的东西（除非是错别字这种），会造成上下文缺失。希望这是最后一次添加。。。
","最简单的办法，就是掩盖你已经写好代码的事实，反过头去问他要代码。这样一来，他一定不会再跟你要代码了。在最终要交作业的时候，佯装熬个夜啥的，最后一刻提交。既保护了你的代码，也不至于伤害室友关系，某种程度上还能树立你牛人形象，毕竟我在大学期间就特别羡慕那些熬一夜就能解决任何问题的人。
这样做唯一的不好，就是有一点虚伪，对朋友不诚实。
但是我要告诉你，当你今后步入社会之后，会经常遇到类似的问题，我把这类情况总结为：“能帮，不想帮，不帮伤感情，帮了我吃亏”。
朋友借钱，你明明有钱又不想借，怎么办？
同事让你加班帮他干点活，你明明会干，但是就是不想干，怎么办？
亲戚想借你车，你正好不用但是就是不想借，怎么办？
这种情况通常面对的都是非常要好的亲朋好友，你绝对不想因为一件小事而弄得不愉快或者从此心存芥蒂，但是你又不想当包子让自己吃亏。那么怎样才能在不伤害感情甚至不明确说出拒绝的情况下，处理这种情况呢？
很简单，给自己创造一个和对方类似的诉求。
朋友买房跟你借钱，你可以说：“老婆想换辆好车，正想找你借点钱呢，看来咱俩手头都紧啊”
同事让你帮他干活，你可以说：“正想找你帮我弄个xxx呢，看来你现在真忙”
亲戚想借车，你可以说：“我也正想借辆车呢，我的车不跑了”
然后，你的困扰就解决了。
当然，诚实永远是优秀的品质，只有面对无理的要求时，适当的不诚实，可以让大家不至于那么难堪。
","给。
大学有次，室友抄我代码，把我写在注释上的名字也抄上去了。结果我们连带挂了。
后来我创业，室友从上海赶到北京帮我做了3个月。
我觉得人生就应该这样。有借有还，算那么清楚就没朋友了。大五又如何，大六又如何？
","身为一个大学前有点基础的留学生，我大一给几个有些困难的朋友轮流写过作业。
我们有的课程甚至可以复制代码，网上的别人的都可以，但要写明出自哪里。
我喜欢编程，多写点也无所谓。他们不想学就不学，多点时间做自己想做的事。
我也不在乎别人成绩超过我啥的，听起来可能有点虚伪，我甚至不在乎学历一类的，毕竟走出学校去工作去科研，还要看真本事。
人都有自己想干的和不想干的事，想做什么做什么，想给就给，不想给就不给。
说到copy代码，最近看到个笑话挺有意思，大家笑一笑就好
thx~
","曾经我把我的数据结构与算法课设代码给了别人，然后他又给了别人，然后别人又给了别人，然后又.......
最后他们成绩90+，80+，我却只有74分………………
","回答有讲自己经历，讲自己的处理方式的，也有质疑舍友的关系的，这些都不是问题的关键
关键是，题主问了这个问题，答案已经很明显了。
不想给，又不想伤害感情，两难了
这个问题不涉及编程、不涉及代码，也不涉及什么作业……
大体上可以确定，题主犯上了取悦别人的毛病，即不敢说“不”
如果你们几个的关系比较好，你说不让他抄，是不会伤害彼此之间的感情的，但是你拿捏不准，害怕伤害别人，如果我不给舍友抄，一个小小的作业，就让我们的感情散了，不值。
造成不敢说“不”的原因，只有一个，那就是你也害怕自己的要求，被舍友拒绝。

你高估了说出“不”后，对舍友的伤害。
你拒绝给舍友抄代码，你觉得会伤害感情，舍友不会这么想的，在他眼中，这是小事，一两天后这件事可能就把它忘了，除非你们只是表面兄弟。
当然，说不也是有艺术的。
假如你告诉舍友：“不给，自己不认真学，怪谁？滚回去好好念书吧。”
是谁都会种想踢死你的冲动。
最好的方法二十四个字：
说出类似的话，我不相信会伤害你们之间的感情。
还有，最重要的一点是，拒绝要果断，不要拖拖拉拉，越拖，越容易伤害感情，越犹豫，舍友觉得好像有希望，就很想继续劝服你，可是你又不给，来来回回，久而久之，结果就不言而喻了。
——以上是来自W3Cschool的回答。


","用rust写代码，我大一一直用的c,cpp写代码，主要也是课程要求，后面没有语言限制了，我就用rust完成我的大作业，因为这语言用的人比较少，老师看了肯定有印象，而且也不好改动，我的室友看了我代码一般都会知难而退，因为这种语言老师一般都会多问几句。
","取决于你室友是什么样的程序员
渣渣程序员：改改variable的名字交了，结果查重99%重复，卒。
普通程序员：改variable名字，改代码结构，你用for loop，他写个while，你用array，他改用ArrayList，运气好查重查不出来，改的差一点的，卒。
未来的BAT：改variable名字，你用for loop，他写个lambda for each，你用boolean，他用int表示，你用equals，他写个comparator，你代码600行，他代码400行，你甚至一度怀疑自己是不是抄的他的。
其实抄代码也是一门艺术，抄的是思路，不是语句。抄的好代码整洁度++，抄不好return重修。
"
8,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
9,有哪些顶级水平的中国程序员？,"ACM世界冠军陆靖，现就职阿里云，为人十分低调，公司内号称“人肉逻辑机”，他做事不轻易动手，深思熟虑后开干，一气呵成，鲜有编译错误。遇到搞不定的代码找他时，他就看代码，不调试，一遍一遍看代码，然后指出某行代码有错误。我们都觉得他看代码的时候大脑其实就是多核CPU，在一次又一次的运行代码。某次代码遇到bug,良久无策和另外一个同事打电话问他，他在电话里说你们检查下某个cpp文件的780行左右，是否参数传递有问题，一查果不其然，问他是否在电脑边，他说不在，在肯德基吃饭，众人大惊之下去git blame,发现这代码他8个月前提交过。特别聪明的本身少见，特别聪明而且记忆力超强的更是凤毛麟角。
他有一个爱好是看日本动画片，为此自学日语，最后能和日本人正常沟通，参与字幕组做翻译。
好多人留言问他的情况，这里统一补充答复，他是我见过的最纯粹自由的人，对钱，对名誉毫无兴趣，对别人怎么看他也不在乎，只对挑战性的问题有浓厚的兴趣和异于常人的专注。
","在鹅厂职级调整前，做到T5（科学家）的程序员，水平和履历都很能打。比如下面这位大佬：
吴石曾经是全球提交漏洞数量最多的个人。
他曾独自发掘超过100个Safari的CVE漏洞（“Common Vulnerabilities & Exposures”，公共漏洞和暴露）。
他曾创造过单月申报微软漏洞数量全球占比10%、独自发掘15个iOS漏洞的惊人成绩——这个数字比同期苹果自家研究人员发现漏洞（6个）的两倍还要多。
他曾发现只要给对方的QQ发送一条消息，就能够得到对方电脑的权限，进而控制对方的电脑，这对于受众巨大的QQ而言无疑是颗不定时炸弹，从此推动腾讯安全应急响应中心（TSRC）的成立。
据说初二之前吴石的数学非常差。但后来遇到良师启蒙，他对数学的兴趣一发不可收拾。高二拿了全国数学竞赛一等奖，后来考入了复旦大学数学系。
上了名校的吴石也和在座各位一样打游戏，但不是帝国时代和红警2，而是叫做“MUD”。但人家玩着玩着就黑进了游戏的服务器，并且成功修改了自己的游戏数据，从此走上了走漏洞之路。
你玩王者只想着喷队友，别人玩游戏自己开挂，这就是差距啊同学们。
整个大三吴石几乎都在搞计算机，他去软件公司打工，以至于几乎没有上一节课，但就是这样人家也就挂了一科。
一次偶然的机会，吴石向微软提交了可以实现系统提权的高质量漏洞，出乎他意料的是微软居然提供了奖励——要知道在当时的环境下，国内很少有公司能做到这么体面的事情。
受宠若惊的大神一发不可收拾，没多久又提交了数十个漏洞，这甚至超过了微软自家安全团队，2007年他收到了来自微软的offer。
再到后来，漏洞大牛的简历愈发丰满：
在加入KEEN Team后，吴石和队友们用两种不同的姿势搞定了 Safari，拿到了数万美金的奖金。第二年全世界的黑客用类似方法掀起了挖掘 IE 漏洞的狂潮。
2013年，腾讯抛出橄榄枝，吴石成为科恩实验室的首席科学家。2016年他带领科恩实验室团队和腾讯电脑管家组成的联合战队 Sniper 一举拿下了 Edge、Safari、Chrome，总分38分，以超越第二名13分之多的优势摘得了“世界破解大师”，比赛中所有的破解中都至少有一个吴石系统跑出来的漏洞。
当然现在更为人所知的，是他和他带领的科恩实验室团队对特斯拉的多次破解。
参考链接：
腾讯科恩实验室吴石，站在 0 和 1 之间的人

没想到这个问题这么多人关注，有兴趣了解鹅厂程序员的小伙伴，可以再看看这两篇：

","1、蔡景现 （多隆）
2000年加入阿里巴巴，在阿里的花名叫“多隆”；（经网友提醒是花名，不是外号，对不起我不严谨）
2003年，被马云拉进了一个秘密项目，和另外两位工程师一起从零开始，要在一个月内，搭建一个名叫“淘宝”的网站，并涵盖所有交易系统和论坛系统；
2003年-2007年，独自维护淘宝搜索引擎，并且这还不是他全部的工作；
2014年，被邀约成为阿里巴巴合伙人。
阿里系统软件事业部研究员毕玄说，“牛P很多，但能被称为‘神’的只有多隆一个。他在解决故障方面的能力更是无人能及，在淘宝的故障解决历史上有N多的案例。”
阿里中间件研究员小邪随手举了两个例子，“五彩石项目多隆完成了商城搜索的dump逻辑，当时如果没有多隆，整个项目需要延后2周；还有一次，淘宝session框架调用session_tair故障，一堆人（应该有10人+）一起排查问题，从6:00排查到第二天的6:00，最后多隆查到了问题。”

同样是阿里合伙人、天猫技术部副总裁范禹，之前在淘宝有个习惯，碰到搞不定的技术问题，就去找多隆。

2、章亦春
春哥的编程之旅起于抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法

江苏镇江人，1999年，初中的章亦春第一次接触《C 语言程序设计》靠手抄自学编程，进入江苏大学后，一发不可收拾的迷恋上开源世界。

结束淘宝量子统计的工作后，全心从事 OpenResty 等开源项目的工作；

2017年，在美国创办了 OpenResty Inc. 公司。

有人说：“这是个不需要技术圈“网红”捧的务实大牛。一个牛逼的好人。是我见过的最Geek的工程师。”

3、陆靖
（中间捧奖杯那个）
ACM世界冠军，为人十分低调，公司内号称“人肉逻辑机”

不调试，一遍一遍看代码，就能指出某行代码有错误；

爱看日漫，为此自学日语，最后能参与字幕组做翻译。
","尤雨溪
在美国留学时，曾经用两天时间，就复制出一款H5的Clear软件，在APP Store上线一天，就取得了付费版和总版第二的成绩。
2014年2月，尤雨溪开发了一个前端库，就是我们熟悉的Vue.js。Vue发布后，受到很多前端程序员的喜爱，很大程度上提高了前端程序员的开发效率。
后来尤雨溪希望自己能够将所有精力都放在Vue.js上，希望全职去开发和维护，在patreon上进行众筹，最终众筹的效果也是让他非常满意，每月能收到一万美元的赞助。
为了大力推广Vue，他经常出现在JS的各种交流会上，给广大开发者分享Vue的开发经历，使用Vue开发的方法和技巧。
在他的带领下，Vue.js正在茁壮成长，国内很多大小公司都在使用Vue，相信你也一定使用过这款前端的开源框架。
尤雨溪全职做Vue后，已经赚取人民币上千万了，真是非常厉害的程序员，值得我们大家学习。
这就让我们不得不深思，同样是程序员，人家怎么这么厉害呢？
蔡景现
蔡景现被称为阿里的扫地僧---“多隆”，是阿里巴巴初创时加入的三名工程师之一，也是阿里巴巴新增的三位合伙人之一。非科班出身的他，在一个月内从零开始搭建出了现在的淘宝，为了解决项目问题，常常在半夜爬起，去排除故障、去解决问题，独自维护淘宝搜索引擎5年，被称之为“码神”。
他精通C/C++/Java，从前端到后端，在从技术底层和高层业务之间来回切换，阿里的CTO对他做出过很高的评价，一个人能够顶得上一个团队。比如，写一个文件系统，别人做可能是一个项目组或一个公司，而他在很短时间内就能从0到1一个人做出来。
在所有工程师的眼中，他是一个神，甚至在公司内网的便签上，他也被称之为神。他很有钻研精神，很喜欢写代码，很傻很天真，写代码可以写到出神入化的状态。
我们应该像蔡景现一样，要有钻研精神，多写代码，多做项目，多学习；编程只是一个技术活，多做练习便能熟能生巧，将来也会成为一名出色的技术专家。
陈皓
陈皓被大众称之为“皓哥/耗子哥”，他在博客上写出了很多经典文章，推荐大家可以去看看，他的博客：http://coolshell.cn。
他从事软件已经17年多了，对底层技术架构早已了如指掌，曾就职于亚马逊、汤森路透等，目前正在进行创业。
阮一峰
阮一峰是一名经济学博士研究生，依靠对技术的执著和热情，不断学习钻研，成为了一名IT专家。他热爱技术、热爱写作、也热衷于开源。
他是经济学里写博客最好的，写博客将IT技术写得最通俗易懂的。前端的同学对他应该不陌生，估计很多学前端的同学都是跟着他的博客学习的，他的文章随处可见。
他翻译的著作有：
《黑客与画家：硅谷创业之你Paul Graham文集》
《软件随想录：程序员部落酋长Joel谈软件》
《异常流行幻象与群众疯狂&困惑之惑》等。
章亦春
大家都称他为“春哥”，他曾经就职于中国雅虎、淘宝、Cloudflare等。他的编程之旅开始于抄书，他很喜欢向大家推荐他的抄书学习编程之法，毕竟他可是从抄书到开源之巅的。
现在的春哥已经全身心投入到OpenResty中，希望OpenResty未来能在工业界、互联网等行业掀起大风大浪，引领机器编程革命。
如果有小伙伴想知道春哥是如何通过抄书学编程的，可以去图灵社区看看春哥的专访，里面记录了春哥的成长心路历程。
陆靖
他曾经是ACM的冠军，现就职于阿里巴巴，在公司内部被称为“人肉逻辑机”。他为人十分低调，做事情深思熟虑，做人十分低调，做事不轻易动手。
当有搞不定的代码时，他不是调试代码，而是逐行逐行的看代码，然后将某一行的代码错误指正出来。我估计他在看代码的时候，大脑就已经在运行每行代码了，大脑就是他的多核CPU。
之前网上流传着他的一个传奇故事：某次代码遇到Bug，他的同事无法搞定，打电话向他求助，他在电话中直接指出某个CPP下第780行的代码，这里估计有传参问题，他的同事一查，果然是这里出现了问题，问他是否在电脑旁，他说他正在外面吃饭，这让他的同事很是惊讶。
田春
他号称中国Lisp第一人，人称伞哥，他的思维远比技术值得关注。曾就职于网易云，在业内声誉很高，他的成绩我就不过多的介绍了。
有情趣的同学可以去看看伞哥的日记，地址：https://dirtysalt.github.io/html/binghe-blogs-notes.html
他的性格古怪，他坐在丁磊办公室的旁边，经常跑到丁磊办公室，将丁磊正在充电的手机拔掉，给自己的手机充电。
因为性格的古怪，后来被丁磊给开除掉了。离职时在博客上写：CEO 丁磊先生跟我性格不合，难以共事，但因为我工作成绩突出，无法直接开除，而我又深深留恋这家公司，不肯主动辞职，于是不得已将我劝退，给予 N+1 补偿，并言辞恳切地请我走人。所谓 “好聚好散”，我不得不接受。
伞哥走的时候说，他不会怀恋网易的，只会怀恋战友，等他下次回网易的时候，就是收购网易的时候。
Gray Wang
根据 FTX 和 alameda 的股权价值，2022 年 4 月 ， 在福布斯新一期的富豪榜上， 年仅 28 岁的 Gary 以 59 亿美元的身价成为了 30 岁以下最富有的人。
作为最神秘的亿万富翁高管，Gary 平时性格神秘，很少公开露面，网上照片屈指可数，连公司同事都经常很长一段时间见不到他，甚至领英的照片也只有一个背影。
Gary 出生在中国，8岁后就随父母移民美国新泽西，他从小学习成绩出色，尤其在数学和编程方面展示出了很高的天赋和兴趣。
2010 年他参加高中数学竞赛，刚好结识了 SBF 和 Trabucco （FTX的另外一名高管），三人共同参加麻省理工学院（MIT）举办的数学夏令营培训，三人皆顺利进入麻省理工学院的数学专业，Trabucco 和 Gary 攻读数学和计算机学士学位， SBF 则攻读物理学学士学位。
SBF 和 Gary 在大学中逐渐建立信任，他们做了三年室友，学习之余，他们常一起打游戏，做谜题。在空闲时间里，还会共同参加 Epsilon Theta 的兄弟会。Gary 性格沉默内敛，很多人都觉得 Gary 难以沟通、不好相处，但 SBF 在多年的观察中，深谙 Gary 的性格和能力，尤其知道 Gary 在编程和数学方面的天赋性（Gary 曾获得过 MIT 编程竞赛的冠军）。
“很多人觉得 Gary 无法相处，就和 Gary 保持距离，但我不会，我认为 Gary不想刻意远离这个世界，他非常聪明，而且他可以腾出时间去思考一些很困难的问题。”SBF 这样回忆道。
他们多年的求学经历结下了深厚的同窗友谊，毕业后 SBF 去了华尔街的交易基金 Jane Street 做交易工作，Gary 去谷歌做机票价格的整合引擎 Google flights 的开发。
2017 年 11 月， SBF 在旧金山创立了量化交易公司 Alameda research ，专注于加密货币市场的量化交易。 第一时间里，SBF 就想到在谷歌工作的 Gary，他立刻飞去波士顿，说服 Gary 加入 Alameda ：“你的天赋来做交易一定能行，加密货币市场充斥着无数的新机会，我们一起创造！” SBF 为 Gary 生动地描述着他的雄心壮志与抱负。
Gary 认为在谷歌的工作确实感受不到挑战，于是接受了 SBF 邀请来到旧金山。
他们经常并肩战斗，Gary 没日没夜的编写代码， SBF 经常睡在公司，两人每天只睡 4-5 个小时。
一开始，SBF 用自有资金运作 Alameda，买卖主流币和山寨币，但业绩不佳，甚至每天的损失高达 50 万美元。
但在 Gary 加入 Alameda 之后，团队在很长时间的摸索之后，确定交易策略为利用日本、美国和韩国之间的比特币差价套利。在最关键的一环中，Gary 为 Alameda 写了整个量化程序，用于快速在不同的交易市场中套利，这套程序只要捕捉到交易所之间的价差并迅速执行，就能完成一笔无风险套利操作。凭借着这个手段，SBF 更是从投资人那里拿到了 1.7 亿美元的融资，Alameda 一天的交易量一度超过数十亿美元，每天收入可以做到惊人的 2500 万美元。
然而这并不是一切的开始，早在 2018 年， SBF 就请求 Gary 写过一个比特币交易所的程序，Gary 一个月就完成了一个交易所 CryptonBTC。虽然后来没有做成产品，但 SBF 深知如果让 Gary 来写合约交易所程序，他一个月内也可以完成，并且比市场上任何的交易所写出来的质量都要好。Gary 是一个不折不扣的程序天才。
但当时合约交易所普遍存在的问题是，当客户的头寸经历损失，并且需要追加保证金，交易所会先请客户追加保证金，如果市场变化太快，交易所就会先承担资金的这部分损失。
在后来的合约交易所的代码中，Gary 发明了一个新的清算引擎机制，可以按秒为单位来监控客户头寸，当客户保证金不够的情况下，立刻执行清算，从而保护了交易所的资金。虽然这个功能让交易者感到厌烦，但是解决了长期困扰众多交易所的关键问题。Gary 为 FTX 加入清算机制后，Binance、Kraken 和其他交易所也跟进开发了这个功能。
此外，在一般的合约交易中，用户需要有对应资产的抵押进行借贷， 缺少资金的灵活性。针对这一点，Gary 为FTX开发了“交叉保证金”功能，让用户可以用多种数字资产共同为一笔交易做抵押。这一功能也在后来被其他合约交易所相继推出。
实际上，作为 SBF 成就大业的“二把手”，Gary 不仅仅只是一个优秀的程序员，他还是一个顶级的产品经理！Gary 甚至可以单独通过市场需求开发出领先竞争对手的产品。 Nishad Singh 是 FTX 的工程主管，但是更多做工程师的协调，最核心的产品经常是 Gary 一人独自开发。
与此同时，Gary 会负责 SBF 一些特殊程序的核心请求，并且只有 Gary 和 SBF 有权限使用和查看，FTX 的工程团队甚至都不知道 Gary 写的全部的程序。其中就包括 Alameda 可以从 FTX 转移资产的 “允许负余额”这一功能，这一程序让 Alameda 可以无限制地使用 FTX 客户的资金。
在 SBF 和 Gary 的领导下，FTX 做到全球交易量排名第二，市值高达 320 亿美元。 却在 2022 年 11 月，FTX 一个星期轰然倒塌，欠下超过 100 万名的债权人的超百亿美元的债务，堪称虚拟货币世界的雷曼时刻。
FTX 的核心团队全部住在一栋巴哈马的顶层公寓中， 事发时刻警察上门扣押了包括 Gary 以内所有 FTX 的核心人员。
他在 2022 年 12 月承认了包括电汇欺诈、商品欺诈和证券欺诈等所有罪行，即将面临 50 年的监禁。目前，Gary 正在寻求在法庭上合作作证以减轻判罚。
一代天才程序员 Gary Wang 也曾名噪一时，但这样锋利的一把嗜血宝刀却被用在了错误的地方，落得一个潦草收尾的结局。
贾扬清
Caffe框架的创始人，也是TensorFlow的作者之一，曾就职于Google Brain、Facebook等。

","左耳朵耗子， 目前在创业： MegaEase， 主要为企业提供技术解决方案以及高可用、高并发、高性能的分布式技术产品。
耗子叔有一个访问量千万的技术博客: coolshell, 上面的文章可以说是篇篇精华，我墙裂推荐大家去看看，CSDN 经常由于访问量过大被推上首页。


耗子叔尤其擅长底层技术架构，C/C++/Java和Unix/Linux/Windows。
对高性能，高可用，分布式，高并发，大规模数据处理系统有很深入的研究。
耗子叔是一个肯下笨功夫的人，他在2001年被外包到银行做开发，
他在 2001 年那年被外包到了某银行做开发，就是用 C 语言在 AIX 系统里堆一些银行的交易逻辑，他坦言，这个过程并没有让他学到什么东西，也没有什么成长，每天想的就是要离开这个地方。
所以，他在晚上 10 点以后开始看书学习到 11 点半，并使用工作环境动手实践书上的代码，一年后，精读了《TCP/IP 详解》《Windows 核心编程》《Java 编程思想》等书。然后，找到一份外企业的工作，月薪一下翻了三倍！！！
看书一定是系统成长最快的方式，在这里顺便送大家一份我自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，需要看了，去网上挨个找的，最后汇总而成。
这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。
我整理的这些书大家可以在这里下载，对于学习计算机的同学帮助非常大，且十分系统：
https://zhuanlan.zhihu.com/p/369766867
正是凭借着这股子对底层技术的持续不断的专研劲，才有了耗子叔现在的成就，并且影响了几十万做技术的人。
在谈及程序员加班、996 这个话题的时候，耗子叔说到了他在外企的经历：
在这家公司是我成长最快的时候，然而，并不是因为我的努力，而是因为有很多比我牛逼的人在 Code Review 上给我大量的帮助，在项目上帮助我，我的努力学习虽然也有作用，但更多的是高手对我的帮助。
再回想一下我以前在职场上的很多关键点，不是因为我加班了，而是因为在某些关键问题上，我跳出来解决了其它人都解决不了的问题，我解决了一个网络通信莫名其妙的断掉的问题，我把性能优化了很多倍，我解决了一个不能重现的一个困扰团队 3 个星期的问题（其实就是大家没有认真读文档），我在入职一个公司的第一天里就为这个公司解决了一个历史遗留问题。
在 Platform，我每周解决了 bug 数是全公司的其它人的总和还要多（从不加班），在路透，我带团队优化的系统的性能是全球所有研发中心最高的，在亚马逊，两周打通美国和德国的订单和商品列表系统。我也有失败的时候，而我失败的时候，总是因为我搞不定事，即便是加班拼命努力也无济于事！是的，我的职业生涯的成长，最根本的不是你有多努力，有多勤奋，而是你能搞定很多人搞不定的事！
你不信你可以看看你们公司那些不用加班，就算什么也不干，公司也要花钱养的技术人员，他们的成功一定不是努力和加班加出来的，你会发现这些人拼的不是谁干的多，而是谁解决的问题更有难度。
我加班 996 的时候，从来都不是我成长最快的时候，而我和一群牛人在解决难题的时才是我成长最快的时候。
加班996绝对不是成长的关键点，成长最快的时候往往是解决了一个个的技术难题！！！
耗子叔坦言自己绝不是高手，也不是牛人，离他们的距离还很大。只是从2003年开始在网上记录一些自己的技术知识和想法，今天还在努力学习希望能成长一个高手，因为，面对生活在今天这样技术日新月异的时代，我们每个人都是一个新人。
他很幸运出生在这个时代——第三次工业革命的时代，也很幸运选对了专业，所以，可以算是一只“风口上的猪”了，就是运气好，赶上了这个好的时代，他要唯一要做的就是不要辜负这个时代，无它。
希望我们也不要辜负这个时代！！
程序员想要远离996，首先是提升算法和基本功，不然就只能重复性搬砖，在这里也送大家一本帮助我拿到BAT 等一线大厂 offer 的算法笔记，是一位阿里大神写的，对于算法薄弱或者需要提高的同学都十分受用，算法一定是计算机学习的重中之重：
在这里也转一篇耗子叔的专访：：我的精神家园（图灵访谈）
我当时在银行做银行网络、银行的电子邮件系统和办公自动化系统。当时正处在银行信息化的阶段，加上当时互联网和IT业刚刚火起来，得到这份工作其实是很幸运的。银行正值扩张电子信息化业务的时候，其实应该有很多事可做，但是当时的主要工作都是由厂商来干。比如说IBM或Cisco拿下单子来，会把工作外包给系统集成商。作为一位技术人员，其实可以发挥的空间并不大，多数时间我只是出了问题打电话的角色。没有人会教你任何事，出了问题，就是打电话，然后按照他们的指导来完成工作。但这个还不是促使我离职的最主要原因，我离开是因为互联网和IT业的兴起让我有些心向往之，有想去看一看的冲动。我还记得当时的辞职书是这么写的：“本人对现有工作毫无兴趣，申请辞职”。处长说，“你可以这么写，但是要加上‘经调解无效’，另外，分给你的房就不能要了”。我说好啊。就这样就辞去了工作，去了上海。老实说，这个决定真不好做，因为几乎所有的朋友和亲人都很反对。
当时选择上海是有原因的，我觉得在当时的环境（2000年）下，上海的发展比较不错。没有选择深圳的原因是个人感觉那是因为政治原因凭空冒出来的一座城市，我不是很喜欢。北京我有很多同学，而我想去一个陌生的地方。但是后来发现上海也不是做技术的地方，过得有些压抑，初来到上海的时候经常会被人瞧不起，毕竟是刚刚来到大城市。
我当时感觉银行束缚了我，想看看自己可以跑多远，能发挥出多大的价值。于是决定出来闯一闯，主要就是要去经历一些应该去经历的事情，不希望老了以后会后悔年轻的时候没有去。当时IT产业的发展是一个大趋势，我感觉我必须要去一座大城市，去经历一些东西。在小地方基本没有这些机会。要学会游泳就必须要跳到水里去呛两口水，所以我就义无反顾地出来了。
我仍然记得自己拎着皮箱站在上海火车站的样子，举目无亲。原来在老家的时候觉得自己还挺厉害的，自以为不愁找不到好工作。不过事实却不是这样的。
我还记得第一次去面试时，（面试官）问了很多和C相关的问题，问了我半个小时，我一个问题都答不上来。我一直低着头，好像被审问的犯罪分子一样。我从大学毕业出来就没经历过什么面试，再加上自己内向的性格，所以，整个过程我都在低着头，不敢看别人一眼。最后，面试官问了我一个问题是“有不懂的问题你会怎么办”，这样的问题我都不敢回答，其实这道题的答案不过就是“问别人”或是“自己看书”或是“上网查资料”什么的。很显然，这场面试我肯定是被灭掉了。但这还没完，最后面试官对我说：“你出来干什么，像你这种性格根本不适合到大城市来”。
我当时被严重地打击了，感觉到自己确实有一些东西很差。第一个是性格差，不知道怎么与人交往；第二个是技术差，很多问题不知道；第三个就是视野狭窄，没见过世面。后面的几家公司的面试都大同小异。一个人在异地他乡，经历了这些事情，心里会非常地恐慌，“我这条路是不是走错了？”，我经常这样问自己。
面对这样的情况，我被逼迫着一定要改变自己。因为，离开银行时，我的家人、同学和朋友都很反对我出来，如果这样灰溜溜地回去，我面对不了他们。而前面的人还看不起我。我当时的处境真的很难堪，就像爬在悬崖中间，上不去也下不来。所以，当时只有一个想法，就是要证明自己不是那么差的人。人被逼到那个份上，活得就比较简单，哪有什么职业发展规划，只想拼命地多学技术，提高自己的能力。这个经历有点像是一剂兴奋剂，同时也相当阵痛。但是回头想想，第一个面试官应该是我最感谢的人。
在同学的帮助下我找到了在上海的第一份工作。南天公司，这是一家给银行做系统集成软件的公司，大学毕业时本来也可以进去，现在绕了一圈而且还是靠同学帮助进去的，所以那时的心态还很不平稳；另一方面因为以前是做银行的，是甲方，现在成了乙方了，两边的人都用异样的眼光看我，心态非常不好。
不过，这是个技术不错的企业，国内早期很多搞Unix/C的高手都是从这个公司培养出来的。我当时的技术还是不行，比如说到了用户站点以后，不知道怎么做，我曾经误操作把用户的数据删掉了。经常犯低级错误，不但没做好自己的工作，反而还给别人添了麻烦。这些经历都让我有一种“技术焦虑感”，或者叫“技术忧郁症”。我觉得自己这也不行，那也不行。这也是我今天仍然在拼命学习的原因。这就好像我们经常在参加工作多年后还会梦见自己的英语四级没过，或者是期末考试没过一样。我经常会梦见的是项目又做砸了，又把用户的系统搞乱了，一大堆人要审我、要训斥我。
因为技术差，沟通差，不会面试，所以，我决定经常出去面试，基本上每周都要去，不管懂不懂，也不管是什么公司，也不管别人鄙不鄙视我，反正一有机会就去面试，多见见人这样可以让我的性格有所改善，同时，也可以知道社会上需要一些什么样的技能，把别人面我回答不上来的东西都记下来，然后回头找答案。那个时候我会经常去上海书城看书，看很多很多的书。我学的东西很杂，什么做网页，Windows，Unix，Java，.NET，flash，连3DMax/Photoshop我也学，还去考CCNA的认证等等。这样散乱地学习两年后，我才慢慢确定了要走C/C++/Unix/Windows系统底层的路子。而这样扑天盖地学习的结果有一个好处就是，我成长的速度相当之快。我自己摸索到了适合我的学习方法（从基础和原理上学习），从而不再害怕各种新的技术。那时，所有人都在休黄金周出去玩的时候，我还呆在办公室或住处看书学习。
等到一年半之后，用句赵本山的台词说，我在面试中学会抢答了。面试官的问题没问完，我就能说出答案了。其实，基本上是面一个公司过一个（当然都是一些小公司），此时，我就开始挑公司了。
感到技术能力不行就去学技术，交往能力不行我就去面试，这两个问题都可以通过大量地实践和努力来弥补，但是眼界这个东西没有办法通过努力来弥补。所以，当时非常想去一些更大的公司看看，如果能去外企更好。
我还记得，有一天，有一个和网络相关的技术问题，同事们搞了三四个通宵，也没弄明白，后来想起我好像在看这方面的书，他们就让我去看看、试试，结果我只用了20分钟就搞定了。基础真的很重要，这受益于我看了《TCP/IP详解》这套书。
后来，我去了一家做电信软件的公司，他们让我做PowerBuilder，尽管我当时想做的是C++，但是因为当时各种原因很需要这份工作，就去了。进了那里的第一天发现公司里有一个论坛，上面都是一些技术上悬而未决的问题，都是关于Windows/C++的。我一看，都是些很简单的问题，一下午的时间就被我全部解决掉了，我的基础知识发挥了作用。于是，当天下午我一下子就被调到了核心组。不过，我只在那里呆了两个多月，因为那时我已经不愁找工作了，这期间有两家北京的公司录用了我，于是，02年我就来到了北京，去到一家做分布式计算平台软件的公司。
在上海的这两年的时间，从什么都不是，到得到工作上的全面肯定。那段时间感觉自己牛得不得了，有些狂妄和骄傲了，经常上网和不认识的人争论一些很傻的问题，后来发展到对当时的领导以及银行客户的领导不敬，总觉得这些人太二。现在回头看过去，我觉得那是我人生特定时期的记号，人生的痕迹。
我2002年在CSDN开了一个blog，当时叫专家专栏。开个专栏很简单，只要发6个帖子。我也不是什么专家，只是喜欢看书、喜欢学习而已，也喜欢做一些学习笔记。那时候没有笔记本也没有台式机，市面上好像也没有U盘和移动硬盘。正好有CSDN这么一个地方，就去CSDN的站点上把自己的一些学习笔记放在了上面。后来03年的时候技术专栏转到了博客，因为CSDN对其博客经营得不好，我09年就离开了csdn，创建了酷壳。花了4500块钱，租了一个server。我离开那里主要有两个原因，一个是因为当时CSDN博客有一些性能上的问题，.NET架构嘛，大家都懂的。另外一个原因就是当时出现了很多博客营销的站点，有点像今天的36氪。好像那时候出现最早的叫煎蛋，那上面会有一些报纸上不会出现的国外的趣闻，是以博客的方式形成的媒体。这和常规的以日记形式出现的博客大不一样。煎蛋、有意思吧等这些博客让我看到了博客还能这样写，我觉得很好玩儿。而我当时也经常会去国外社区看一些文章，也能看到一些有意思的东西（因为我当时有了学习瓶颈，国内的网站已经满足不了我了）。心想，既然这些东西这么有意思，我为什么不自己开一个博客呢？
我老婆是学新闻编辑的，她鄙视我说，你的博客虽然有很多人读，但是只能算是个书呆子的博客，全是一些书呆子式的文章。我有些不服，我觉得技术人员不全是书呆子，我们这个圈子里也有很多有趣的东西，只不过是你不知道而已。于是我想弄一个有意思的、有娱乐性质的东西，里面都是技术圈里面有意思的事儿，但是很多技术圈以外的人也能看懂。一开始酷壳和CSDN博客的风格完全迥然，如果有技术性的文章我还会在CSDN上贴，但是后来我就完全抛弃了原来CSDN上的博客。酷壳的初衷是希望很多人都可以来上面发表一些东西，但是可能是我写得太多了，别人就被压制住了。
现在博客更新频率是一周一篇，一开始的时候一周三篇。磨刀不误砍柴工，总是有时间来做这些事的。我经常看书，需要把学到的东西整理成学习笔记。自从在CSDN上写博客的时候，就有这样的习惯了，而且又有“技术焦虑症”，害怕跟不上，所以维护博客的事对我来说是很自然的。
现在我已经不用自己再租服务器了，由于酷壳的访问量比较有保证，我提供了广告位，就免费得到服务器了。
遇到新技术我会去了解，但不会把很大的精力放在这。这些技术尚不成熟，我只需要跟得住就可以了。我的团队自己想学什么我都不干涉，但是用到项目里的技术，必须是很成熟的，（技术应用）十年以上可能是一个门槛。有人说技术更新换代很快，我一点儿都不这样想。虽然有不成熟的技术不断地涌出，但是成熟的技术，比如Unix，40多年，C，40多年，C++，30多年，Java也有将近20年了……，所以，技术并不多啊。还有很多技术比如Ruby，Lisp这样的，它们没有进入主流的原因主要是缺少企业级的应用背景。
如果要捋一个脉络下来，70年代Unix的出现，是软件发展方面的一个里程碑，那个时期的C语言，也是语言方面的里程碑。当时所有的项目都在Unix/C上，全世界人都在用这两样东西写软件。Linux跟随的是Unix，Windows下的开发也是C。这时候出现的C++很自然就被大家接受了，企业级的系统很自然就会迁移到这上面，C++虽然接过了C的接力棒，但是它的问题是它没有一个企业方面的架构，否则也不会有今天的Java。C++和C非常接近，它只不过是C的一个扩展，长年没有一个企业架构的框架。而Java出现之后，IBM把企业架构这部分的需求接了过来，J2EE的出现让C/C++捉襟见肘了，后面还有了.NET，但可惜的是这只局限在Windows平台上。这些就是企业级软件方面语言层面这条线上的技术主干。
另外一条脉络就是互联网方面的（HTML/CSS/JS/LAMP…）。这条脉络和上述的那条C/C++/Java的我都没有放，作为一个有技术忧虑症的人，这两条软件开发的主线一定不能放弃。无论是应用还是学术，我都会看，知识不愁多。何必搞应用的和搞学术的分开阵营，互相看不起呢？都是知识，学就好了。
技术的发展要根植于历史，而不是未来。不要和我描述这个技术的未来会多么美好，用这个技术可以实现什么花哨的东西。很多常青的技术都是承前的。所以说“某某（技术）要火”这样的话是没有意义的，等它火了、应用多了咱们再说嘛。有些人说不学C/C++也是没有问题的，我对此的回应是：如果连主干都可以不学的话，还有什么其他的好学呢？极端一点，我要这么说：这些是计算机发展的根、脉络、祖师爷，这样的东西怎么可以不学呢？大部分学校虽然都会教授C，但是教得都不好。学校喜欢教微软的东西，老师好教学生好学。我不是说Windows不好，但那不是计算机文化的主干，那只是微软的主干、PC的主干。整个计算机文化的主干肯定是源起于Unix/C这条线上（注意，我说的是文化不是技术）。我也写过很多与Unix文化相关的文章，大家可以看看我写的“Unix传奇”。
学校教的大部分都是知识密集型的技术，但是社会上的企业大部分都是劳动密集型的。什么是劳动密集型的企业呢？麦当劳炸薯条就是劳动密集型的工作，用不到学校教授的那些知识。如果有一天你不炸薯条了，而要去做更大更专业的东西，学校里的知识就会派上用场。有人说一个语言、一个技术，能解决问题能用就行了，我不这样认为。我觉得你应该至少要知道这些演变和进化的过程。而如果你要解决一些业务和技术难题，就需要抓住某种技术很深入地学习，当成艺术一样来学习。
我在“软件开发‘三重门’”里说过，第一重门是业务功能，在这重门里，的确是会编程就可以了；第二重门是业务性能，在这一重门里，技术的基础就很管用了，比如：操作系统的文件管理，进程调度，内存管理，网络的七层模型，TCP/UDP的协议，语言用法、编译和类库的实现，数据结构，算法等等就非常关键了；第三重门是业务智能，在这一重门里，你会发现很多东西都很学院派了，比如，搜索算法，推荐算法，预测，统计，机器学习，图像识别，分布式架构和算法等等，你需要读很多计算机学院派的论文。
总之，这主要看你职业生涯的背景了，如果你整天被当作劳动力来使用，你用到的技术就比较浅，比较实用，但是如果你做一些知识密集型的工作，你就需要用心来搞搞研究，就会发现你需要理论上的知识。比如说，我之前做过的跨国库存调配，需要知道最短路径的算法，而我现在在亚马逊做的库存预测系统，数据挖掘的那些东西都需要很强的数学建模、算法、数据挖掘的功底。
我觉得真正的高手都来自知识密集型的学院派。他们更强的是，可以把那些理论的基础知识应用到现在的业务上来。但很可惜，我们国内今天的教育并没有很好地把那些学院派的理论知识和现实的业务问题很好地结合起来。比如说一些哈希表或二叉树的数据结构，如果我们的学校在讲述这些知识的时候能够结合实际的业务问题，效果会非常不错，比如：设计一个IP地址和地理位置的查询系统，设计一个分布式的NoSQL的数据库，或是设计一个地理位置的检索应用等等。在学习操作系统的时候，如果老师可以带学生做一个手机或嵌入式操作系统，或是研究一下Unix System V或是Linux的源码的话，会更有意思。在学习网络知识的时候，能带学生重点学一下以太网和TCP/IP的特性，并调优，或是能做一个网络上的Pub/Sub消息系统或是做一个像Nginx一样的web server，那会更好。如果在学图形学的过程中能带领学生实践开发一个作图工具或是一个游戏引擎，那会更有意思。
总之，我们的教育和现实脱节太严重了，教的东西无论是在技术还是在实践上都严重落后和脱节，没有通过实际的业务或技术问题来教学生那些理论知识，这是一个失败。
中国人中庸的思想，入世和出世，每天的工作就是入世。举个例子，在上海的时候，给交通银行做项目的时候，每周休息一天，早九点到晚十点，每天工作12个小时，这样的工作持续了一整年，没有节假日，项目上的技术也没什么意思。当时我晚上十点回到住处，还想学一些C++/Java和Unix/Windows的技术，于是就看书到晚上11:30，每天如此，一年下来学到很多东西，时间没有荒废，心里就很开心。我觉得当时是快乐的，因为有成长的感觉是快乐的。
现在的我，工作、写博客、养孩子，事情其实更多。我早上7:30起床，会浏览一下国外的新闻，hacker news，tech church，reddit，highavailability之类的站点，9点上班。晚上6、7点钟下班，开始带孩子。十点钟孩子睡了觉，我会开始重新细读一下这一天都发生了些什么事情。这个时间也有可能会用来看书。学习的过程我是不喜欢被打断的，所以从十点到十二点，家人都睡了，这正是我连续学习的好时间。可能从晚上11:30开始，我会做点笔记或者写博客。我现在对酷壳文章的质量要求比较高一些，所以大概积累一个星期的时间才可以生成一篇文章。每天我大概都在一两点钟才会睡觉。没办法，我有技术焦虑症。但是觉得这样的生活很充实，也很踏实。
另外，任何一门技术玩深了，都是很有意思的。有些人形成了一个价值取向，“我只做什么，绝不做什么”。前段时间有一个刚来亚马逊的工程师，他原来做的是数据挖掘推荐系统，后来公司重组要他做前端，他不肯。我觉得，前端后端都是编程，Javascript是编程，C++也是编程。编程不在于你用什么语言去coding，而是你组织程序、设计软件的能力，只要你上升到脑力劳动上来，用什么都一样，技术无贵贱就是这个意思。
回到问题，怎么才能享受到快乐呢？第一，入世和出世要分开，不要让世俗的东西打扰到你的内心世界，你的情绪不应该为别人所控，也不应该被世俗所污染，活得真实，你才会快乐。第二点就是要有热情，有了热情，你的心情就会很好，加班都可以是快乐的，想一想我们整个通宵用来打游戏的时光，虽然很累，但是你也很开心，这都是因为有了热情的缘故。
我承认我活在我的精神家园里面。我推荐大家看一下王小波的《我的精神家园》，这篇文章对我的影响非常大。看了这篇文章，你就会明白我为什么要躺在自己的池子里，如果不想被这个社会所污染，就必须要躺在自己的池子里。做大众是很容易的，做自己是最难的。当你老了的时候，回想过去，如果你是为自己而活的，你总会觉得很踏实。可能有人会觉得我偏激，没关系，为什么要所有人看法都一致呢？世界因为不同而美丽，多元化的价值观并不冲突。
最后送大家一份自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，需要看了，去网上挨个找的，最后汇总而成。
汇集了编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、设计模式、程序员数学、测试、中间件 、前端开发、后台开发、网络编程、Linux使用及内核、数据库、Redis....等主流的编程学习书籍。
这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。
我整理的这些书大家可以在这里获取，对于学习计算机的同学帮助非常大，且十分系统：
书单：
希望大家都能在编码的路上下笨功夫！！！远离996！，记得帮我 @编程指北 点个赞哟~
最后给大家分享一下计算机学习路线大全，很多同学照着这个路线学习进了拿到大厂offer
","说一个大家可能不太听过的——梁肇新。
这是百度百科上的照片，无论从发量还是气质上看都像是一个乡镇企业家，而不是一个程序员，但是这并不影响他作为中国顶级程序员的地位。
在2000年至2005年的电脑城，新配的电脑不一定会装office，但是一定会装豪杰超级解霸，而它的作者就是梁肇新。超级解霸不管多烂多花的碟，它都能够读出内容，开玩笑说丢一块石头进去它都能播出来电影，玩笑归玩笑，软件强悍的性能可见一斑。那个时代的网络营销还不发达，产品都是靠用户口口相传积累用户，一个共享软件做成装机必备可见超级解霸的成功。可惜，超级解霸没有赶上互联网的浪潮，最终被各种影音软件拍在了沙滩上。
吃到美味的鸡蛋不会去问哪只鸡下的，普通用户也不会去关心超级解霸的作者是谁，真正让大家开始知道他的还是那本铜版纸的《编程高手箴言》。那本书类比练武提到程序员的六个阶段：熟练某种语言（套路）、精通平台接口（对练）、了解底层（手中有剑，心中无剑）、深入底层（手中有剑，心中有剑）、全局设计系统（手中无剑，心中有剑）、任何问题都变成思路问题（无招胜有招）。这六个阶段应该是他的书里面传播最广泛的内容，其他的比较高深，不好传播。书的内容差不多总结了那一代不依赖互联网的程序员深研的历程，现在还值得我们去学习追随。
","能做出好产品
又能引领企业走向巅峰的人，很厉害
01.WPS之父-求伯君

求伯君，浙江绍兴人。
1988年，一个人，一年时间，写出了和微软抗争了十多年的国产办公软件“WPS1.0”。
年仅25岁，他就成为了程序员出身最富有的创业者，他的名字早已写进中国软件的历史！是那个时代最让程序员们振奋的“英雄”，无可争议的成为“中国第一程序员”！
个人历程：
1964年，出生于浙江绍兴一个贫苦农民家庭；
1984年，国防科大信息系统专业，分配到河北某仪器厂；
1986年，仪器厂辞职，加入北京四通公司；
1988年，加入香港金山公司；
1994年，在珠海创立珠海金山电脑公司；
2011年，从金山退休，副董事长雷军接任。
个人成就：
WPS之父：以一己之力写出WPS1.0，填补了我国中文字处理软件的空白；
创立了中国第一个电脑游戏《中关村启示录》；
金山之主：带领金山上市，成为当时最富有的程序员；
IT导师：金山中，走出了雷军、王峰、冯鑫、尚进等，被称之为“旧金山”的IT创业者……
民族软件导师：中央电视台《东方时空》在比尔·盖茨来中国的当天，请求伯君谈民族软件以及WPS97如何抗击Word。
评价：
雷军：写求伯君的文章虽然很多，但令人满意的还没有。
网友：走进当年的IT圈，到处都是求伯君2.0版。
02.小米-雷军
雷军，湖北仙桃人。
写过加密软件、杀毒软件、财务软件、CAD软件、中文系统，焊过电路板，干过黑客，大学四年课程两年修完，就靠开发软件成了百万富翁，业界公认的劳模。
做发布小米1.0需要拍视频，陈年、李学凌在内的一帮兄弟都为他出镜，砸掉苹果用小米。
个人历程：
1969年，出生于湖北仙桃；
1991年，毕业于武汉大学计算机系；
1992年，进入金山软件做程序员；
2010年，创办小米科技；
2011年，后接任求伯君任金山CEO。
个人成就：与同事合著《深入DOS编程》、《深入Windows编程》等书；
个人信仰：20年前我是一名软件工程师，到今天依然是！
外界评价：
求伯君：其实雷军是大家口中程序员的一个最佳典范，永远的精力充沛，时刻都想着去 build，并且能够及时的修复过程中的 bug，有着这么严谨的程序员思维，这也是他现在这么成功的原因。
猎豹CEO傅盛：雷军无论多成功，永远一副低姿态。第一次见他，他手里拿个小本，问我当时做360安全软件的成功经验，我说什么，他就用笔都记下来。
03.百度-李彦宏
李彦宏，山西阳泉人。
学霸级的人物，持有“超链分析”技术专利，甚至奠定了现代搜索引擎的发展方向。
年少钟爱戏曲，一度被剧团相中，但在中学时还是回归课堂，以阳泉市第一名考上北大！
个人历程：
1968年，出生于山西阳泉，他在家中是五个孩子中的唯一男孩，少年时钟爱戏曲，曾被剧团录取；
1991年，毕业于北大信息管理系，随后赴美完成计算机硕士学位；
1994年，进入华尔街道·琼斯公司，担任金融信息系统设计工作；
1997年，进入硅谷著名搜索引擎公司Infoseek(搜信)公司；
2001年，回国创立百度；
2011年，成为大陆地区的首富。
个人成就：
曾经为道.琼斯公司设计的实时金融系统，仍被广泛地应用于华尔街各大公司的网站；
最先创建了ESP技术，并将它成功地应用于Infoseek/http://GO.COM的搜索引擎中；
拥有“超链分析”技术专利，是奠定整个现代搜索引擎发展趋势和方向的基础发明之一。
（李彦宏称之为搜索引擎第二定律，利用检索关键词在一篇文章中出现的频率多少进行网页排序的技术，被称为第一定律）
个人信仰：
技术本身并不是唯一的决定性因素，商战策略才是真正决胜千里的因素。
外界评价：
合伙人徐勇意：李彦宏不仅有技术背景，还对商战有敏锐的直觉和出色的判断。
网友：做为一个技术人，他曾经非常优秀；做为一个商人，他有很高的“觉悟”。
做出最好产品的人
很厉害
04.微信-张小龙
一个孤独的人，生命中只有音乐、网球和代码。每当有争论，都是张小龙以长时间的沉默来结束。
个人历程：
1969年，出生于湖南省邵阳市；
1994年，华中科大电信系硕士毕业，随后在广州一家互联网公司工作，业余时间开发出Foxmail；
2000年，张小龙以1200万元的价格把Foxmail卖给博大公司，并任公司副总裁；
2005年，腾讯收购Foxmail软件，张小龙“陪嫁”到腾讯公司。
个人成就：
利用业余时间，独立开发出Foxmail，以1200万元被博大收购；
为对抗雷军“米聊”，带领13人仅用一个月上线微信，不到两年爆发2亿用户。如今微信估值8000亿，是支付宝的两倍。
个人信仰：
我说的是错的！
外界评价：
柳传志：做微信的那个小孩张小龙，确实做得漂亮，我没见过，据说也是比较宅的人。
好友和菜头：张小龙是一个生性孤独的人，烟瘾很大，“是广州深夜里最大的Kent消费者”。
05.腾讯-马化腾
不管他愿不愿意，几乎所有互联网公司，都曾向他宣战！
做过5年程序员，但真正赚到人生第一桶金却是从炒股开始，最精彩的一单是将10万元炒到70万元。
个人历程：
1971年，出生于广东汕头一个小村子；
1993年，毕业于深圳大学，主修计算机及应用；随后进入深圳润迅通讯公司，专注寻呼机软件开发；
1998年，与张志东一起创立腾讯；
2004年，腾讯在香港交易所主板挂牌上市；
2018年，47岁的马化腾成为全球华人首富。
个人成就：
与朋友合作开发风靡一时的股霸卡；
开发中文版的ICQ，即后来的QQ。
个人信仰：
用最笨的方式去领悟编程，用抄代码来培养感觉。
外界评价：
马云：“QQ的攻击永远是悄悄的！”
王石：马化腾能把握好底线，一个工程师控，凌晨两点发微信他还能马上就回。
敢于折腾的技术人
很厉害
06.巨人-史玉柱
史玉柱，安徽蚌埠人。
人们熟悉史玉柱，有些是因为脑白金，有些是因为巨人网络。他不仅是个成功的营销家，而且曾经是名出色的程序员。
开发汉卡赚到了人生第一桶金，又因巨人大厦转瞬欠了几个亿。人生大起大落后，还清所有债务，重新回到IT行业，现在已是网络游戏界里的老大之一。
个人历程：
1962年，出生于安徽蚌埠；
1984年，浙江大学数学系毕业，分配至安徽省统计局工作；
1989年，深圳大学数学系研究生毕业后，下海创业；
1991年，成立巨人公司，推出M－6403；
1994年，投资保健品，第一个产品是""脑黄金""，后为投资巨人大厦，几乎破产，欠债2.5亿RMB；
2000年，再度创业，开展“脑白金”业务；
2007年，旗下的巨人网络于纽交所上市，成为在美发行规模最大的中国民营企业；
2016年1月，带领全公司展开手游研发。
个人成就：
M-6401桌面排版印刷系统；
创业之初，一己之力编写文字处理软件，关键模块用汇编语言完成，软件代码数达到50万行。
外界评价：
网友：“负债过亿，东山再起的故事，注定也是中国商人史上最为“成功”的失败样板。”
新浪网：”绝对是当今中国商界最具争议和最具传奇色彩的人物。
坚定理想主义的人
很厉害
07.搜狗-王小川
王小川，四川成都人。
一个成功地由顶尖技术人才转型为全面的管理者，带领搜狗，快速成长为中国用户量第三的互联网公司。
个人历程：
1978年，出生于四川成都；
2003年，清华大学计算机研究生毕业；
1999年，兼职加入初创的ChinaRen公司（中国最大的校友录网站）
2000年，搜狐收购ChinaRen，王小川进入搜狐公司；
2003年，正式加入搜狐，任高级技术经理；
2005年，晋升为搜狐公司副总裁；
2010年，搜狗CEO。
个人成就：
使用分词技术，使 ChinaRen 成为当时第一家能通过“机器自动生成相关新闻内容”的网站。
个人信仰：
像老板一样思考，像员工一样工作
外界评价：
张朝阳：小川在少年时期就是计算机的天才。
网友：也只有王小川这种具有「钝感力」的创业者才能够坚持下来，花好几年，一级一级组建自己的产品架构。
08.今日头条-张一鸣
张一鸣，福建龙岩人。
从着装到谈吐都特别“不文艺范儿”，用他的口头禅来说：“实用，是第一重要的。”
想挖人时，会拿出计算器，告诉对方如果加入今日头条收入增多少，有多少股份“如果你跟了XX，看上去是不错，但你的股价会翻十倍吗？”
个人历程：
1983年，出生于福建龙岩；
2005年，毕业于南开大学软件工程专业；
2006年，进入酷讯，一年后带着团队进入微软，没多久又到了饭否；
2012年，今日头条上线，上线仅90天，积累用户1000万；
2012年，创办字节跳动；
2016年，推出抖音；
2018年，卸任今日头条CEO。
个人成就：
创造性地将机器算法和大数据技术应用于媒体传播
2018年，字节跳动估值750亿美元，成为全世界估值最高的创业公司， 国内仅次于阿里巴巴和腾讯的互联网第三强。
个人信仰：
对于编程，更注重的是实用性，数学才是对事物之间最基础关系的描绘。
外界评价：
网友：“你似乎很难从他的身上，找到其他创业者对金钱的那种渴求，他更像是一个自由纯粹的冒险家。”
09.网易-丁磊
丁磊，浙江宁波人。
一个坐飞机头等舱，不穿机舱的拖鞋而是自带；江湖里出了名的酒量惊人，环保乐观，跑着步上班，既朴实无华又富于传奇。
个人历程：
1971年，出生于浙江宁波一个高级知识分子家庭；
1993年，毕业于电子科技大学，毕业后回老家电信局做公务员；
1995年，跳槽在skybase做软件开发；
1997年，创办网易；
2000年，网易在纳斯达克上市；
2003年，丁磊成为中国首富；
2015年，投资拍摄电影《少年班》
个人成就：
设计网易的整体架构；
和陈磊华一起研发免费邮箱系统，成为国内最早提供邮箱服务的公司
个人信念：
勇于“归零”
外界评价：
网友：“丁磊是一个有着浓重复旦情结的人，注定又是一个理想主义者。”
不为外界所动的人
很厉害
10.奇虎360-周鸿祎
周鸿祎，湖北黄冈人。
曾对着一张印有键盘的纸张，敲敲打打，因为没见过真正的计算机。
他叛逆、口不择言，不忌惮与人剑拔弩张，被封为“流氓软件”之父。
他曾说：“我觉得除了百度和腾讯，以及他们的打手，都是我们的朋友。”
个人历程：
1970年，出生于湖北；
1995年，西交大管理学院硕士毕业；
1995年，就职方正，从普通程序员一路提任至总经理；
1998年，创建3721公司，6年后被雅虎以1.2亿美金收购；
2004年，任雅虎中国总裁；
2006年，创建360公司；
2016年，带领360从纽交所退市，完成私有化；
个人成就：
推出了3721“网络实名”，开创中文上网服务之先河；
创办360，成为免费安全之父。
著书：
《智能主义：未来商业与社会的新生态》
《周鸿祎自述:我的互联网方法论》
《颠覆者：周鸿祎自传》
个人宣言：
要成为一个合格的程序员，怎么也要写个10万到15万行以上的代码。如果连这个量级的代码都没有达到，那说明你还不会写程序。
外界评价：
网友：“也许周鸿祎是中国互联网界最像乔布斯的人。一方面有着特立独行的叛逆思维，另一方面也有对产品的极致完美追求，还有他不满意时就口不择言的直率。”
11.点击科技-王志东
不了解王志东的人觉得他放弃了软件，而后又被网络所抛弃。
但了解王志东的都知道他最钟爱的还是软件，而且现在他同时拥有了网络。
个人经历：
1967年，出生于广东东莞；
1988年，毕业于北大无线电电子学系；
1989年，特邀进入北大计算机技术研究所；
1993年，任四通利方总经理；
1998年，创建新浪网；
2000年，新浪纳斯达克上市；
2001年，王志东被迫离开新浪网，同年创立点击科技。
个人成就：
用时7个月，研发出“中文多窗口图形支撑环境”；
用时一年，独立完成国内第一个实用化Windows3.0中文环境——BDWin3.0，一度引起各界震惊。
外界评价：
网友：“现在的新浪和王志东显然是没什么联系了，但是唯一可以确定的是他最爱的还是开发、是软件。”
张朝阳：“他不够敏感，对于到眼前的危险、对腹背受敌的处境不够敏感。”
12.创新工场-李开复
从唯一历任苹果、微软、谷歌、高管的华人职业经理人、IT界黄埔军校的校长、大学生导师、创业者之父、抗癌战士到人工智能布道者，李开复的身份一直在变化。
但始终未变的，是他在语音识别、人工智能、三维图形及网络多媒体等领域，享有的声誉。
个人经历：
1961年，出生于台湾，现移居北京；
1972年，赴美国读中学；
1983年，哥伦比亚大学计算机科学系毕业；
1988年，获得卡内基梅隆大学计算机系博士；
1990年，任苹果公司全球副总裁；
1998年，加入微软公司，创立微软亚洲研究院；
2005年，加入Google，任全球副总裁兼中国区总裁；
2009年，创办创新工场，曾被《麻省理工学院技术评论》评为“最火的计算机实验室”；
2013年，患淋巴癌。
个人成就：
运用统计学原理开发出世界上第一个“非特定人连续语音识别系统”，把语音识别率从40%提升到96%，当年被《商业周刊》授予“最重要科学创新奖”；
著作：
《做最好的自己》
《微博：改变一切》
《与未来同行：李开复文集》
《一网情深与学生的网上对话》
《世界因你不同：李开复自传》
《向死而生：我修的死亡学分》
外界评价：
创新工场创始人之一王肇辉：“李开复既能够在四合院和人喝茶吃花生米,也能在五星级酒店和外交官喝鸡尾酒。”
在技术领域
有的人，凭一己之力
开发出了几千人使用的开源软件
有的创造了网络的神话，至今为传诵
有的授业解惑，或教室、或出书、或博客
他们影响了一批又一批的后来者
他们的名字经常被提起
这是一群对技术有着最纯真热爱的人
非科班出身的大牛：
01、阿里-蔡景现
蔡景现，一个更广为人知的名字是--“多隆”。
他是阿里巴巴初创团队三名工程师之一，在一个月之内，从零起步搭建起了“淘宝”。
非科班出身的他被称“码神”，又称“阿里扫地僧“。
个人历程：
1976年，出生于浙江苍南一个农民家庭；
2000年，从杭州大学生物系硕士毕业，加入阿里；
2014年，成为阿里合伙人；
2017年，41的他以26亿身家登上胡润财富榜。
技术成就：
对于技术，既懂C/C++，又懂Java内核；
既可以深入技术底层，又能切入到高层业务领域，
从前端到后端，独自维护淘宝搜索引擎长达5年。

个人魅力：
突然得知成为阿里合伙人时，蔡景现当场蹦出一句“让我当合伙人？可我只会写代码啊！”只会写代码的纯粹，让他全票通过合伙人票选！
评价：
阿里CTO张建锋：“多隆（蔡景现）做事一个人能顶一个团队。
02、MegaEase-陈皓
江湖人称""浩哥/耗子哥""，对新手总是热心的帮助，一位百科全书类的前辈。
个人历程：
大学毕业进入云南工行，不满体制内的缓慢困滞，两年以后去了上海。
由于技术不够，面试时遭遇羞辱，于是疯狂学习，专注底层，C++，JAVA，UNIX/LINUX 等，后成为大牛！
个人成就：
曾于Amazon中国任研发经理；
曾在阿里巴巴北京研发中心任资深专家一职；
曾在阿里巴巴核心系统专家组，从事阿里云ECS相关的虚拟化平台的开发工作；
现为MegaEase创始人，为企业的高并发高可用架构，提供一整套的技术解决方案和产品。
个人魅力：
“我不是高手，我也不是牛人，我只是在跟随着我的兴趣和喜好去学习一些技术。”
网友评价：
“他是一个对技术和生活都有非常深地思考的人，很多观点都能让人醍醐灌顶。”
03、阿里-阮一峰
上海财经大学世界经济博士研究生，自学网站制作，依靠自己对技术的热情，不断学习钻研，成为一名IT业内专家，也是中文互联网上的知名blogger。
不仅热爱技术还热爱写作，同时还热衷于开源。
学经济学的人里写博客最好的，写博客的人里写IT技术最透彻易懂的！
个人历程：
2008年取得上海财经大学经济学博士；
毕业后当了老师，任教于上海金融学院；
2014入职阿里巴巴。
个人成就：
译著：
《黑客与画家：硅谷创业之你Paul Graham文集》
《软件随想录：程序员部落酋长Joel谈软件》
《异常流行幻象与群众疯狂&困惑之惑》等
博文在网上的权重很大，IT系列教程影响了极大一批初入编程的小白！
评价：
“他像是一个我从未谋面的引路人，过褒或过贬，都是不客观的！”
""喜欢阮一峰并不是因为他有多厉害，而是因为他不停的学习，乐于跟我们分享。他写的博客总是通俗易懂，对于我们这些小白来说是很珍贵的财富""
学术界大牛
04、清华-姚期智
姚期智，世界著名计算机学家，应该说是一位非常重量级的“程序员”。他是唯一 一位获图灵奖的华人。
在伪随机数生成、密码学和通信复杂度多个领域，都做出了巨大的贡献。
与第一位获得诺贝尔奖的华人一样，姚期智在此之前是美籍华人，2017年才恢复了中国国籍。
个人历程：
1946年出生于上海，幼年跟随父母到台湾，以麻省物理学博士身份转攻计算机。
2000年，获得计算机界最高荣誉“图灵奖”；
2004年，归国任教于清华大学，创建姚班、智班。如今71岁高龄的姚期智，致力将半生心血付于年青的学生们身上。
技术成就：
创建了理论计算机科学的重要次领域：通讯复杂性和伪随机数生成计算理论；
奠定了现代密码学基础，在基于复杂性的密码学和安全形式化方法方面有根本性贡献；
解决了线路复杂性、计算几何、数据结构及量子计算等领域的开放性问题并建立全新典范。
评价：
“姚先生是这个时代的科学诗人，他身体力行教会我如何欣赏科学的美，如何创造美好的科学，如何许诺用科学，带领人类走进一个更美好的时代。”
05、Vue.js-尤雨溪
江湖流传一个小故事：
一款名叫Clear的软件，在正式推出的第一天，就登场了Apple Store付费榜和总榜第二。
而身在美国的中国留学生尤雨溪，仅仅花了两天的时间，就copy出了一个html5版的Clear，并且放出了源代码。
个人历程：
出生于江苏无锡，在上海读完高中后，2005年到美国主修艺术史，硕士主修美术设计与技术，开始慢慢接触编程。
毕业后曾就职于 Google Creative Labs 和 Meteor Development Group。
由于工作中大量接触开源的 JavaScript 项目，最后自己也走上了开源之路，现在全职开发和维护 Vue.js。
技术成就：
一己之力打造Vue.js框架；
构建了Web界面的Javascript库。
网友评价：
“尤雨溪做出了近几年最火的前端框架Vue.js，是开源世界华人的骄傲。”
创业者中的技术牛人
06、第四范式-戴文渊
信息学世界冠军，让“人工智能”不再冷门的时代领袖 ，他的身上光环无数。
曾经获得上海交通大学校长奖、吴文俊人工智能科学技术创新奖一等奖、《财富》中国 40 位 40 岁以下商业精英、MIT 35 位 35 岁以下科技创新杰出精英。
个人历程：
江苏苏州人，1983年出生，1991年，在苏州古城区读小学二年级的戴文渊，考了三次数学全班第一后，加入计算机兴趣小组。
10岁开始写logo语言，学习C语言。
在上海交通大学就读期间，带领三人团队夺得了ACM世界冠军和三个亚洲冠军，并担任ACM竞赛教练指导学生多次获得亚洲冠军。
交大没有人工智能领域的老师，戴文渊被送到了港科大，师从杨强教授
个人成就：
2007年发表的论文Boosting for Transfer Learning在迁移学习领域论文引用数至今排名世界第三；
全世界首个提出“非监督迁移学习”概念的人；
开创了“非监督迁移学习”这一重要研究方向；
此外，他也首次提出了“翻译学习”（即“跨领域迁移学习”）和“迁移学习通用框架”等...
2014 年，戴文渊和他的老师杨强成立“第四范式”，帮助企业提升效率、降低风险，获得更大的商业价值。
评价：
港科大学杨强教授：“戴文渊是全世界最优秀的青年学者之一，是产业界、特别是中国产业界 AI 落地的杰出代表，对人工智能领域的发展帮助极大。”
07、教主-楼天成
姚期智得意门生，公认大学生计算机编程第一人。
有这么一个笑话，在编程界输入“教主”，会立即输出 “楼天城”。
在程序猿界，其他人可以称得上牛X，但被冠以传奇之名的只有一个 ——「楼教主」
个人历程：
1986年出生于杭州，因为数学太差，所以选择计算机编程，高中后开始屡屡获奖，2004年保送清华大学计算机系。
个人成就：
2006年，TopCoder（世界顶尖程序员）排行榜全球第三，中国区第一名；
2008、2009 年，Google Code Jam （谷歌全球编程挑战赛）冠军；
2012年3月18日，Facebook黑客杯」名列第三；
2016年创立无人驾驶公司小马智行（PonyAI），剑指L4级无人驾驶；获得中国自动驾驶创业公司最高估值。
评价：
“只要有楼天城参加的比赛，别人就只能想着怎么拿第二。”
“他是未来推动中国互联网产业发展的中流砥柱”--李开复
08、OpenResty -章亦春
江湖人称“春哥”，编程之路起于看不懂而抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法。
创立的OpenResty开源社区，获得了锤子科技一百万的捐赠。
个人历程：
江苏镇江人，1999年，初中的章亦春第一次接触《C 语言程序设计》靠手抄自学编程，进入江苏大学后，一发不可收拾的迷恋上开源世界。
结束淘宝量子统计的工作后，全心从事 OpenResty 等开源项目的工作；
2017年，在美国创办了 OpenResty Inc. 公司。
个人成就：
OpenResty的创造者（OpenResty ：开源的 Web 平台，用于开发高性能和高动态的 Web 网关或者 Web 应用。）
评价：
“这是个不需要技术圈“网红”捧的务实大牛。一个牛逼的好人。是我见过的最Geek的工程师。”
09、无线专家-陶建辉
国际顶尖无线数据专家，连续创业者，写了34年的代码，如今50多岁，依然写代码。
个人历程：
湖南长沙人，出生于1968年，初中时手拿一本《Basic语言编程》，从此走上编程之路；
1986年，考入中科大，认为计算机太简单而选择力学系；
1994年，美国印第安纳大学攻读天体物理博士；
1997年起，在美国从事无线互联网的研发工作；
2015年荣获全国优秀无线互联网专家称号；
个人成就：
2008年创办和信，专注移动互联网IPPush和IP实时消息服务，2010年和信被台湾联发科收购。
2013年创办快乐妈咪，专注母婴智能硬件和母婴健康服务，2016年初快乐妈咪被太平洋网络收购。
2017年创办涛思数据，专注时序空间数据的实时高效的处理（存储、查询、计算等），研发出性能明显超越业内标杆产品的TDengine，可广泛运用于物联网、车联网、工业大数据、金融等领域。
评价：
51岁的陶建辉是圈子里名副其实的“老炮儿”，把物联网技术，做成了业界无法忽视的开源生态。
企业中的技术大牛
10、链家-惠新辰
一个在网上搜PHP教程的初学者，华丽转身，成为PHP开发组核心成员，php开源组织中国唯一成员。
人称“鸟哥”，PHP NG核心开发者，PHP5.4，5.5的主要开发者。
个人历程：
陕西人，1998年，高中时期着迷网络，在网吧做网管，后被父母勒令退学。后来考上西安交通大学，调剂到计算机专业。
研究生调剂到北京国际关系学院，信息安全专业硕士毕业。
2006年第一次面试雅虎被拒，由此开始在技术上发力学习。
后来担任Zend公司外聘顾问, 任职百度、新浪，现任链家网技术副总裁兼总架构师。
个人成就：
PHP7的核心开发者，PHP5.4，5.5的主要开发者；
作为PECL开发者，贡献了Yaf ( Yet another framework )，Yar ( Yet another RPC framework ) 以及 Yac ( Yet another Cache )、 Taint 等多个优秀开源作品；
同时也是APC，Opcache，Msgpack等项目的维护者。
评价：
“PHP继父”
11、LVS作者-章文嵩
他是中国计算机产业界技术大牛，国防科大六院90级校友，是国防科大的传奇人物，努力推行开源，堪称中国开源第一人。
个人经历：
生于1973年，少年时痴迷于游戏，后考入于国防科大计算机系；
原TelTel公司的首席科学家，ChinaCluster的共同创始人、阿里云CTO，花名为正明；
2016年，离开阿里巴巴加盟滴滴；
现任滴滴高级副总裁、
中国计算机学会技术前沿委员会主席。
个人成就：
LVS（Linux Virtual Server）创始人；
沉淀了CDN、TFS、Tair、Tengine、MySQL、JVM、Linux内核、图像搜索等技术和产品。
评价：
“他有技术人员的气质，也有一些文人的感觉。”
12、阿里云-陆靖
ACM世界冠军，为人十分低调，公司内号称“人肉逻辑机”
不调试，一遍一遍看代码，就能指出某行代码有错误；
爱看日漫，为此自学日语，最后能参与字幕组做翻译。
中间持奖杯者为陆靖
个人经历：
为人太低调，找不到资料
评价：
开挂一般的存在、史上最强大脑、逆天宅男。
最后一位，搞网络安全的牛人
13、黑客-龚蔚
上海人，是中国最早黑客教父，绿色兵团创始人，计算机信息管理专业毕业。
其创建的绿色兵团注册成员最高达数万人，高手云集，可以说，那是中国黑客江湖大一统的时代！
个人历程：
大学时偶然接触到了中华学习机，苦求游戏破解方法时，看到台湾黑客coolfire（林正隆）的8篇黑客技术文章，从此走上黑客高手之路！
个人成就：
绿盟创始人，2001年中美对攻领导者之一，红客运动发起者。
每当中国被欺负，只能发表“严重谴责”时，红客们便开始了自己的反抗：将红旗插到DI GUO主义的每个网站头上。
个人魅力：
二十年前，是一个大侠，江湖里真正的大侠。不会轻易出手，但是一出手必会撼动江湖。
网友评价：
“近二十年里，龚蔚始终不变的，是追求无限可能的理想主义者，是一名真正的黑客。”
————————————————
版权声明：本文为CSDN博主「微笑很纯洁」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/ityouknow/article/details/101444059
","江湖流传一个小故事：
一款名叫Clear的软件，在正式推出的第一天，就登场了Apple Store付费榜和总榜第二。
而身在美国的中国留学生尤雨溪，仅仅花了两天的时间，就copy出了一个html5版的Clear，并且放出了源代码。
2014年2月，开发了一个前端开发库Vue.js。没错，现在就是前端在广泛使用的Vue框架！Vue.js一经发布，就受到了很多人的追捧，可以说Vue.js就是人们苦苦寻找的那个好用的前端框架。
后来的尤雨溪在patreon进行了众筹，因为他希望自己可以全职去开发Vue.js。众筹的效果是非常满意的，每个月他几乎可以收到1万美元的赞助。
因此他将全部精力都投入到了Vue.js的开发和推广上面，他经常参加各种JS交流大会，分享Vue的开发经历，分享使用Vue进行开发的技巧和方法。很多国内的大公司还有小公司都开始使用Vue了，Vue.js在他的带领下，正在茁壮成长。
不过尤雨溪曾经发过一条推特，表示自己全职做Vue以后，赚了上千万人民币，真是厉害。
看到这条消息，这只能用一句话来表达我的心情了：
蔡景现，一个更广为人知的名字是“多隆”
他是阿里巴巴初创团队三名工程师之一，在一个月之内，从零起步搭建起了“淘宝”。
非科班出身的他被称“码神”，又称“阿里扫地僧“。
对于技术，既懂C/C++，又懂Java内核；
既可以深入技术底层，又能切入到高层业务领域，
从前端到后端，独自维护淘宝搜索引擎长达5年。
他是阿里巴巴新增的三位合伙人之一。阿里CTO张建锋这样评价他：“多隆（蔡景现）做事一个人能顶一个团队。
在内网的标签上，他被称为神，这不是恭维，在所有工程师眼中，他就是个神。多隆做事一个人能顶一个团队，比如说写一个文件系统，别人很可能是一个项目组，甚至一个公司在做，而他从头到尾都是一个人，在很短的时间内就完成了。
多隆拥有着程序员所特有的钻研精神，多隆很喜欢写代码，彭蕾在解释为何他能入选合伙人时说，“很傻很天真，多隆写代码可以写到入定的状态”
多隆一个人负责了淘宝第一版上线，自此，他的技术水平也突飞猛进，为了解决项目问题，他经常得在半夜爬起，去解决问题，排除故障。
“编程是一个技术活，只要练的足够多，就能熟能生巧。”
像多隆一样，我们只要多做项目，做学习，也总有成为技术专家的一天。
顺带推荐一下，我用时一个多月帮同学们搜集的学习资源。总是有同学问我有没有什么资料推荐学习，索性全网大搜罗了一下，用时一个多月。帮大家搜集了3T的资源，包括计算机专业46个方向入门、进阶、实战的视频和电子书都有，有的都是靠买的，视频、资料、源码都有，大家可以去学习，记得帮我点赞就好
江湖人称""浩哥/耗子哥""，对新手总是热心的帮助，一位百科全书类的前辈
陈皓，网名左耳朵耗子，酷壳http://coolshell.cn博客博主，文章篇篇经典，强烈推荐大家去看看。
17年以上软件从业经历，擅长底层技术架构，曾在汤森路透、亚马逊、阿里云等公司就职，目前创业中。
他很谦虚，他说“我不是高手，我也不是牛人，我只是在跟随着我的兴趣和喜好去学习一些技术。”
而我觉得，他是一个对技术和生活都有非常深地思考的人，很多观点都能让人醍醐灌顶。如果你看过他的文章，想必你也会喜欢上他。
上海财经大学世界经济博士研究生，自学网站制作，依靠自己对技术的热情，不断学习钻研，成为一名IT业内专家，也是中文互联网上的知名blogger。
不仅热爱技术还热爱写作，同时还热衷于开源。
学经济学的人里写博客最好的，写博客的人里写IT技术最透彻易懂的！
想必学习前端的同学，对他并不陌生。他的文章随处可见，我当年学习前端就是跟着他的博客来学的。他的博文在网上的权重很大，IT系列教程影响了极大一批初入编程的小白！
他的译著有：
《黑客与画家：硅谷创业之你Paul Graham文集》
《软件随想录：程序员部落酋长Joel谈软件》
《异常流行幻象与群众疯狂&困惑之惑》等
江湖人称“春哥”，春哥的编程之旅起于抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法。
春哥先后在中国雅虎、淘宝、Cloudflare 就职，但开源世界是他如一的眷念。
如今，春哥已全身心投入 OpenResty 的崭新蓝图，期待 OpenResty 未来能在工业界、互联网行业引领“机器编程”革命。
有兴趣的小伙伴可以看下图灵社区对春哥的专访，详细记录了春哥的成长和心路历程。
ACM世界冠军，现就职阿里云，为人十分低调，公司内号称“人肉逻辑机”，他做事不轻易动手，深思熟虑，鲜有编译错误。
遇到搞不定的代码找他时，他就看代码，不调试，一遍一遍看代码，然后指出某行代码有错误。人们都觉得他看代码的时候大脑其实就是多核CPU，在一次又一次的运行代码。
网上还流传着有关陆靖的传奇故事：
某次代码遇到bug，良久无策。一个同事打电话问他，他在电话里说：”你们检查下某个cpp文件的780行左右，是否参数传递有问题，一查果不其然，问他是否在电脑边，他说不在，在肯德基吃饭，众人大惊之下去git blame，发现这代码他8个月前提交过。特别聪明的本身少见，特别聪明而且记忆力超强的更是凤毛麟角“
Common Lisp 程序员，号称中国Lisp第一人，网名“冰河”，人称伞哥。
我不想多介绍伞哥的成绩，我只想说一说网上流传的一些奇闻轶事，如此牛人，可见一般
伞哥，大名田春。在网易从事MIS相关工作，在业内有极高的声誉。
伞哥每天一身白衣，拿一把伞。他对网易内部的人说，伞是法律允许的最长的防身武器。一身白衣是他妈妈亲自给他做的。
伞哥性格比较古怪，他坐在丁磊办公室旁边，经常冲进丁磊的办公室，拔掉丁磊的iphone，然后把自己的插上。
后来，网易内部需要开发一套办公区wifi的系统，伞哥自告奋勇承担并且开发出来了，在公司内赢得了好评。于是伞哥走进丁磊的办公室说，这套系统找华为做要20万美金，我不找你多要，给我20万人民币就可以了。丁磊气急，直接找到他的直接领导说，你的员工怎么这样。
然后后来又一次，伞哥又做了一些东西，又找到丁磊，说，上次只有20万美金，我不跟你计较了。这次开发的这套东西能卖200万美金。至此，丁磊坚持把伞哥开除掉了
哦对了，补充一下，伞哥离开网易的时候。部门全体人员请他吃了一顿饭。于是他走的时候说，我不会怀念网易，只会怀念这些战友。我不会再回到网易，下次回来，就是我收购网易的时候


","ACM竞赛界yyds——楼天城，本ACM选手永远仰视的存在。
他参加算法比赛的时候，这个世界上就没有能干得倒他的人，任何比赛都是第一名（只要他参加）。中国公认的大学生计算机编程第一人，经常以一人单挑一个队，在CEOI、ACM界无人不晓其大名，人称“楼教主”。
晒一下履历：
参加ACM比赛的时候，他的队友都是其他的 IOI 金牌，但是基本没他们事儿，他一个人单挑，ACM是3人团队赛，但是基本上有他的队伍，其他两个人只要负责读题，安静的做个翻译就好了……
最可怕的是，人家并不是个只会做题的大佬，其他方面也强得一批：
你梦寐以求的外企（Google、Facebook）他想进就进，百度T10、自行创业，可以说你这辈子可能都难经历过一回的事情，他全都经历了一遍。
说个小彩蛋，我们九章算法的令狐冲老师是2006年国家集训队的，而楼天城是2004年国家集训队的，令狐冲老师在参加acm比赛的时候还请他面授过：） 也是ACM金牌选手，并先后入职了Airbnb和FB，当然和大佬比还差得很远。
最近我们令狐冲老师还出了一套（虽然与打acm比赛毫无关系，甚至acm选手看了都想笑，）但很适合夯实算法基础、一个月时间突击备战求职面试的题目，看这里：
考察情况
考得很多，主要注重代码实现能力，算法上没有太多难点，通常是处理麻烦。
学习难度：★★
最少刷题数：20
必刷题目：
1.字符串查找
2.最长回文子串
3.有效回文串
4.单词拆分I
5.正则表达式匹配
6.旋转字符串
7.解码方法
8.至少K个不同字符的子串
9.字符串查找II
10.全零子串的数量
11.最长公共子序列
12.编辑距离
13.第一个只出现一次的字符
14.乱序字符串
15.Excel表列标题
16.一次编辑距离
17.删除无效的括号
18.单词的添加与查找
19.基础计算器
20.比较字符串
考察情况
高频算法之王，变形特别多，算法不算特别难，但能快速想到和写好不容易。
学习难度：★★★★
最少刷题数：20
必刷题目：
1.颜色分类
2.两数之和 III-数据结构设计
3.排颜色
4.最长子串覆盖
5.有效回文
6.带环链表
7.交错正负数
8.最接近的三数之和
9.四数之和
10.接雨水
11.寻找重复的数
12.字符大小写排序
13.子串字谜
14.检查缩写字
15.奇偶分割数组
16.三数之和小于
17.移动车棚
18.粉刷天花板
19.装最多水的容器
20.目标移动
考察情况
考察频率中等，能写好写对不容易，二分答案的问题甚至很难想到算法，要背模板。
学习难度：★★★★
最少刷题数：10
必刷题目：
1.经典二分查找问题
2.搜索旋转排序数组
3.寻找峰值
4.最长上升子序列
5.木材加工
6.书籍复印
7.加热器
8.地图跳跃
9.寻找单词
10.分享巧克力
考察情况
考察频率中等，一般和二叉树一起出现和考察，题一般不难。
学习难度：★★★
最少刷题数：10
必刷题目：
1.子集
2.数组划分
3.验证二叉查找树
4.全排列
5.克隆图
6.排颜色
7.子数组之和
8.LRU缓存策略
9.单词接龙
10.单词拆分I
考察情况
考察频率高，实现一般都不难。
学习难度：★
最少刷题数：5
必刷题目：
1.岛屿的个数
2.序列重构
3.拓扑排序
4.课程表
5.买卖股票的最佳时期
考察情况
考察频率高，主要是考递归会不会写。
学习难度：★★★★★
最少刷题数：20
必刷题目：
1.子集
2.图是否是树
3.子数组之和
4.电话号码的字母组合
5.K数和
6.因式分解
7.N皇后问题
8.子模式II
9.寻找丢失的数II
10.二叉树的最小深度
11.最小路径和
12.数字组合II
13.下一个排列
14.分割字符串
15.恢复IP地址
16.删除无效的括号
17.数独
18.单词矩阵
19.组合
20.左叶子的和
动态规划 Dynamic Programming
考察情况
国内大厂基本都考，北美主要是G/F喜欢考，其他公司考得少。
学习难度：★★★★★
最少刷题数：50
必刷题目：
1.栅栏染色
2.爬楼梯
3.约翰的后花园
4.单词拆分
5.书籍复印
6.解码方法
7.通配符匹配
8.旅行商问题
9.青蛙跳
10.骰子求和
拓扑排序算法 Topological Order
考察情况
考察频率中等，但每个公司基本都有一个这个算法的题。
学习难度：★★★
最少刷题数：3
必刷题目：
1.序列重构
2.外星人字典
3.拓扑排序
链表 LinkedList
考察情况
中小公司考得多，大公司近年来考得少，题目一般不难，主要考察Reference。
学习难度：★★
最少刷题数：20
必刷题目：
1.合并k个排序链表
2.带环链表
3.翻转链表
4.两个链表的交叉
5.链表划分
6.重排链表
7.回文链表
8.加一链表
9.奇偶链表
10.两数相乘
二叉树 Binary Search
考察情况
中小公司考得多，大公司近年来考得少，题目一般不难，主要考察Reference。
学习难度：★★
最少刷题数：20
必刷题目：
1.二叉树的后序遍历
2.二叉树的所有路径
3.根据前序和后序遍历构造二叉树
4.对称树
5.找出树中每行的最大值
6.寻找重复的子树
7.BST中第K小的元素
8.具有最大平均数的子树
9.最小路径和
10.二叉树的右视图
堆 Heap
考察情况
高频，经常会用到，原理必须掌握，但不用掌握代码实现，应用必须掌握代码。
学习难度：★★★
最少刷题数：5
必刷题目：
1.丑数
2.堆化
3.滑动窗口的中位数
4.大楼轮廓
5.超级丑数
哈希表 Hash Table
考察情况
高频，应用和原理都需要掌握且需要掌握代码实现。
学习难度：★★★
最少刷题数：10
必刷题目：
1.两数之和
2.最长回文串
3.两数组的交集
4.数据流中第一个唯一的数字
5.两数和 II-输入已排序的数组
6.单词接龙
7.有效回文串
8.尾部的零
9.跳跃游戏
10.数字三角形
并查集 Union Find
考察情况
考察频率中等，主要是G/F可能会考，不会的话很多时候可以用BFS替代。
学习难度：★★★
最少刷题数：3
必刷题目：
1.账户合并
2.打砖块
3.团队通知
现在令狐冲老师的春招公益讲座《FB面试官揭秘算法面试速成技巧 - 怎样做到 Bug Free 和刷100题等于别人刷300题》已经上线，讲座中会教授各种刷题技巧、算法面试的考察情况等，感兴趣的小伙伴不妨一起来交流学习下~
还有像是唐文斌，龙凡，杨沐，王小川，陈启峰，范浩强，陈立杰，陈丹琦，也都是水平超高的大佬，这里就不一一列举了，欢迎各位补充~
","更新一下，我希望大家不要点赞了，我只是转述一下，不值得被点赞，被点赞的应该是他们
------------------------------------
LVS作者，章文嵩博士，不用多说了吧，有多少人的代码能进Linux内核呢？
淘宝霸爷，我以前的上司评价霸业是这样说的，霸爷是一个人脑计算机。
贴一下霸爷的博客，系统技术非业余研究 我一直是跪着看的
","中国的所有程序员中，我只彻底佩服一位，他就是云风。我跟他在同一公司工作过，越了解他日常，我就更佩服他一筹。（我骑着摩拜单车赶去公司路上还经常看到他和老婆走路去上班）

知乎有这样一个问题，云风在2001年拿5位数的月工资是什么水平？—— 在2001年的时候，丁磊邀请云风去广州加入网易，开到了10000/月，而云风是2000年的应届毕业生。
前几年，他创立的公司也被阿里收购了，可以说，他早就财富自由了。

但现在，他还工作在一线，开发国产游戏引擎，维护开源项目skynet，写着硬核的技术博客，最近的文章就是：

什么叫热爱技术啊，这就是。

相反你看看一些有了名气的程序员，他们还写代码吗？有代表的开源项目吗？还会写硬核技术文吗？
在我看来，云风才是顶级水平的程序员。
附上长发飘逸帅气的云风大佬：
各位可以去
学习一下。

学习不够的话，也可以看看山尽我的精华文章，虽然比不上云风大佬：
Tegus有人联系我做咨询，200美金一小时
我是如何靠运气在美股一分钟赚2万人民币的
一步步手写 http 底层客户端
不懂 http 协议，连 nginx 为什么这么设置都不懂
如果这篇文章说不清HTTP2的本质，那就过来掐死我吧！
我的HTTP/3学习笔记
我是怎么用纯用命令行完成所有开发工作的
Notion?Roam?OneNote? 做笔记我用Tiddlywiki
设置一下shell，每开新窗口，就看一首诗
递归的实现——循环，汇编，CPS与 y 组合子
","我读书的时候，特别仰慕两位大神：
一位是云风——吴云洋，这是一位水平非常高的前辈，当年他一毕业就被网易 CEO 的丁磊一张机票接到网易去了，担任梦幻西游的主程序，这个游戏后来成了经典，也成就了网易。我那会儿读他写的游戏库代码以及他去网易的前后的故事、他如何招人、如何创业，非常钦佩。
我上学的时候阅读风魂的代码，深有感慨，虽然代码的风格和变量命名如今看来略有稚嫩，但一个大学生可以熟练的用 C/C++ 和汇编写出流畅的程序，并且这个程序还能被商业公司使用的事迹，已经超过现在 99% 的计算机相关专业的大学生了。
风魂源码下载：
他的个人博客云风的 BLOG。
云风写了一本书叫《游戏之旅——我的编程感悟》，讲述了他学习编程的经历和成长的思考思考，书中学习技术的思路和见解值得学习。
另外一位是梁肇新，超级解霸的作者。可能新一代的同学不知道超级解霸当年在国内作为媒体播放的地位，曾几何时，超级解霸就是媒体播放工具的代名词，是 PC 用户桌面的必备软件。
梁肇新也是那个年代的技术偏执狂和 IT 传奇英雄。超级解霸及暴风影音是国内唯一能与微软Windows Media Player、Real Player 展开争夺的桌面播放器。
老前辈也写了一本书，叫《编程高手箴言》，一听这个书名就很霸气，现在没人敢说自己是“编程高手”。
我学生时代开始学的是 Web 开发，后来学 PHP、ActionScript，看了这两位前辈的图书之后，坚定了我把底层原理好好学好的信念。
用一句话勉励后来想进入软件开发的学弟学妹：
我学习 C/C++ 十多年了，目前在大厂做架构，深知新手学习 C/C++ 和基础原理知识的重要性，因此特地给 C/C++ 开发的同学精心准备了一份优质学习资料————CppGuide，内容从 C/C++ 语言、网络编程、操作系统原理到完整的项目源码分析，同时这份资料也包括 C/C++ 学习方法、推荐的阅读书籍、简历指导和求职技巧等。
原创不易，如果觉得有用，请给 @张小方 点个赞吧～

","求伯君一个人啃泡面写出来的wps为何没人提
","打包狂魔 肥貓 @
作爲 Arch Linux 的 DEV ，肥貓打的包能佔 Arch Linux 半壁江山。
然後你看
上的 commit 統計：
肥貓永遠穩居第一，超越後面 top2 ~ top 9 加起來。
（當然其中有半數是給 Arch 打包的 commit 不過還是很厲害）
肥貓說手上的計算資源太空了，不如爲科學事業做點貢獻，於是就上了 LHC@HOME 主頁：
(其它事蹟未完待續）
","必须安利一波：
蚂蚁金服研究员王益
在去年，他整40岁。从10岁开始，写代码整30年。这30年来，他当过“不务正业”的学生，创纪录地在大一就考下系统分析员，“单枪匹⻢”闯荡过从国内到硅谷的多家知名互联网科技公司，和AI领域许多传奇人物都有所交集。不惑之年对于许多工程师来说，或许已是需要焦虑的年龄，但40岁的王益在蚂蚁金服每天都过得很充实：起床，自由泳一千米，然后去做他最喜欢的事——写代码和组织大家一起写代码。
加入蚂蚁金服后，开源了两个项目：SQLFlow 和 ElasticDL
SQLFlow 好比一个“翻译机”，能将分析师们输入的 SQL 命令翻译成 Python语 言，这样一来，分析师无需学习 Python，使用 SQL 语言就能够处理数据、训练AI模型，并使用训练好的模型来回答业务问题。
ElasticDL 是一个分布式的智能学习系统。它能和 SQLFlow 一起，补足简短的 SQL 程序翻译成复杂的 Python 程序的过程中所需的信息。它的容错和弹性调度机制，能让集群的利用效率更高。
他与Code Review缘起于在Google写出的第一个程序。总共不过100行代码，却被来自美国的同事和好友提出了120行意⻅。在当时深受打击的他，在压制了情绪后，仔细去看那些意⻅，发现每一条都真诚且很有帮助。“从那一刻起， Code Review 成为了我们的工作方式。”每天和这些同事们一起coding，互相review，让中国工程师们很快知道了应当关注哪些地方，应当如何沟通合作。
他说“开源和codereview不仅是个技术问题，更是管理学问题、社会学问题，关系到如何把大家组织起来变成更高效的团队。”
更多有关王益老师的轶事，可以阅读这篇文章：

","机器学习领域的顶尖：caffe作者贾扬清，xgboost作者，mxnet主要贡献者之一陈天奇
","左耳朵耗子叔，曾经的阿里P9+，目前做了一家技术创业公司：MegaEase。
前段时间和程序员届的左耳朵耗子叔约过一次饭：
耗子叔跟我谈了他在技术层面的积累和思考，以及每一天对梦想的坚持。可以说耗子叔是一个绝顶聪明的人，但言谈中，他始终在强调的却是：每一天的笨功夫。
耗子书谈到作为技术人最快的成长方式：做最好的项目、看最经典的技术书籍，深以为然。
作为程序员的我们，虽然不一定能做最好的项目，但看最经典的技术书籍还是很轻松就能做到的。
我大学期间就是看了很多经典书籍，毕业就拿到腾讯的Offer，工作中也是保持看经典计算机书籍的习惯。
另外我把大学和工作中用的经典电子书库（包含数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，这套资源可不是一般那种网上找的资源，是伴随我从学生一路成长为腾讯高级开发工程师，360技术经理、360技术总监、中小公司CTO的打包全套，非常宝贵！点击下方链接直达获取：
我已经帮大家打包好了，点击下方链接直接获取：
耗子叔谈到他为什么离开阿里，以及离开阿里后做了一年的自由人。在这个期间耗子叔帮助饿了么、58等的公司解决服务器问题，很多时候一个团队都解决不了的事情，耗子叔凭借一己之力就搞定了。
这期间，耗子叔通过技术咨询和支持的方式，月收入轻松50万以上，再加上极客时间上的专栏收入（年售卖量过千万），月收入妥妥超百万。
但这之后，他还是选择了创业，为了做出一家不一样的公司。
耗子叔还谈到了对大公司的看法、对996的看法、对新一代程序员群体的担忧，这次约饭，真的让我受益匪浅。
耗子叔用一句话总结了996：这种行为是剥夺了程序员所有余闲时间，让程序员群体无法深度思考，也很难有未来。
耗子叔也谈到他的梦想：让每一个程序员的学习之路更轻松，也期待未来耗子叔面向程序员的在线教育产品的问世～
另外，程序员要想进大厂先从刷算法做起是个好方法，算法厉害的人进大厂非常容易，这里送一本阿里P8撰写的算法刷题笔记，身边不少朋友通过它加入大厂：
看看这本书的目录和排版，相当经典，还不赶紧看起来！
祝大家都能在程序员的道路上一马平川。
要是觉得不错的话，那就帮我
@findyi
点个赞，一键三连呗哈哈哈，半夜码字不容易（现在是凌晨1点50......）
","作为一个经常听各种国内开发者大会演讲的人，有幸见过一些国内的大佬~

贴一个Boolan顾问团队介绍的截图，我想这些人估计都是国内顶尖了：
因为我平时主要专注于C++，这里再贴一下我仰望的几个国内C++大佬：
侯捷：不介绍了，谁都认识
吴咏炜：极客时间C++专栏作者，前Intel资深系统架构师，30年开发及架构经验
潘爱民：《程序员的自我修养》作者之一，另外两个作者是潘老师的学生，前阿里首席架构师
张银奎：《软件调试》作者，相当知名的内核专家
刘新铭：编译器专家，精通编译器技术
连少华：《C++代码整洁之道》作者，资深架构师
陈硕&轮子哥：知乎上想必大家都认识
从去年年初开始写文章以来，受到很多朋友关注，我把之前写过的所有C++文章学习资料全部系统地整理成PDF电子书，可以说干货满满，可以点击下方卡片获取：
觉得不错的话，记得帮我 @程序喵大人 点个赞吧，收藏关注走一波，老铁们。
","这个我谈下个人感受：
1、做病毒的人很厉害。
陈盈豪 ，台湾鬼才，CIH 作者，极具程序员天分的少年，用当时的新闻报道来形容：看到记者全身发抖，面对电脑露出笑容 。在电脑还不是那么普及，网络还不是很发达的1998年，CIH造成全球 6000万台电脑瘫痪。厉害！
2、搞网络安全的人很厉害。
龚蔚，绿盟创始人，2001年中美对攻领导者之一，红客运动发起者，拉开了中国黑客为国争光的序幕。每当中国被外强欺负，只能发表“严重谴责”时，红客们便开始了自己的反抗。将红旗插到帝国主义的每个网站头上。
3、能做出大应用软件的很厉害。
求伯君，金山CEO，1998年，他一个人花了一年时间写出了WPS第一版，不用多说了， 向前辈致敬。
4、能流传很广的小软件很厉害
张宴，消息队列服务httpsqs 作者， 这个小应用曾经占据了几乎所有中小网站的服务器，厉害。
5、能写内核的很厉害
Axel Lin , yinghai lu ,herber xu ,这3个人是 Linux Kernel Patch Statistic 上中国排名前三的贡献者，不想太解释， 反正很厉害。
6、我们单位的小孙同学也很厉害
小孙（其实代表了广大一线开发者），去年一年的时间，写了30多万行代码，着实让我震惊，有图为证：

－－－－－－－－－－－－－－－－
今天先写到这里， 有赞的话我再继续补充。
","李可文。
高中在单片机上开发程序，获得全国科技博览会金奖。
谢绝清华保送，参加高考考取北大计算机专业。
他为人所知是在大学时，写出可以玩GBA游戏的DreamGBA模拟器，精确性和性能为当时业界GBA模拟器之最，在全世界模拟器玩家中名噪一时。
为惠普PDA移植自己开发的GBA模拟器。以当时移动设备较为孱弱的性能，全世界的GBA模拟器里只有李可文写的移植版能够流畅运行。
逝世前几个月（2003年底）还在商谈成为某投资千万的移动软件平台的技术总监。
1979年9月出生，2004年7月病逝。
"
10,被公司卸磨杀驴能把代码删除吗？,"删除代码违法，但删除代码的注释不违法。
删除代码违法，但使用奇怪的函数名不违法。
删除代码违法，但调用乱七八糟的库不违法。
删除代码违法，但加入无用的代码不违法。
","驴要明白一个道理，被卸磨杀驴后，你把面粉毁了，那买下一头驴重新磨一遍就行了。
但是你往面粉里加点脚皮屑，让老板吃，每次他吃的怪怪的，总觉得有问题，又不舍得扔了，然后一直吃。那才是最高效的报复。

","想反抗又不敢反抗的时候
可以试着加倍努力干烂活，撸起袖子加油干.....烂活
态度一定要端正，水平一定要稀烂
——
我当年实习的时候，领导敢7点之后打我电话，我就敢10点打回去向他请示
他敢10点给我打电话，我就凌晨1点给他回
","删除代码你什么也得不到，除了泄愤外屁用没有
不如在代码里埋点雷，最后还得请你回来修，要么就花大价钱重构

注释里面可以下毒，原则就是把注释写的没有参考价值，可以不按照代码实际功能来写注释，或者把注释里的参数名称调换一下，最好再夹杂大量正确的废话，增加阅读难度
活用变量闭包，闭包内外变量名称尽可能用一样的，这样整个代码就会看起来逻辑极其混乱难以分析，配合注释下毒就算尤雨溪来了都得琢磨半天
大量使用语法糖和各种简略写法，比如六七个箭头函数裹在一行里
高耦合低内聚，逼着别人必须极其谨慎的处理你的屎山
内存能不回收就不回收了，等着它内存泄漏
不写输入参数检查，只要调接口的时候参数有任何一点不对，马上崩就完事了
把关键逻辑写成一个开源库再引用的办法，引用版本号一定要写latest，离职后自己把开源库release一个会炸的新版本，等下次依赖自动升级就直接全炸

总之尽可能把你的代码写成一坨粘稠的屎山，这远比直接删代码来的更能恶心人
","首先，屎山，bug，是合法的
代码写的差是合法的
代码中引用一个你自己的库(一般情况下)是合法的
写的代码先不提交是合法的
git合并时删掉一些代码也是合法的(合并代码又冲突嘛)
写代码不考虑特殊情况也是合法的
sql不防注入是合法的
域名解析源站ip是合法的
漏洞不修是合法的
多用点停止支持的库是合法的
多写点报错自动退出是合法的，什么参数错误管他什么直接报错
判断写严格点是合法的，发现问题立刻报错而且不输出问题
不写注释是合法的
什么？公司用的是1.8的jdk？没关系，用最新的jdk是合法的，直接把编译完成的代码传上去
突然又想到一个：写前端的兄弟们，用webpack来格式化代码如何～
但你恶意删代码
1.(可能)没有效果，gitsvn直接恢复
2.如果删掉无法恢复那等着公司法务吧，违法的

兄弟们评论区不看后悔一辈子
","卧槽，你们都要埋雷给公司造成损失吗？
我当年正常写就行。
","十几年前我接私活，帮别人实施一个政务软件项目，合作方老板承诺1万的好处费。
当时环境是Windows Server，我开了远程权限，写了脚本放在计划任务里，预防对方付款上磨磨唧唧。
后来担心的事情还是发生了。
我遂告知对方删除map（map及坐标数据是我私人提供的，没备份的话删了就彻底没有了）、删除应用程序以及格式化系统os的时间计划安排。
双方电话里相谈甚欢，互相给予对方温暖问候之后，我爽快的拿到了一张中行的支票。


","劝开公司的，对各种技术人员好一点，
如果你用maya，这两年估计你遇到过，
有一个病毒，中招就会现实这个：
程序员要是泄愤，删代码并不是好主意，
在代码中加东西才是好方法。
","接过一个项目
功能很简单，但是防破解的功能我搞了一个星期
然后给对方，每次操作软件会跳出框框说免费试用15天
15天内未输入注册码的话保持调度通讯功能，但不能操作设备；
不到3天就马上打款了
","不能，这样犯法。
但是代码质量不过关是可以的。
你品你细品。
","删代码涉及到违法， 可能会被抓去啃窝窝头，得不偿失。
但是在项目里面“一不小心”留几个暗坑，或者因为“技术菜”留下大坨小坨的“屎”，相信大家都是可以理解的。

真是没想到，我居然被卸磨杀驴了。入职一家公司，转正不到一个月， 帮他们把框架搭建的差不多了，然后就没我什么事了。
这操蛋的，早知道这样应该在框架里面""拉屎""的！
一年后更。
现在没啥事，就来说说这件事。这公司估计就是招我进去帮忙搭建系统框架的，框架搭建的差不多了，卡着我工作还没满半年的时间节点把我辞退了，很爽快的给2N，谈判过程不超过5分钟。他们很清楚，我也心知肚明。
过了一两个月吧，这家公司的技术人员联系我，说框架有问题，他们实在是搞不定，希望我帮帮忙，我找了个借口敷衍过去了，没理。
随后又找我好几次，说顶不住上面的压力了，再搞不定他也要走人了。我心软了，指点了几句，告诉他解决思路。
这个问题呢，其实我是知道的(当然不是我故意埋雷的)，只不过当时忙着完善日志收集和监控系统，那个问题想着放一放，后面再抽时间解决的。
只是他们太着急了，还没完全搞完，就图穷匕见了。
","抗战的时候，游击队剪电话线的时候，剪断的时候还得再给它“接”起来，让外表看不出来。
","额。核心层用C++写的。大佬告诉我，不要用指针。然后我就把指针的星号都藏了起来…为了效率，也为了懒省事，数据交换经常用数组越界溢出的方法。全局变量和局部变量连续混用。除了我自己，别人谁都看不懂。。看懂了也不敢动。尤其是各种溢出，据我师弟说那些代码基本上都是鬼见愁的。。。
","我打的人生第一份工，就被老板卸磨杀驴了。
我的报复是：我在中午没人的时候，把干活的三台电脑都下载了一个东西，这个东西很神奇，只要一关机，就会重启，然后进入DOS系统格式化非系统盘外的所有硬盘，而且是悄摸摸的，显示器上给你显示的是在检查硬盘错误，让你别动。
公司是个广告公司，当时所有的资料都保存在那三台电脑里。
这是2001年的事儿了。
没有人怀疑是我干的。因为上午的时候断了一次电，3台电脑都非正常关机了，他们都认为是断电导致的硬盘损坏。
","学学Twitter的程序员，被裁掉又被马斯克请回来
","

","删掉干嘛？不如“加点啥”。删是一种破坏性行为，是对公司财富的侵害。而“加”是正常的工作行为，拿工资就是做这个的。
","某个前东家有一段代码，在各种机缘巧合之下，是我直接在生产环境一气呵成写完的，除我以外没人敢动，离职六年后还有人打电话过来问我细节。
真是……太高看我了，写完不到一个月我基本就忘光了
","千万不要这么干

","// 补充下，有的人说我捞，这种有问题的代码一眼就看出来了。那我就分享个我自己的事吧：
上学那会自己找的实习，开发什么智慧农业，无非是c51挂几个传感器，读到数据用lora传出去。我哼哧哼哧做了一个月，有一天主管跟我说，想看看做的咋样，让我把源码，还有搜集到的资料都压缩给他看看（小作坊没有搞svn.git这种）。
我一想不对啊，你直接看我的开发板不就行了？怕不是要卸磨杀驴吧，我就随便在几个数据采集的地方，加几个随机值，随机值名字起得挺正式，看起来就是校正值啥的，给主管发过去。
后来过几天我就被开了，某天qq收到一个人加我，说大哥我是接替你的人，用了你的程序，感觉有点不对劲啊，数值忽高忽低，他们一堆人研究好久也不知道咋回事，我说不知道啊，反正我用是正常的，主管知道的。
哦对了，那个项目还是挂在某省会的什么智能研究院下面，看似高大上，实则水的一批。
～～～～～～～～～～～～～～～～
最好不要这样做，因为员工在公司的成果，属于公司财产，删代码可能负法律责任。
不过我听说有的程序员水平太次了，写的代码烂不说，还经常搞出一些极难复现的Bug。比如说在一些不起眼的地方，加个随机数，外面还套个极小概率的if条件。
这样的程序员简直是公司之耻，我劝题主以此为鉴，多去修炼技术，少想歪门邪道。
"
11,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
12,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
13,Bug是如何产生的？,"项目：学校里的一次月考。
程序：确保学生规范答题并交卷，返回学生的分数。
教务处开始提需求：要考语文和数学，高一高二高三分开来考，根据教材出题……
考务处开始写程序：要出这些题目，给学生分配考号，派监考老师防作弊……
普通用户行为：填写自己的唯一标识符(考号)，然后答题，交卷(上传)……
爬虫：张三一天之内补考了1024次，把题库记的一清二楚。
身份验证漏洞：李四填了王五的考号替考。
DDos攻击：王六克隆了王七、王八、王九……王一〇二四把考场挤的水泄不通。
兼容问题：选择题只能用2B铅笔涂，老王用中性笔涂卡结果无法识别。
社工攻击：小明请校长喝酒，要到了试卷原题。
网络丢包：老师收卷时滑倒，试卷飞出去找不到了
性能问题：老师需要3天的时间改试卷，这3天响应速度很慢。
木马攻击：小红帮助老师改卷，实则悄悄把自己的成绩改成了100。
逻辑bug：“春眠不觉晓，_____。”既可以填“处处闻啼鸟”，也可以填“处处闻啼鸟。夜来风雨声，花落知多少”。
热更新：教务主任走进考场，告诉同学们“春眠不觉晓”后面只能写五个汉字，否则不给分。
抛出异常：改卷时发现学生字迹太丑无法识别。
异常捕获：规定看不清的字迹返回0分。

","领导：修个房子。
程序员：好的，马上开始打地基！
领导：你看那隔壁那木房子就没有打地基，不要在小事上浪费时间，一个月水平面上面什么都看不到，你kpi不要了？
这是敏捷开发。


一层房子修好。
领导：我觉得两层楼的视野好，再加一层。
程序员：可是我们没有地基，重新打地基要时间……
领导：你一楼都修好了，照着再修个一模一样二楼很难？还要很多时间？
这是高速版本迭代。

二楼修好。
领导：天天走路累死了，你再修个电梯。
程序员：可是……
领导：没什么可是的，地基不稳？就在房子边上搭个电梯就行了嘛，不稳拿根木棍撑一下，这都不懂？
这是版本优化。


电梯修好。
领导：我觉得顶楼再加个游泳池就好了。
程序员：这个结构行业翘楚的房子也不支持呀！
领导：那不正显得我们牛逼么？修快点，夏天要来了。
这是快速功能追加。



游泳池修好，看着摇摇欲坠的房子，程序员跑路了，领导找来新人继续。
领导：我觉得游泳池水不够满，你加点的，一楼光线不好你在墙上打个窗户。
新人：好的，没问题领导，马上加一桶水，马上砸墙
这是打补丁。

房子塌了，电梯倒了，游泳池垮了……
领导：真是个废物，就让他加桶水，居然能把房子弄倒了，你说这是多没用？
新人：我真的就加了桶水，我怎么知道为什么。
这是软件莫名崩溃。
","老婆给当程序员的老公打电话：“下班顺路买一斤包子带回来，如果看到卖西瓜的，就买一个。”
当晚，程序员老公手捧一个包子进了家门……
老婆怒道：“你怎么就买了一个包子？！”
老公答曰：“因为看到了卖西瓜的。
","bug产生于人力有时穷。
知乎上看到的段子，但我不记得是在哪个答案了。。侵删：
一万个测试工程师在酒吧门外呼啸而过
一个测试工程师走进一家酒吧，什么也没要
一个测试工程师走进一家酒吧，要了一杯啤酒
一个测试工程师走进一家酒吧，要了一杯咖啡
一个测试工程师走进一家酒吧，要了0.7杯啤酒
一个测试工程师走进一家酒吧，要了NaN杯Null
一个测试工程师走进一家酒吧，要了2^32杯啤酒
一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷
一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@
一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱
1T测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶
一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来
一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿

测试工程师们满意地离开了酒吧。
然后一名顾客点了一份炒饭，酒吧炸了。。



","我以前玩过一款游戏，叫做永恒之塔。
里面有个巨大的BUG.
在新手村打怪，一只怪最多掉5块钱。组队平分，每人1块。
但组队可以组满6个人。
于是当你组满6个人打一只怪的时候，这5块钱就不够分了。因为1是货币的最小单位。于是惊悚的事情就出现了。系统开始每人几十万，几百万的分。这个BUG就是个逻辑错误。
最后，因为刷钱被封号了。

","请出一组有点久远的图片。
---------

","飞机上，乌鸦对乘务员说：给爷来杯水！
猪听后也学道：给爷也来杯水！
生气的乘务员把猪和乌鸦扔出机舱。
乌鸦笑着对猪说：傻了吧？爷会飞！
（出现BUG）这时，猪伸出翅膀扑哧扑哧问道：你说什么？
（修改BUG后）乘务员发现自己莫名其妙在飞机外飞，同时还给乌鸦和猪两杯水，而且三个飞得比飞机还快......
","哪有什么bug，都是规则内的可行解。

","之前在网上看到一组关于程序员的漫画，觉得用来回来这个问题很贴切！侵删
-----------------------------------------我是分割线-----------------------------------------
请各位大佬支持一下我的这篇原创问答：

","根据我从业十五年的经验，bug一共就三种原因：
我艹，没想到！
我艹，打错了！
我艹，你没告诉我啊！
","

系统已上线,一切正常!
","理发师：我给这个村里所有不给自己理发的人理发。
bug：理发师给不给自己理发？
补丁：给村里所有不给自己理发的人(不含理发师自己理发。)
测试：七大姑八大姨都来理发试试
用户：给我的牛理个发。
","通俗易懂。
","Bug的产生，通常分为三种类型：逻辑漏洞、越界访问、条件考虑不全面。
为了便于你理解，我以女朋友来大姨妈举例。
某日，你收到了女朋友的一条微信，跟你说自己来大姨妈，肚子疼。这时，你要写一段文字回复，这段回复你就可以认为是你写的一段代码。
这段代码需要达到的目的是让你的女朋友感受到你对她的爱，增进（至少不减少）你俩之间的感情。我们可以把这个目的当成你对自己提出的这段代码背后的产品需求。
1，逻辑漏洞：
你：我叫外卖来给你买个热饮吧。
女朋友：滚！你是想让我从床上趴下去给外卖小哥开门么？
分析：低级错误，程序执行后无法达到想要效果。
2，越界型：
你：我给你室友打个电话，让她帮忙照顾下你。
女朋友：滚，谁让你联系我室友的。
分析：访问了非法区域，造成程序崩溃。
3，条件考虑不全面：
你：亲爱的，我早就知道有这天，所以暖宝宝、热水壶、痛经药....(此处省略一万字)，我都给你准备好了，就在家里。
女朋友：我现在在地铁站。
分析：你以为你万无一失，但你永远都不知道输入参数究竟是什么！

除了上面三种主流错误，还有一大堆，这里就不细说。
我跟其他答主不一样的是，我不光要告诉你们Bug是如何产生的，我还要跟大家解释我们程序员平常如何防范未知Bug，因为你们也看到了，Bug就像你女朋友的微信，你永远不知道她下一句攻击你哪个点。
所以，这里要祭出利器：异常捕获。
异常捕获一般依靠try，catch语句。很好理解：try（尝试）一下，如果有问题，直接捕获（catch）住，防止程序崩溃。
什么，你没听懂？我这么写你可能就懂了：
完。

补充：
评论中有人提到了没有理解需求导致的Bug。这里我要讲一下，对于普通程序员来说，那可能就是Bug。但是对于我胖总来说，那是我设计的feature。对于能够产出结果的东西，只要运行时没崩溃，我都能把它描述成是我故意编写的功能。
所以，在需求错位的时候，到底是低头背锅，认了那就是一个Bug；还是昂首挺胸，说就是那么设计的功能？
这！不光是你的态度问题，还决定了事情的走向。
与其战战兢兢地怕出了Bug惹女朋友生气，不如思考如何霸气回应她的Diss，把自己的所作所为描述成你精心设的结果，前提是要有理有据。
来，跟我一起说：
世界上本没有Bug，只要你放下舔犬的自卑，迎难而上，用顶层架构者的语气反击所有指出你问题的人。
你收获的不仅仅是他人的尊敬，更是没有年终奖的清心寡欲和被逐出公司的人生自由，以及孑然一身远离女色的开悟人生。
加油，你行的。

","洗衣机厂家，打死也没想到，自己的产品总出问题，原来他们拿它洗土豆
","说一个DNF里面比较经典的bug
1/史诗级装备因为属性强悍是不允许交易的
2/死亡之塔内不允许任何物品进行交易
这两个条件合并起来你能猜到会触发什么bug吗？
没错！我亲眼见过有人在死亡之塔里面交易史诗装备，嗯~双重否定表示肯定~没毛病！
","程序员转行后，准备开一家咖啡店
经过精密的设计、采购、装修后，程序员觉得不错，决定试运营，请一个测试来喝咖啡
测试走进了咖啡店，点了一杯卡布奇诺，然后拿着咖啡高高兴兴的走了……
测试走进了咖啡店，点了一杯美式，然后拿着咖啡高高兴兴的走了……
测试走进了咖啡店，点了一桶焦糖拿铁，然后扛着咖啡桶高高兴兴的走了……
测试走进了咖啡店，点了一箱五粮液，然后拎着五粮液高高兴兴的走了……
测试走进了咖啡店，点了一只拉布拉多，然后牵着拉布拉多高高兴兴的走了……
测试走进了咖啡店，点了一个老婆，然后抱着老婆高高兴兴的走了……
程序员对这一天的试运营很满意，于是第二天正式开业
开业当天，一个顾客走进咖啡店，问“洗手间在哪？”
然后咖啡店炸了
","一个测试工程师走进一家酒吧，要了一杯啤酒；
一个测试工程师走进一家酒吧，要了一杯咖啡；
一个测试工程师走进一家酒吧，要了0.7杯啤酒；
一个测试工程师走进一家酒吧，要了-1杯啤酒；
一个测试工程师走进一家酒吧，要了2^32杯啤酒；
一个测试工程师走进一家酒吧，要了一杯洗脚水；
一个测试工程师走进一家酒吧，要了一杯蜥蜴；
一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@；
一个测试工程师走进一家酒吧，什么也没要；
一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来；
一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿；
一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷；
一个测试工程师走进一家酒吧，要了NaN杯Null；
一个测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶；
一个测试工程师把酒吧拆了；
一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱；
一万个测试工程师在酒吧门外呼啸而过；
一个测试工程师走进一家酒吧，要了一杯啤酒';DROP TABLE 酒吧；

测试工程师们满意地离开了酒吧。
然后一名顾客点了一份炒饭，酒吧炸了。

网上搬运的
","刚修复了一个BUG,给老板演示的时候

","我开发了个订餐系统，金额用double类型，但我没想到，你的交易货币是津巴布韦币，甚至还有天地银行。
"
14,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
15,将 bug 译作「蚆蛒」，将 debug 译作「揥蚆蛒」，音译兼意译，是不是很巧妙？,"翻译得挺好
这仨字光看着就能感受到一股腥膻咸湿的克苏鲁气息，很是能准确复现debug时的精神状态
下次别翻译了
","阁下不会就是翻译出
的那位姐吧。

————更新，应要求添加一下这些词的解释：
鲁棒性：robustness，robust意味健壮，强壮，应该译为健壮性，稳健性，强壮性，稳定性均可，译者不知何故要音译，由于词汇太过古早，也可能是译者当时不懂这个词的含义，总之结果导致其在国内教材中广泛使用，造成了大量学生的迷惑。
诱导公式：原文是reduction formula，即简化公式，译者翻译的时候可能用的是盗版书，国内标注的是induction formula，也可能是记错了单词的意思，因为其把reduction（减少）当作induction（归纳）来翻译，但最终的译文甚至没有体现出induction的意思，也就是说经过了两次错译才最终变成了“诱导公式”这个不明所以的名字，并且被我国高中教材广泛使用，以及各种教辅，培训班强行解释“诱导”的意思，导致越传越广。
半条命：应为半衰期。
老头滚动条：应为上古卷轴。
车厘子：cherry就是樱桃，译者非要音译出另一个物种来。
红地厘蛇果：delicious apple就是苹果，译者非要把delicious音译为地厘蛇，再加上红字，听起来像是“红地”这个地方的物种“厘蛇果”。
泰晤士报：原文是“The Times”。并没有“泰晤士（Thames）”这个发音，不仅丢失原义，还让人对该报纸的发行地产生误解。
巴勒斯坦：应为巴勒斯丁，见答主“知乎用户ObE5mQ”的回答：
套套逻辑：tautology，原义“同义反复”，纯音译导致的怪异翻译。
套接字：Socket，原义插座，接口。
方程式赛车：见用户“西瓜回路遮断器”的评论：formula使用了错误的意义。
把属性映射为属性：把property映射为attribute，译者（可能是机器）翻译时没有考虑其意义。
双亲委派机制：parent delegation，应为父类代理，当然，对于某些用户，非要译作母类代理我也没有意见，译为“双”会让人误解程序的继承关系。
酉矩阵，秩：Unitary Matrix，Unitary即单一的，被译作“酉”，中文意义看起来像是指十，鸡，很多，或者两年半。rank即排，列，被译作“秩”。
卡宾，氮宾，叶立德：见知乎用户SZnCu的回答：
缺省：默认值，原文default，不知道为什么要翻译出“缺省”，同时失去了缺少，默认两个意思。
渠化：见用户庆晓筱的回答：
死投：
Dead Drop，标准译法：固定情报投放点。见用户黄金大亨的回答

蚆蛒：原文bug，译作“蚆蛒”，一晃眼还以为是浏览器没安装UTF-8出乱码了。
","我觉得不如叫 涤悖格
涤 洗涤，去掉
悖 不合理，冲突，错误
格 格式，标准，规范，结构段落
悖格 谐音bug，导致错误，冲突或不合理的代码结构。

我觉得比你编的那个更加复合翻译的三要素，信达雅。
","我觉得不巧妙。
因为你这样文字太多了，文字笔画太多就不好写了。
可以简化一下。
例如bug，音是：八各。
为了简化，可以把“各”简化成为“𠂊”，八字没必要简化了，就两笔。
为了区分汉子和翻译，咱们可以把这部分文字增加角标。
最终成品：bug→バグ

","挺不错的，一眼就有种字符集出错的感觉
","目前来说，我见过最秀的英文翻译是战锤的四大邪神名字的翻译，读音相似的同时还彰显了人物设定（而且字没那么生僻）
给路人来段背景和介绍
恐虐：Khorne，代表是颅骨与鲜血，设定中代表难以遏制的好斗，丧失心智的疯狂以及淹没战场的滚滚血海，信仰恐虐的自然都是战场狂战士。
纳垢：Nurgle，代表瘟疫和无穷无尽的死寂，世界上所有瘟疫都是在纳垢精心调配下产生，纳垢接纳所有信徒，不论老丑、善恶。
色孽：Slaanesh，代表放纵享乐堕落和感官刺激。欲望，骄傲和自我放纵是所有追随他的人的标志。
奸奇：Tzeentch，混沌四神里最多变狡猾的邪神。有人说奸奇来源于希望，象征着智慧。但那早已被邪恶的混沌所扭曲，奸奇的希望来源于受害者身处绝境无限的绝望与千方百计的求生，智慧则来源于那无穷无尽的算计与阴谋。
另外附上台湾（港译）译名：
恐虐-Khorne-哥达/科恩
纳垢-Nurgle-乐高/奈格
色孽-Slaanesh-沙莉士
奸奇-Tzeentch-辛烈智
相比较下是不是看得出来译者很用心
更正：根据评论区 @滴滴滴滴 大佬提醒，现行四神的翻译最早反而是出自台湾民间论坛的，后来被gw收编，大陆传入时采用的台版翻译，最后也被gw简中部门采纳
答主举的例子其实是港译，至今仍是gw港版官译，偏向粤语音译 大陆锤圈港译一度和台译分庭抗礼，现在很多老锤友都更习惯叫色孽.“沙历士”

感谢评论区 @苏止胡 提醒我还有绿皮（Green skin）的翻译
先说背景，绿皮是战锤世界里的兽人（Orks），属于比较欢乐，每天只知道打打沙沙沙沙沙的种族，可以理解为绿色并且爱打架的小黄人，绿皮的科技基本全内置在dna里，并且带有搞笑角色属性，最爱做的事就是四处捡垃圾然后拼个不稳定但是能用的武器出来
整天打打杀杀的兽人信仰搞哥（Gork）和毛哥（Mork），搞哥野蛮而狡猾，毛哥狡猾而野蛮
绿皮的终极泰坦单位叫大脚（Stompa）来源于英语单词跺脚（stomp）国内一般戏称这玩意叫古巨圾，虽然没音译不过蛮传神的
另外还有绿皮的技术科研单位技术小子（Mekaniak boy简称Mekboy），这玩意的高级版本叫做大技霸（Big Mek）
兽人聚在一起会发动一次声势浩大的Waaaaaaagh！！！，而他们的头领则叫做哇博士（War Boss）
","我见过把【bug】翻译成【幺蛾子】的，比你这靠谱多了
","把Coca-Cola翻译成蝌蝌啃蜡的人该不会也是你吧！
","你自己大可以尽情的使用。但是建议不要跟我们讲。
大伙真没兴趣了解你那两个破虫子。
这个答案纯是被这个破问题气乐了、骂了句街，没想到有人看。多说两句。
当我看到题主的这种想法，我直接想到的是另外另一件事情。有些人在使用手机的时候，不喜欢设计师精心调教好的默认字体，而是换成了花里胡哨的个性字体。我今天刚收到过这种人发来的屏幕截图，一打开就感觉到两眼一黑。
这和题主的想法的共同点在于，在不适合追求美的地方追求美。
美当然是我们要追求的，照片，电影，诗词，小说，家居装潢，有得是地方让我们追求美。没必要在专业词汇和手机字体这样的、极大的影响着信息的传递效率和准确性的地方，牺牲效率和准确性去追求美。或者说，这些地方的高效所带来的益处，完全能让我们在其他地方得到更多“美”。
比方说，一本修仙小说，说有一种灵猴，能在太虚之中操控复杂的大型法术，叫乘虚猿；但是太虚中会滋生干扰法术运行的精怪，公的叫蚆，母的叫蛒；乘虚猿每天必须要去除蚆蛒来使法术正常运行。这个梗虽然够烂，但毕竟是在小说中，我是乐于见到的，因为小说就是追求娱乐的地方。
但题主说的是“不全是开玩笑”“是不是很巧妙”，洋洋自得的认为，这种巧妙就是我们应该追求的东西。其实错了呀，管你《方言》《正字通》云云，这几个字就是生僻字，就是徒增了理解难度，就是进行了不必要的翻译，就只有你自己会玩这玩意儿。如果有人对这东西感兴趣、觉得还不错，大概率是因为他平时并不编写程序，也用不到debug。
总之，把生产力的东西归于生产力，把美的东西归于美。
","恭喜你，发现了片假名
","看大家的评价，有一种小学男生花几天想了个自以为很酷的网名然后被嘲讽的美。
","我记得有个问题是“文字有没有恐怖谷效应”，这个题目就很适合作为例子，那五字被题主强行堆成词，一看就莫名烦恶难受，有一种强烈的不舒服的感觉。
","百度搜索鲁棒性

","挺好，挺好笑的。
如果真的把 bug 显示成蚆蛒会有人觉得你电脑出了 bug。
","有一种网易云初中生翻译的歌词的美


","你的出发点很好，但是你先别出发。
","要我说，不如锟斤拷烫烫烫。
debug，就叫屯屯屯锟斤拷烫烫烫
今天，在我的程序中发现了一个锟斤拷烫烫烫，我把它屯屯屯了。
一看就懂好吧。
","不好。
应该把bug意译为“虫豸”。
debug叫“除虫”。

","有一种片假不留的美
","不如翻译成幺蛾子。

"
16,编程路上那些让我效率暴增的学习方法！,,,,,,,,,,,,,,,,,,,,
17,王小波的计算机水平有多好？,"以下文字都是我本人写的。为了让阅读方便，减少模糊性。我在文中以第三人视角描述。 而不用“我舅舅“，”我姥姥“，”我大舅舅“，”我小舅舅“之类的称呼。 这是一个十几年软件工程师的习惯而已。
我舅舅是王小波。我是个禁不住人肉的老百姓。资质平庸。 王小波一篇《我是怎样做青年思想工作》的杂文在我青年单身适龄的年代，给我个人做了最大程度的广告。算是他老人家留给我最宝贵的遗产之一。 除此之外，还有他那台用了很久的PC，在他去世前一年送了我。
他是汇编高手。自己用汇编写了DOS下的汉字输入法。输入法有个功能，可以加4声。 一般拼音输入法没有这功能。这需要普通话读音正确的使用者。90年代总共也没几种汉字输入法。看过他用自己输入法打汉字。速度几乎和盲打英文一样。那时候我大学，正在疯狂苦练吉他。并没有弄懂他用了何种技术。虽然我从小学也用Z80和APPLE II 做些机器码编程做游戏。但到了中学为了高考，计算机就荒废了。
他人生最后几年，WINDOWS 3.2开始普及。然后是WIN95。 他开始从DOS转向WIN32 SDK编程。最终非常任性地熬夜苦干了很长时间，把输入法转为WIN32 SDK 在WINDOWS下正常工作。当时WINDOWS已经有不少汉字输入法。 尤其到了WIN95时代。 他这么做也只是出于兴趣而不是在DOS时代的必须。就WIN32 SDK我们还讨论过一些。那时候win32 sdk真的是很难用。主要是互联网还没有（我是96年后用上的），资料很少。匈牙利命名法陌生。WIN32的体系和DOS大相径庭。全部都很陌生。而且完全抛弃了DOS那套东西。所有90年代DOS底层程序员向WIN32的迁徙都是一部血泪史。
他人生最后一年，多媒体开始普及。光驱，声卡，2D加速卡普及。95-96年他开始和我合计做多媒体出版。原因现在想起来很悲伤 ------ 他的书很难在大陆出版 。 他不得不想办法让他的作品能够让更多人看见。而平时维持生计，只能忍着严重的痔疮，每日给各种杂志写杂文稿件。 多媒体的兴起，让他感觉也许可以利用他的技术优势，自行制作电子出版物。配上插图，音乐，用电子书籍方式可以让自己作品为大众所见。他给我看了已经制作了一部分的DEMO。就和现在用Micromedia多媒体制作软件制作的电子多媒体制品很像。电子书内容是黄金时代。有图案的背景。按空格可以翻页。同时有音乐。好像偶尔还会有一点动画的特效（我记不清了） 。但当时的DEMO完全是他自己用WIN32写的EXE 可执行程序。 他那是从WIN32 SDK移植输入法时，基本掌握了消息处理，GDI，窗口控制等方法。还有一些底层的TRICK。
我大学后和王小波比较近。那几年每周末都在他母亲家相聚。他母亲5个儿女，只有他1个人在国内。于是他就经常住在母亲家，怕老人一个人，是个大孝子。母亲家旁边有个筒子楼里2间房的小屋，公共厕所和水房，冬天暖气烧得极热。偶尔我会和他住一块。里屋是他的生活起居和写作桌。外屋很小只有张床。他弟弟的孩子和我偶然会睡外屋。印象最深的就是他烧普洱茶的电炉和玻璃茶壶。里面总是有极浓的茶水，下面沉淀着大量茶叶。估计熬夜就靠那个。
目睹了他后半截人生（从我记事起到他去世，中间他出国很多年）。感慨很多。王小波有个八叔，当时双手打算盘，无比聪明是个天才。年少夭折。王小波父亲因为搞逻辑学，引起毛泽东注意，被毛接见聊了一下逻辑学的学术相关问题。69岁心脏病发独自倒在家中过世。王小波去世方式和他父亲一模一样。区别仅在更加年轻。王小波哥哥在受文革影响挖了10年煤。后来去美国博士念数理逻辑，解决了一个100多年未解的数理逻辑问题。最后的博士毕业论文自己系的教授搞不定，专门找了数学系的教授来看。毕业后他哥哥因为被文革耽误岁数太大。没有继续科研工作。
我的最大感慨是，留得青山在，不怕没柴烧。天才也好，资质普通如我也好，人都只有一个人生。王小波妈妈去年92岁，10月刚去世，白发人送走了自己两个儿子，又过了十几年才走。之前得过癌症，靠自己毅力锻炼，恢复了。王小波去世后一年，王小波弟弟又突然去世。当时孩子都没敢告诉老人。老太太感觉不对，但又无法得知真相。只是和我说她的疑心。当时国内只有我一人，只能瞒着。不停劝慰老人没事。老太太喃喃说，“除死无大事，除死无大事啊” 。
除死无大事。 人生在世，碰到什么坎，都只会是你人生中一个普通的节点。时间一长，什么都会成为过眼云烟。 留份宽心，也许这样导致目标感没有强到能和社会精英逐鹿。但只要有耐心，不怕挫折，假以时日，目标总会实现的。作为一个42岁还在以玩游戏看动漫为生活主体的大叔，保持健康和有活力地追求智慧和有趣，做自己热爱的工作，保持善良，做精神自由的人，是我从王小波的人生学到最重要的东西。希望每个喜欢王小波的人，都有自己充实和健康的身体和精神。
","这个月有两个人被拿出来隆重纪念，都是早就计划好的。
一个是张国荣，一个是王小波。
你得承认不少人是在张国荣自杀之后才听说并喜欢上这个“哥哥”，王小波也一样，97年他死得很突然，名声也在身后突然爆炸了起来。
1994年，王小波的《黄金时代》终于在大陆出版了，华夏出版社搞了一个研讨会，一共只有20多个人参加，李银河亲自上阵做了会议记录。
1994年也是中国互联网元年，中科院高能物理所第一个接入了互联网，丁磊从同学那里借来了一个账号登上了yahoo，张朝阳从MIT回国，王志东创办四通利方，马云创办海博翻译社并在美国第一次看到了互联网，张小龙也是那一年毕业直接辞掉了电信局的工作去了广州。
如果你在那个时候搞一个互联网研讨会，估计能到场的也就是20多人。
说不定里面就有王小波。
1992年前后，王小波写了两年“科技博客”
知乎网友Vernsu把王小波作品、书信里面和计算机、互联网有关的信息全都摘录出来做了一个网页，大家可以点击 王小波和编程 查看全文。
一共18条，其中14条写于1991年春节后到1993年春节前这两年时间里。1992年“更新”最为频繁，王小波写了自己做统计软件、输入法的事情，还有购买、维修计算机的经验之谈。
从中能看出来王小波是在美国读研究生期间接触的计算机，回国之后在人大负责一个计算机室，但是因为软件奇缺，又要做一些社会学研究的东西，所以开始自己接触编程。
王小波先后学了Fortran、汇编语言和C语言。为了做出软件需要的中文窗口和在电脑上输入自己的小说，他参考严氏拼音做了自己的输入法，实现了自定义拼音字库、输入后再修改这样的“高级功能”。
因为王小波的IBM PC/XT内存很小，李银河又不准他花钱买新的，所以他费了很大精力把软件的大小控制在55K以内，这让他很得意。但是因为turbo.c的原因，软件兼容性不太好，而且图形显示的速度一直不行，让他承认自己技不如人。
如果当时有互联网让王小波可以把这些文字共享出来，那他可以称得上是中国第一代科技博客作者。
但是1995年，中国接通互联网后不久，王小波的“科技博客”却停止更新了，最后一条是：
来不及创业
王小波如果不是这么耿直的Boy，他本来是有机会创业的，在他的“科技博客”里面，他已经看出来很多商机，
史玉柱、雷军的第一桶金都是汉卡，如果王小波抓住了软件汉化和中文输入这个“风口”，就不只是骗一些钱的事情了。
王小波还关心了一阵硬件的发展，研究了国内进口电子产品的政策。因为穷，所以锻炼了自己维修装配电脑的动手能力。如果继续朝着这个方向发展，王小波应该在中关村盘下一个档口销售、维修兼容机，说不定就没有后来刘强东的故事了。
可惜王小波很快见异思迁，开始把精力放到了文学上面，
我们知道写下了《大连金州不相信眼泪》的老榕，后来做了中国第一代B2B电子商务网站8848。一大批文艺青年，包括张向东和王微，先后投身媒体、门户和视频网站的创办。
更不要说今年是内容创业的风口，王小波若是活着，即使已经是接近65岁的人，也符合超级IP的设定，出来拿投资，Papi酱的1200万肯定是不在话下。
但是有个创业的外甥
然而王小波毕竟是个耿直的Boy。
我们没办法验证他如果创业究竟会发生什么，历史不容假设。
但是王小波在《我怎么做青年的思想工作》一文里面写过他的一个外甥姚勇（姚勇本尊 @王书 也跑过来答题了，大家速去围观），也是一个耿直的Boy，喜欢摇滚，喜欢文艺，又喜欢编程，一心把王小波当成楷模。爸妈的话不听，舅舅说话就听。
姚勇听舅舅的话考上了清华，毕业做了程序员，但是没放下摇滚梦，帮水木年华做了一段时间音乐。07年他接受《南方人物周刊》采访回忆王小波，说丁磊曾经来挖他做3D游戏引擎，他不认识丁磊拒绝了，后来发现丁磊居然成了中国首富，
所以就在07年，这个耿直的Boy上赶着颠儿颠儿去给马化腾写了《QQ炫舞》，全盘抄袭了《劲舞团》。
但是毕竟是王小波的外甥，抄完了在CSDN上骂娘，
所以你看，王小波要是生在了今天，说不定就跟这个外甥一样，去给人写网络小说、编段子、做游戏去了。做得不顺，也会吐槽骂娘，骂得比别人都好看。
王小波说过，
我们创业者，究竟是像他的那种人，还是不像他的那种人？
----------------------
本文作者老编辑，首发于微信公众号老道消息（laodaoxx），原标题《1995年，王小波的博客停止更新》。老编辑的团队正在招募一名对世界不太友善的女性写手，对时尚和设计要有点感觉，对科技互联网有点兴趣。简历发送到4@bushangban.com
","说说我自己的理解。
王小波，新中国历史上最早的程序员之一，小说圈中的Geek！

早在90年，王小波就自学编程、C等语言
独立研发了中文编辑器和输入法
靠买软件赚了一大笔钱
深受很多中关村老板的喜爱
纷纷邀请他做资深程序员

当时的马化腾还蛰伏在深圳电信，腾讯还没有影子，马云还在思考中国黄页的出路，李彦宏还在加州的院子里种菜养花，日后统率中国互联网的BAT连一个萌芽都算不上啊！

这位神奇的程序员
究竟有着怎样的职场故事？
他是如何做到从编程到文学的无缝跨越的？
且看下文



王小波，骨子里有着极客的精神

早在90年代初，王小波就接触了计算机。1988年，他毕业于美国匹兹堡大学东亚研究中心，获硕士学位，那时就知道Macintosh，玩过IBMPS/2。

没有理想的应用软件，那就自己创造

早期，因为国内应用软件缺乏，尤其是中文编辑器和输入法。很喜欢写文字的王小波，就琢磨着，能不能自己编一套出来。说干就干，爱捣鼓东西的王小波就利用闲暇时间学习了FORTRAN，汇编，C等各种语言，接着又学习了数据结构，算法的相关知识，还有编译原理，终于创造出了中文编辑器和输入法。

在当时，这两个软件中的任何一个，都是大牛级的Geek才会去尝试的东西。这对一个当时爱写文字的他来说，简直天方夜谭，而且，类似的中文编辑器也就严援朝的CCDOS和求伯君WPS1.0，都是个人倾毕生所学以及背后的长城公司、金山公司投入大量的人力物力的结果。

通过卖软件，王小波也赚了一些钱，这算是最早的商业模式了。很多中关村老板，纷纷向王小波投去橄榄枝，邀请他加入公司做一名资深程序员，但被他一一拒绝。

有钱了干嘛？给自己投资呗。

身后这台就是王小波花大价钱买的286。王小波高兴得一塌糊涂，特意拍下了一张合照。

在当年3月份的日记中对此有翔实的记述，行文之间，甚是得意：

当问及王小波为什么要自己开发文字编辑程序？
王小波很淡然地说，别人编的软件我既使不惯，也信不过，就这么点原因。

这种坚韧就像是领导让你去改别人写的代码，看了几分钟之后，你一摔键盘，“费劲，不如自己重新写一个！”

在《似水柔情》一书中，王小波骨子里那种执拗精神展露无遗：“我觉得我还是我，我要拥有一切——今天要是不把那段C++程序调通，老子就不睡了......”

王小波，程序员撩妹之楷模
赢得了一整个银河

读过《黄金时代》、《红拂夜奔》的人，就会发现，王小波笔下的每一段故事都关于一个天真得有点轴的姑娘陪一个不合时宜的男人，度过了那个鸡飞狗跳的年代。管他世外有多乱，天真的还是天真，不合时宜的依旧不合时宜，像极了两颗钉子拧巴起来，钉在洪流里。

两颗钉子我行我素，洪流里的人面面相觑。

这就是王小波，敢说、敢写，简单，率真，是荒唐的时间里真诚的存在。

这也是王小波和李银河爱情故事的缩影。管他世外有多乱，天真的还是天真，不合时宜的依旧不合时宜，天真得有点轴的银河陪王小波，度过了那个鸡飞狗跳的年代。

在第二次和李银河见面时，王小波就向提出交往的要求。李银河在多年之后坦言到，“被其表白后，感到有些难以接受，他的长相……实在是种障碍，差一点就分手了。”

王小波却浑然不在意，还能趁机调侃“一想到你，我这张丑脸上就泛起微笑。” 即使再排斥他长相的人，也不会给他难堪了吧。

有着“整容般有趣灵魂”的他，每每给李银河写信总是这样开头：“你好哇，李银海“，字里行间透出类似孩子般的对爱的渴望与无助。



《爱你如爱生命》一书，记录了王小波对李银河说过的情话：

王小波给予银河的爱，是自由的，真诚的，率真的，像极了他自己。

王小波，IT届的一大“叛徒”
却找到了最好的路

纵观王小波的一生，他对于互联网的深度体验，与其在文学上面的尝试是可以等量齐观的。

玩硬件、写软件、上网写博客、用电脑写作、用软件卖钱……王小波的互联网经历，几乎涵盖了今日程序员生活、工作的各个方面。

然而，混熟了互联网的他，对其已提不起兴趣。

“我对微机已无兴趣，因为发现写小说也可以赚到钱。”

或者说的可以更直白点，王小波学编程就是为了赚钱养活热爱写作的他。

没有人限定了谁的一生该怎么走，不妨问问自己：你想怎么走。

王小波选择了写作。

1992年从北京大学、中国人民大学辞职，王小波成为自由撰稿人，陆续出版了《黄金时代》《白银时代》《青铜时代》《我的精神家园》等知名作品。他的唯一一部电影剧本《东宫·西宫》获阿根廷国际电影节最佳编剧奖，并且荣膺1997年戛纳国际电影节入围作品，使王小波成为在国际电影节为中国取得最佳编剧奖的第一人。


高晓松曾评价王小波，“以我有限的阅读量，王小波在我读过的白话文作家中绝对排第一，并且甩开第二名非常远，他在我心里是神一样的存在……王小波是可以和卡夫卡媲美的。”

一个比高晓松还丑的男子，却被高晓松称之为神一般的存在，可见王小波在文学上的天赋与创作是惊艳世人的。

王小波的这次叛变，是极其正确的。

可就在1997年，4月11日，一个很平常的日子，王小波心脏病突发，一个人悄悄地离开了世界。

在他去世的1997年，也是中国的互联网元年。

这一年，联想超越IBM成为中国个人电脑市场霸主，张朝阳创办了搜狐前身爱特信网站，丁磊在广州创办网易，王志东的四通在线拿到650万美金风投，四通利方体育沙龙上出现了一篇著名的帖子《大连金州没有眼泪》，当时的马化腾还蛰伏在深圳电信，腾讯还没有影子，马云还在思考中国黄页的出路，李彦宏还在加州的院子里种菜养花，日后统率中国互联网的BAT连一个萌芽都算不上。

或许我们可以打开脑洞，如果王小波不死，他除了文学创作，在互联网领域，可以去混论坛成为老榕、陈彤一般的人物，可以去创业成为张朝阳、丁磊，可以去布道成为凯文凯利……也可能在博客微博时代成为公知代表，也可能形象崩塌一败涂地，也可能成为自媒体达人每次打赏无数……

但这都不是王小波。做极客的王小波与做知识分子的王小波，是一个硬币的两面，用编程的写作互证，才能找到一个血肉丰满的王小波。



这些都是王小波。
用丑丑微笑面对世界的王小波；
通过自己努力改变生活的王小波；
在热爱面前，愿意倾尽所有的王小波。

","王小波在杂文集《沉默的大多数》中［科学的美好］这样写到：
“我现在既不是化学家，也不是数学家，更不是物理学家。我靠写文章为生，与科技绝缘——只是有时弄弄计算机。这个行当我会得不少，从最低等的汇编语言到最新潮的C++全会写，硬件知识也有一些。但从我自己的利益来看，我还不如一点都不会，省得整夜不睡，鼓捣我的电脑，删东加西，最后把整个系统弄垮，手头又没有软件备份。”
-------------------------------------------
不得不说，《沉默的大多数》这本书读起来真的是拍案叫绝：
","计算机水平很高，恶搞水平更高，他不高兴的时候把命名都写成caonima1，caonima2，caonima3
……
","补充
：
王小波与他的好友间关于计算机和统计的一部分书信摘要。
","《姚勇：现在的社会要钱不要王小波》
转载自：南方人物周刊
原文链接:
作为外甥，他眼里的王小波是什么样子呢？这个王小波对他有什么样的影响呢？或许，能告诉我们另一面的王小波。
出事前不久，姚勇说，舅舅嘴唇的颜色已经变紫了，电话中也透露出不舒服的感觉。出事前两天半夜一点，姚勇接到姥姥的电话，老人仿佛有预感似地说，找不到王小波，可能是出事了。“当时我们都没当真，后来姥姥的弟弟出去寻找，在昌平的房子发现了尸体。”
4月11日早晨7点，姚勇还在睡觉，父亲接到了电话。姚勇匆匆和父亲一起赶到姥姥家，帮忙给剑桥网站管理员写信找远在英国读书的舅妈李银河——当时email还不是那么普及
人物·姚勇
“被王小波教育过的外甥”——在王《我怎样做青年的思想工作》一文中提到“天资聪明，虽然不甚用功，也考进了清华大学”
“这孩子爱好摇滚音乐，白天上课，晚上弹吉它唱歌，还聚了几个同好，自称是在‘排演’，但使邻居感到悲愤；这主要是因为他的吉它上有一种名为噪声发生器的设备，可以弹出砸碎铁锅的声音。每逢考期临近，他就要熬夜突击准备功课；这样一来就找不着时间睡觉。几个学期下来，眼见得尖嘴猴腮，两眼乌青，瘦得可以飘起来。他还想毕业后以摇滚音乐为生。”
临近下班的姚勇疲态尽显，不时摘下眼镜狠狠地揉搓眼眶；尽管如此，面对镜头的眼神还是有些失去焦点。每天精神高度集中地工作以及经常熬夜写代码，让“疲惫”成了这个32岁IT青年的常态，一如其他所有努力拼搏、处于创业阶段的IT人士。
姚勇留着长发，这可能是他“IT青年”形象的唯一“破绽”。若干年前，他曾甩动长发，用吉它弹出令人兴奋的音符，引发台下阵阵尖叫。后来他一度成为国内著名演唱组合“水木年华”的主唱，他的形象出现在“水木年华”“新歌+精选3”专辑的封面上，这是该乐队唯一一次以三人形式出现。
姚勇的又一重身份是王小波的外甥，或者按照他朋友的说法，是“被王小波教育过的外甥”——在王《我怎样做青年的思想工作》（以下简称《思想工作》）一文中提到的“天资聪明，虽然不甚用功，也考进了清华大学”的那个外甥，就是姚勇。在王小波生前的最后几年里，姚勇是和他关系最密切的亲人之一；也正是因为王小波，促成了姚勇从手捧吉它到手握鼠标的转变。
思想工作者王小波
24岁前，姚勇的简历基本按照音乐人的标准写就——小学开始学习小提琴；初中进入军乐团、交响乐团；高中喜欢摇滚，苦练吉它；大学成立了自己的乐队“泡沫”，担任主唱和主音吉它。
“这孩子爱好摇滚音乐，白天上课，晚上弹吉它唱歌，还聚了几个同好，自称是在‘排演’，但使邻居感到悲愤；这主要是因为他的吉它上有一种名为噪声发生器的设备，可以弹出砸碎铁锅的声音。”王小波在《思想工作》中这样写道，“每逢考期临近，他就要熬夜突击准备功课；这样一来就找不着时间睡觉。几个学期下来，眼见得尖嘴猴腮，两眼乌青，瘦得可以飘起来。他还想毕业后以摇滚音乐为生。”最后一句话，令姚勇的父母大为头痛。
当时姚勇的家人在国外，每周他都要去姥姥家，也就经常能遇到侍奉老人的王小波。而高中阶段就读过《黄金时代》并颇以为“爽”的姚勇，和这位和蔼可亲的舅舅很有共同语言。于是，王小波在《思想工作》里说，“不管我愿意不愿意，我都要负起责任，劝我外甥别做摇滚乐手，按他所学的专业去做电气工程师。”
时隔十多年，姚勇已不记得舅舅当时确切说了什么话来说服他，大意是“人在什么阶段应该做什么事情”、“要花多少精力去学习”、“不必非得那么辛苦搞艺术”、“走上社会的起点要高，不能大学毕不了业”等等，都是些亲人之间常见的教诲。但姚勇说他听得进去，因为舅舅把他当朋友，平等、平和地对待他。
王小波去世后，姚勇才读到《思想工作》，兼之当时他觉得自己艺术天分不够高、音乐之路也很难走，又重新回想起舅舅劝服他时说的话，品出另一些深意。在《我的舅舅》一文中，他说：“作品的灵感只能是来自于作者本身对于痛苦的体验。当我察觉到这一点时，我的舅舅感到了身上的责任。他不希望自己的经历在下一辈中重演。”
于是24岁后，姚勇的重心从20年来一以贯之的音乐，转向他同样喜欢且看上去更有前景的IT。
编程高手王小波
说到IT，在姚勇看来，舅舅可是个编程高手。在他刚进入清华电机系，对编程还不熟悉的情况下，舅舅已在用C＋＋写自己的中文输入系统、中文编辑器和多媒体系统。姚勇说，生前，舅舅一直在做自己的电子书——他希望他的书为更多人了解。
姚勇和舅舅几乎没有代沟，很多时候他觉察不出舅舅有长辈的样子。对姚勇来说，王小波更多的是一位可以热烈讨论技术、科技触角灵敏的和蔼长辈，而非一位作家——印象中，王小波几乎不在家中讨论他的书稿，姚勇笑称，可能是因为他的第一部小说《唐人秘传故事》并不入文学功底同样深厚的家里人的“法眼”，认为它不是商业小说，无法糊口；而他的小说、杂文，大多都是在他去世后出版，家人才得以看见。
姚勇说，舅舅在家里不太说话，本身也不是健谈的人，可能只有在和他聊起电脑技术的时候，话匣子才被打开。
姚勇回忆，他常常周末去姥姥家，舅甥两人就坐在计算机前，讨论电子小说和编程细节。有时候王小波会向他展示编程的进展，“敲完键盘，歪过头来冲边上的我嘿嘿一乐”，有时“和我一道痛骂微软公司的险恶——在他们发明的Windows操作系统下编程犹如噩梦。”
一次，姚勇在舅舅面前抱怨父亲不给他买计算机，舅舅表示理解，并当即决定去买一台奔腾，把自己的电脑送给姚勇。“我乐得不行，简直可以说是欢天喜地。”王小波还亲自把这些自己用了好多年的家当抱下来，给姚勇打了辆面的，“在关上车门时，我冲他招手，心中充满感激之情。看到他微笑着站立在马路边上缓缓向后退去的身影，心中闪过一阵阵温暖之意。”
突然的死亡
1997年，王小波去世前的最后一个春节，是和姚勇、姚勇的姥姥一同度过的。和往年一样，舅甥二人在院里放了鞭炮，迎接崭新的一年。
之后，从小身体不好的姚勇受长期扁桃体化脓的困扰，打了一个月点滴，还与父亲因学业的事情闹僵，正躺在床上无人照料时，王小波打来电话安慰，让姚勇好好照顾自己，还担心着他的学业问题，“怎么样也得拿到毕业证呀”。
出事前不久，姚勇说，舅舅嘴唇的颜色已经变紫了，电话中也透露出不舒服的感觉。出事前两天半夜一点，姚勇接到姥姥的电话，老人仿佛有预感似地说，找不到王小波，可能是出事了。“当时我们都没当真，后来姥姥的弟弟出去寻找，在昌平的房子发现了尸体。”
4月11日早晨7点，姚勇还在睡觉，父亲接到了电话。姚勇匆匆和父亲一起赶到姥姥家，帮忙给剑桥网站管理员写信找远在英国读书的舅妈李银河——当时email还不是那么普及。
在打开电脑的时候，姚勇哭了，那里有舅舅未竟的《黑铁时代》和未出版的杂文，然而这位高大的骑士却再也不回头了。
那年秋天，姚勇制作了一个网站，把舅舅的一部分作品放在上面，纪念这个教育他人生道理、和他讨论程序、带领他进入网络世界、影响他之后人生观价值观的人。
没有舅舅的日子
1998年，姚勇留校做了程序员；2000年，跟朋友一起开发网络游戏3D引擎；到了2002年，姚勇用“潦倒”来形容自己的状态，身边的钱刚够吃饭；与此同时，“水木年华”的一名成员离开，清华校友卢庚戌想邀请气质和音乐上都“摇滚”的他参与进来，姚勇犹豫再三，终于舍不了做音乐人的夙愿，点头同意，但又放心不下他的3D引擎，就买了个笔记本，在演出等候的时间段，继续做他的技术。“当时真的累坏了，几乎每天都要飞行、演出，别人不演出时还有空余的时间，我得写代码，一个脑子永远分成两半，一边完了忙另一边，永远没有休息的时候，因为两边都是自己的兴趣。”
2003年，姚勇的心脏出现了早搏现象。他决定退出，重回网游领域。
也就是在2003年，某天晚上十点多，丁磊把姚勇叫去，希望他来做3D客户端。姚勇说，当时不知道也不认识丁磊，觉得还是希望自己创业，就没搭理这事。2005年12月31日，姚勇在博客上写道：“前段飞机上翻某本精英杂志，几年富润榜，似乎就03年他是中国首富。我心说行，也就我当时还摇滚青年的范儿，傻逼嗬嗬还真拒了个首富。要知道后来想做的这白日梦会给我带来那么多技术之外的破事儿，我早上赶着颠儿颠儿给人写3D引擎去了。”
几年间，姚勇胃病频发，事业也有过不顺利。“现在的社会不需要舅舅说的智慧、趣味，要的是钱。舅舅的思想曾经在我脑中存在，现在也一直都在，但你面临的责任、处境、解决问题的方法等现实，逼迫你不能用这些思想解决问题。但经历了那么多，我的信仰仍然是我的兴趣，是我坚持的动力所在。”
还是在2005年12月31日这篇博客中，姚勇写下如此一段：“身边所有被资本支撑的产品，都呼啸而过。伴随着几十亿几十亿滚滚而来之后又滚滚而去。只有我，依旧在原地，抱着最初的那些童真不放。青春逝去， 再不复返。有时醒来想，为兴趣而活，真这么错么？想实现一点梦想，真这么难么？”
","Fork without any hesitation.
","高中时候泡图书馆，偶然翻到了他的杂文集。 一口气全部看完，发现他理科很好，又写书，会编程，留过学，想法之类的符合我的取向，当时就感觉打开了新世界的大门。当时高中做化学实验，想起他吸氨水我就想笑。看了看书的封面，还特别年轻，心想，这人不错啊。
结果翻到了最后一页，发现97年就走了。。。。。。。当时心里一万句我操。。。有些难过，觉得他的文章什么时候都不过时。后来看完了全集，看了书信，难过，唉，我心中的王二。
","具体怎么好我不知道，但是20年前就能写出《从internet说起》，就知道他比好多人高到不知道哪里去了。。。
","Programming language 也是一种语言，语言功底好的人，写程序也很有天赋，很庆幸王小波没有选择去写代码
","1996年发表
","Show me the code, 有强烈的想看王小波代码的冲动，想来这些代码在计算机圈中比他的文字还珍贵，还能""人肉""到这些代码吗？
","不值一提的长处罢了
","王小波的技术到底够不够牛，我是无从了解的，因为那个时代也许已经与比他更牛的人存在的，但是他的精神是现在依旧可以在IT民工身上看到的，我们是技术流，只为了技术，一个纯粹的技术疯子他不懂得他的创举能带来多少利润他只知道可以更方便自己的使用，他追求更高层面的技术，永不停歇!
","“我现在软件写得出神入化，大概8088上能做到的一切，我都做到了。自己觉得该告一段落，去写小说了。”
","我一直都以为王小波只会天马行空，装深沉。。没想到他还会计算机编程这一套。。真牛逼。。
","今天读《爱你就像爱生命》 看到这页我实在是看不下去了 我是来看情书的啊 前面各种爱 各种信任 各种撒娇啊 怎么画风不太对了……然后开始怀疑人生……毕竟我一个交互设计的研究生，一直赖着不学编程……所以，今晚我去图书馆借了一本编程入门的书……
大一的时候，偶然在图书馆找到了小波老师的一本书，当时我对小波老师的认知就是：一个我还没读过他作品的作家，所以我就找了一本读。忘了是《青铜时代》还是《白银时代》了，在教室里读，刚好那天开会，教室都是人，真的，看的脸红了。。。
然后这么多年，再也不看小波老师的书（心里阴影太大），最近是因为关注李银河老师，（2017年以前，我以前真不知道他们是夫妻）所以觉得还是想再看看小波老师的书，结果……
然后又查了一下，1978年高考，考上人大，这最起码说明还是有碾压当年的同龄人能力的吧……
美国匹兹堡大学……
然后大部分人的知道的身份是作家……

反正这两页 我也看不懂……
最后：完全0基础、文科编程小白，求好心的大神指点入门（数理化生一个比一个差）
谢谢


","他是对外经济贸易大学的C++老师
毕业于北大数学系
深藏功与名。
","总之人家是觉得写书和写程序都能挣钱，不如写书去了。
"
18,怎样评价《数码宝贝》第一部中的泉光子郎的编程水平？,"受到 @夜路川 答主勇于用python进化自己室友的激励，我顺便深挖了一下《数码宝贝》第一部第五集中光子郎在电脑上敲出的代码，终于把原始代码跑了出来，视频在最后。

虽然这段代码会自己乱动并让甲虫兽进化，显得狂拽酷炫吊炸天，但其实和第十集出现的代码是一模一样的（而动画里表现出的效果明显不同）。第十集里的代码反而看得更清楚一点。

根据这张图抽出文本如下：

如果想重新原汁原味地运行这段代码，首先要明确它的语言和版本。注意到注释和变量定义的语法更接近C系语言，但还有endwhile、func、endfunc等关键字，可以确定这不是VB或者其他主流的BASIC系语言。但是代码行号的格式暴露了这货肯定是个远古产物，我本来想看看光子郎电脑上这个文件的后缀名是什么，瞅了半天发现是“名称未设定 3”（见上图），失去线索的我只能开始疯狂的google……

在资料检索过程中主要发现两个问题。一是和这段代码语法相近的语言太多，比如VFP（Visual FoxPro，知道它的人肯定都老了）、VimScript、SAP采用的ABAP、早期PHP、伪代码的某个版本[1]、乃至德仪计算器的自创脚本语言等等。经过一个个的尝试，发现这些语言都是形似神不似，并不是真正的答案。

第二个问题是，如果仔细看光子郎的代码，你一定会陷入困惑，因为这段代码根本不像是有一个统一的语法规则。这里举两个栗子：

然而，在我就要放弃之际，一位国外先行者的博文给了我曙光（尽管文章里有一些错误）[2]。这个语言最终还是被查出来了……

事情要追溯到1987年，夏普发布了一款型号为X68000的PC。作为那个年代的电脑，搭载了10MHz的摩托罗拉68000CPU，1MB的内存，没有硬盘，且只在日本发售[3]。其操作系统是夏普为这一系列电脑专门设计的Human68k，《数码宝贝》中的那段代码，就属于这个操作系统专有的编程语言X-BASIC[4]。

这个系列的最后一款电脑在1993年发布（配置有所增强），而《数码宝贝》第一部是在1999年放映的，可见在动画制作时期，光子郎的代码也不算特别陈旧。

为了实际地跑一下这段代码，又经过一番艰辛的努力，我搞到了X68000的模拟器，还有操作系统Human68k（version 3.02）的磁盘映像，现在还能找到这些东西，真的要感谢极客阿宅们的默默奉献。

在模拟器里一开机，感觉就成功了一半：

为了能使代码顺利运行，还需加载SX-WINDOW映像。最后终于找到X-BASIC，一字不差地键入了光子郎的代码：

执行run命令，按代码要求输入一个1到2之间的浮点数值，下面就是见证奇迹的时刻了！

我不禁望向窗外的那只放屁虫，它仍在很悠闲地晒太阳，很遗憾我的甲虫兽并没有进化……原因很简单，这真的只是一段随机生成「coast」轮廓的代码。初始输入是一个阈值，从视频里看，显然阈值越高「海岸」越险峻，阈值越低「海岸」越平滑，很有可能是摘取了当时哪个游戏里地图生成器的一段源码。所以，导演又糊弄事呢？

为了跑这段代码，我查到了一些资料和工具，在此罗列一下，有兴趣可以看看。

最后话说回光子郎的编程水平，这段代码的难点主要在于用递归实现了分形图形的绘制，虽然没什么特别神秘的地方，但还是需要一定程度的编程技能和数学知识。原理上很像我之前绘制谢尔宾斯基三角形的代码：

但是光子郎当时好像上小学四年级？

而且在动画里，这段程序的输出是这样的，光子郎最后靠这个成功还原了他和美美所在的迷宫。

嘛，单从这里看，感觉能进科大少年班就是了……

彩蛋：当年X68000系列的电脑还随附一个名为060turbo[5]的软件，单独装在一个磁盘。这个软件的唯一功能是在屏幕上随机打印一张复杂的分形图形（疑似Mandelbrot图像？并不是很确定）。我用模拟器试了一下，效果确实惊艳，感觉光子郎在成为分形大师的路上还需努力23333。

","2020年，光子郎用Python打开了数码宝贝世界的大门，也象征着我们的青春结束了。





不说别的，就看他写了什么。
坐标是数码宝贝第一部的第五集
这是和 黑安杜鲁兽 战斗时
光子郎用来进化甲虫兽的代码
发现这大概像一段VB代码。不敢确定。
根据诸位大佬的研究，光子郎的代码是X-Basic
破千了！！ 十分感谢各位大佬的抬爱。在各位大佬的指正下，把这个看不清楚写错的文本修正一下。
转文本如下：
对这段代码的个人理解如下：
定义一个浮点数 s
当 s<1 或 s>=2
s = input(""ratio 1 to 2"")
s = (s-1)/10+1
screen 估计是一个类？不知道有什么用
大佬指出 这是一个屏幕控制命令
sqr 估计是开方函数 s = s^2-1
定义四个浮点数
调用fractal函数 他给这个自定函数叫 分形
调用又一个自定函数 line 接受6个参数最后程序建了模所以估计是一个画线函数
这里声明前面的fractal函数 这还是一个递归函数
前面不知道变量s是啥所以这个代码从这里开始可读
经过大佬指出，s变量是x2,y2值的一个参数
四个浮点数
这是求两点距离的公式 l 是两点距离
如果这个距离小于2 或者 sp>=9
画条线后返回？
rnd 应该是随机数函数
递归调用
在这里根据编程语言的通性，笔者用python大概重构了一下这份代码。希望能够进化我的舍友。
基于前辈和大佬，对这份代码进一步修改：
运行结果如下：

光子郎的结果：

甲虫兽表示身体发烫。充满力量。
愿伟大的祖国繁荣富强，国庆节快乐。
","前方多图，流量预警
————————————————————————
友情提示，本文配合此音乐服用效果更佳：
有句话叫做不看广告看疗效，我们就直接来看看光子郎都有过哪些优秀操作吧。
光子郎的成就不完全统计：
1.成功分析出了动力室的程序，并且用程序手动进化了甲虫兽（技术宅威武）。
2.成功获取遗迹的地图，并且还建立了语音通讯来指导美美如何走出这个迷宫一样的地方。
3.分析了发现希望徽章后出现的那个山洞里面的程序，直接得出了数码世界是建立在现实世界之上的结论。（我觉得这段是光子郎最神的一幕。）
4.发现了分子兽在金字塔之下的密道。
5.基本上找出了石盘上卡牌摆放的内在规律。（之前在水底，玄内说的那些东西也基本上只有他才能完全理解，最后干脆单独和他说。）
6.成功设置好了玄内传给他的“数码结界”程序，正是靠着这个程序才保护了他一家人的安全。
（你看不见我~你看不见我~你看不见我……）
7.连接了巨鲸兽的视觉系统可以看见巨鲸兽所看见的，并且还配合嘉儿的哨声完成了一个“声纳系统”。
8.通过查询玄内老人给他的数码宝贝图鉴，光子郎发现了战斗暴龙兽的杀手锏“恐龙克星”，给了孩子们一针强心剂。
9.虽然一开始由于使用电脑造成暴露目标，但是光子郎很快就把他和太一的方位变成了”禁忌的多重存在“让敌人一头雾水。
10.没错，重头戏来了。在剧场版《我们的战争游戏》里，光子郎开始疯狂地秀起了操作(值得一提的是，在另一部同为细田守指导的电影《夏日大作战》里，主角也是一个技术宅)：
(1).看一个人的技术水平，可以看和他交流的都是些什么水平的人（光子郎自己也说过，在数码世界里最希望的事就是回到家上网发邮件给他的朋友）：
当然了，更diao的在后面，这水是有多深…
(2).小试牛刀，几下子就成功连上ISDN网络。
(3).在由于地狱使者兽入侵导致掉线以后，通过卫星电话连接上了外国节点再次进入了网络。
(4).最后的关头，光子郎意识到BOSS的速度太快导致无法锁定，直接快速把巨量的邮件全转发到BOSS的邮箱，于是，BOSS卡机了……，被奥米加兽成功击杀。
10.剧场版里的夏天过去了，在第二部的故事里光子郎依然风头强劲，多次发挥重要作用。
(1).仅靠一张杂志照片就大概分析出了一乘寺贤家所在的大体位置（细思极恐）。
(2).提出只要有D3暴龙机（顺便说一下这个名字也是他给取的），任何一台上网的电脑都可以打开数码世界大门的假设并且应验。
整个第二部里的光子郎，基本上分析与联络玄内的事情大部分都是他在做，作为一代二代补充性质的广播剧《两年半的休假》里也提到光子郎一直就联系着玄内并且早就知道了被选召的孩子们不止他们几个了。
给第二部主角做知识辅导也是经常的事情。比如解释数码宝贝的合体进化（他还专门为此新做了一个词：“Joint + Progress=Jogress”），又比如下图里向一乘寺贤解释为什么新的被选召的孩子们的神圣计划会变形。
11.而在第二部的剧场版《超恶魔兽的反击》里一开始，光子郎就充当了一个召集者的角色（毕竟网络世界要是出了什么异常肯定是他最先知道的）。
在太一阿和都要把最重要的戏份让给新主角，阿助差不多永远在考试or复习的情况之下，光子郎在技术支援方面的戏份还是那么吃重，真是让人不禁有些唏嘘——
好了关于他的事绩基本上说得差不多了，不得不提的是他还有一个非常可贵的品质：
对计算机的专注。
第一集开始就在自己一个人摆弄电脑。
太一觉得“电脑敲一下就好”，被光子郎赶紧拦下了。
还是素娜最能了解别人的感受啊。
唉…并且作为一个光美党，我要先去哭会儿…：
由于只注意遗迹里的文字，不理会美美，结果人家都气哭了，说他是个笨蛋。（一声叹息）
不过也就是在这个岛上，美美明白了光子郎研究文字的意义，光子郎也明白了不能单纯靠电脑的运算。于是到了第二部的剧场版里大家就玩得很开心了…
总之不管别的了，反正技术宅你今年一定要把美美给追到手啊听到了吗！加油！QAQ
新PV出了，美美早已看穿了一切，哈哈。
————————————————————————————————
11月新剧场版上映更新！
《数码宝贝大冒险Tri.》的第一章「再会」已经上线了。
我们的光子郎依旧是操作犀利,意识超前,输出恐怖。
距离第二部已经又过了3年，人类世界再度出现迷之怪物。
八个孩子们再度聚首，不得不说光子郎还是那个最能透彻地分析情况的人啊（这时要是能再响起技术宅专属BGM就好啦）：
第二，神圣计划发生故障（被阿武先说了）
（不过在这里还是要小小吐槽一下，你们倒是好好听光子郎讲的啊…果然光子郎的水平已经进化到了大家都不明觉厉的程度了吗？……诶诶，太一跟阿和怎么又吵起来啦。扶额）
（还有阿助啊……你其实是专程来虐狗的吧！~我也想问，对方是人类吗…【喂！）
(把光子郎都惊呆了…)
（哈哈哈此刻大家的表情都神同步了）
好了，接下来光子郎开始蓄能了，大家赶紧做好心理准备。
先是和阿武聊天的时候，表示自己早已是买买买的一员了（按照剧场版的设定那还是在05年啊）。
（其实光子郎你的小心思啊，其实大家都明白的啦…）
接下来就又是光子郎的秀操作时间了，为了挑选好看的衣服，他开发了一款“光子郎环游世界”（大雾）软件。即使宅在家里也可以各种衣服换着穿啦。
（哈哈，甲虫兽你真是为光子郎操碎了心啊）
好啦，镜头一转，我们又来到了……
嗯，看来美国网友真的是没白交啊。
前方核能预警！
看到这儿的时候我已经不由自主地献上了膝盖…
一个电脑制作的虚拟空间可以快速地了存入和取出数码宝贝，简直就像是自己造了一个“数码世界”一样啊。这时光子郎的帅气程度我感觉已经超越分析出数码世界奥秘那集了。
终于，就在光子郎的办公室里，数码宝贝总算是有了媲美隔壁棚精灵球一样的黑科技了（虽说六代好像也有类似的技术，不过对于大冒险系列来说这还是首次吧）。虽然端口携带不是很方便，但是也可以用数量来弥补嘛。
相信不少人会有一个疑问，太一明明把护目镜送给了大辅，为什么在Tri.又戴上护目镜了呢？
嘿嘿，答案就是光子郎熬夜只睡了三个小时给太一做了新的护目镜！
技术宅亲手制作的护目镜当然不止是用来耍帅的。
戴上以后才发现另有玄机（谷歌赶紧开发这样的应用吧，哪怕只是模拟的也好啊）
而太一也正是通过这个在摩天轮上发现了巨大的数据错位。
故弄玄虚装神秘的阿尔法兽出现了。光子郎马上动用电脑里的图鉴（肯定也是优化过的了，还带扫描分析的）。只可惜相关数据还是太少了。
是的，第一章里光子郎的表现就是这么抢眼。
但我还是要说！光子郎你就不要再各种迷之脸红啦，赶紧就从了美美吧！你看看连阿助都有女朋友了（喂！），你到底还在等什么呢？
众人：有情况
加油啊光子郎！明年再见！
————————————————————————————————
《数码宝贝大冒险Tri.》的第二章「决意」上映更新！
光子郎依旧充当着的技术核心作用。总是能第一个知道有突发情况出现并且及时地通知给大家。
并且一直在根据最新情况分析这次危机的原因：
说到这个感染的问题啊…
喂！数码兽你们又在乘机卖萌了！萌死我算了…
哈哈不过他们也不用太担心，因为光子郎也不是毫无准备的啊：
在收到一封神秘电子邮件后，他进行了解析，果然又是与数码世界有关的信息。不过答案真正揭晓，又是在之后的事情了。
在扭曲消失以后光子郎及时地打开了观测数码世界的窗口（虽然不能够进入，但是在数码世界的数码兽能听到电脑那头孩子们的声音）：
呐呐呐，至于光子郎和美美的事情呢…
怎么说呢…光子郎说了句“美美太以自我为中心了”。美美的心里明显是很不好受的（当时第一反应：？？？我去，官方你不要这样…）
嘛。不过乐天的美美还是在大家（特别是望月芽心）的鼓励下调整好了状态。光子郎更是看到她的照片立马就跑过来了。
哈哈一副要面试了的表情：
哈哈哈光子郎你还是蛮帅的。不过不要老是害羞啦勇敢一点吧！你看美美多大方啊。
————————————————————————————————
《数码宝贝大冒险Tri.》的第三章「告白」上映更新
这章，光子郎也陷入困难了，虽然他可能已经算是孩子们里面知道的最多了。
数码兽们，还是被感染了……而且还不止一只，甚至光子郎也清理不出头绪……
光子郎开始没日没夜地钻研，几近崩溃的状态。没办法，这集他是主角，真正的考验来了。
当然光子郎毕竟是光子郎。从这句话里就能够看出来。
感觉甲虫兽的话是互文，“希望”对应的是光子郎的“知识”。
终于，光子郎调查清楚了！错位的发生是因为原本的二进制被篡改成了一个数码数据无法处理的计数法。
而光子郎很快也通过数据分析知道了感染发生的根源
最后关头，光子郎还在错位空间里创建了一个备份场，不单能使数码宝贝不被重启，还能剔除感染。可惜最后一个都没有留住，哭瞎了QAQ
调整好了数码世界的坐标（之前也是他一直在联系众人再回去）
图鉴再度发挥了作用
就这样，被选召的孩子们又一次前往数码世界展开了冒险……
光子郎的故事，未完待续。
","我来歪个楼吧，我不是学编程的，但是我懂一点日语，也是数码宝贝的铁杆粉丝。
偶然一我看到了这张图，所以想要吧墙上的文字解出来，看一看究竟是什么意思。于是想要翻译墙上的文字。
墙上的文字是五十音平假名符号化了。（这在日漫中不算不常见，在《信蜂》、《家庭教师》、都有这样的字体出现。
不过
墙上的图并不是按照50音家名完全对应的，存在着大约百分之10比例的干扰图形。
（视频里我空出的部分就是在deji文字对照表里从未出现的图形，而红色的部分是与对照表图形有像的地方但是不完全一样靠猜测大致翻译的文字）
也就是说有几个图形并不在五十音里面。这大概就是光子郎一直敲键盘的原因吧。
这些李鬼们严重的吸引到了光子郎小朋友的注意力导致他连他的小女朋友都不顾。（笑
这种感觉就好比一部分文字里大部分的字都认识但是因为有几个字不认识影响理解
众所周知（也许不见得）日语中纯假名表述属于表音符号，相当于我们把拼音拆开了写这样的情况，那么就导致中间缺少的音非常影响理解整段话的意思。
我认为，制作方的用意应该是把这个数码宝贝的世界线说明，dejimoji化之后贴在动画的遗迹墙上了，所以光子郎才会说，只要读懂墙上的文字，就可以知道数码世界的意义了。
嗯，上道。四年级的小孩子居然这么上道。
然后，从结果上看，后期光子郎能够推出数码世界是与现实世界重叠的另一个世界这一点看，光子郎的进展应该是比我快。因为我解出来的密码只是一首糟糕的诗。
（当然，也许因为我日语不是母语，在缺少大量音之后根本无法达意，而光子郎小朋友通过一系列的方式最终破解了全部的密码，并顺利读懂。）
大家知道一段话，中间缺东西是什么感觉吗？
（大家做过完形填空吗？）
从其他答案那些程序员们运行程序过程中出现的情况来看，动画的文字部分应该也并未特别考究，所以光子郎背景墙上的文字应该是随机写的。
只是设定上说墙上写着数码宝贝世界的运行法则。
不过，既然这么想要知道这句话什么意思，那么我们有百度翻译啊。
百度翻译上人家这么说：
（嗯好吧，还挺应景的啊）
","（是因为我强调“玩Python”，所以把宠物小精灵也推给我了么 ^_^ ）
前面 夜路川 的考据十分专业，赞一个先。其中回帖里很多网友提到这是老Basic或GwBasic，不过各位只知其一不知其二。这个屏幕截图确实是Basic的大量变种之一，但却是一个非常非常小众的分支，恐怕国内真没有几个人用过 —— 它是 1987 年 日本夏普为其 Sharp 68000 机器设计的 X-Basic 语言（别问我怎么知道的）。
其实从截屏中也可以看出它和其他basic变种之间的显著区别，比如：
所以可以推断，这个语言的设计师当时受了很多C语言的影响。回想当年有很多改进Basic语言的努力，比如加入面向对象特征等等，所以这个语法确实是那个年代的风格。
最后跟这个帖炸出来的老程序员们握个手！看到 screen 1,2,1,1 这一句时，感觉眼泪都要出来了，真的是30年前的回忆啊！当时使用的显示器是显像管那种，有CGA、EGA等不同型号，支持的颜色和分辨率都不同。screen这个命令就是用来指示显示器切换到哪一种模式。不过 X-BASIC 里面的screen参数含义与国内熟悉的 GW-BASIC 不太一样（可能当时日本的显示器指标普遍更高）：其中第一个参数 1 代表的是让显示器切换到512*512分辨率（我记得GWBasic里是320*320）、第二个参数2代表的是让显示器进入16色状态（可以显示16种颜色、不是16位颜色！），第三个参数1代表高分辨率模式，第四个好像是代表内存缓存开关（记不清了）。
这几天好像特别喜欢怀旧，昨天刚考证了 1991年爱国者导弹那次事故 ，今天直接飞回1987年了。我大概真的是老了吧 ……
（还好头发还在，请各位CS同学安心学习、勇敢从业）

","引用：
我觉得题主应该去看下秒速五厘米，男主会。。。。结果。。。。语法是php，左边的文件目录结构是jsp。
","前面高赞回答的各位大佬们已经扒过光子郎的代码了，我就不再扒了。
当时光子郎才小学四年级，能用X-Basic写代码还原迷宫，说中科大少年班水平都不为过。
但是其实大家不必太过讶异，光子郎还真不是编剧给开挂了，因为在很多发达国家，许多小学生都具备一定的编程能力。
在光子郎的家乡日本，孩子们5岁就可以学编程了。
是的你没看错……5岁……
在欧美国家，编程甚至早已成为中小学必修科目。
不过动画归动画，现实是现实。
动画里光子郎是用编程语言写代码，但现实中，这些中小学生基本都是用MIT（麻省理工学院）的LLK团队开发的Scratch编程工具进行编程学习，主要学习的是运算思维。
不过，靠它完成一个迷宫程序还是轻而易举的：
▲10岁小学生用Scratch编程工具做出的迷宫游戏
综上，小学四年级的光子郎会编程不奇怪，牛逼的是他是用真编程语言写代码，而别的小学生需要借助编程工具来实现整个程序操作。
现实点说，现在很多计算机专业的大学生恐怕都比不上动画中的光子郎，因为真的从小接触编程语言的人真的很少。光子郎是妥妥的赢在起跑线上。不过也有例外，BT之父的Bram Cohen（布莱姆•科恩）就是五岁的时候开始学习C语言，到十六岁，他已经学会了三种编程语言了。
但这样的天才是真的屈指可数，动画中的光子郎可能就是Bram Cohen这种水平吧，谁看了不说一句牛逼呢！
","最近，了解到迷宫可以多种算法实现，也注意到《数码宝贝》中光子郎曾用计算机确定迷宫。因此，我尝试用Prim算法实现迷宫。
我复制了网络上比较流行的一个Prim算法迷宫之Python实现，作出了一些改进，增加了大量有益的注释。
注释以英文写出，保持了同原注释语言的统一。
对此算法及其实现，我个人认为，应该注意指出以下几点：
大家可以依据算法的代码，来理解相关的原理。其中相应的具体注释，应该能帮到大家。
代码如下：
我的代码，更改了matplotlib显示图形的逻辑，使之能动态地扫描出整个迷宫，在视觉效果上会惊艳一些。如果不需要，可以改成一步生成。
扫描出迷宫图片的视频如下：
我生成的一些迷宫如下：

","不请自来！
我一直觉得四年级的时候就可以码程序比起现在真实的四年级小学生已经优越非常非常多了！
毕竟现在有的计算机专业的大学生都达不到光子郎这种水平！！
","我不是程序员啦，不过光子郎在游戏进程中就破解了游戏内部世界观、设定和基本的升级原理，野怪没开打就知道属性技能，这……貌似最神的破解大神也是要退出游戏才行吧。
","日本普通高中生水平。没错，就是日本动漫里的普通高中生水平，一般坐在倒数第二排靠窗的转校生那种。
","东京湾埋藏的那批小学生的入门级水平
","世界第一梯度吧
毕竟带着那么厚的手套敲键盘还敲得那么快的人，技术也肯定是顶尖级别的。
","不如司波达也
","这部经典动漫告诉我们:
小学生赛高。
","有点像工控机的屏幕脚本控制程序，而且是很原始的工控机屏幕……
","冒号里的光一郎就是世界第一程序员，编程拯救世界
",,,
19,为什么祖传代码被称为「屎山」？,"一个有趣的事情，
一个哥们上班时忽然怒气冲天，大声质问这TM谁写的代码，这么明显的bug都能出，还不写注释，当时项目组的码农们都心惊胆战，不敢说话，害怕把自己揪出来示众。
项目经理听到发话了：XX，你查一下SVN记录，查出来全公司通报，扣他年终奖。
这哥们：我已经在查了....
过了几分钟......
这哥们：不可能吧，这怎么可能呢？
大家都凑了过去，发现这段代码是这哥们一年前自己提交的。
为了避免过度尴尬，大家都没再提这个事情。
---------------------------------------------------
回到问题，是的，都是一堆臭屎，不做记号的话，还真分不出来是不是自己拉的。
","最近公司的电梯出了问题，平常从1层到8层都畅通无阻的电梯，偏偏在经过4楼时神秘的跳过了这一层。
原本负责修理电梯的老程序员已经被扔进电梯井了，所以老板决定由你全盘负责电梯的修理和维护。
你简单研究了下这部电梯，似乎初步找出了问题的关键所在。
这部电梯的1层到4层是一个老程序员修建的，而后面的5到8层则来自于另一位跟你水平相仿的程序员。
这也就是说，问题很大可能正是来自于4层到5层的接缝处，随着公司大楼的不断加高，原本生效的程序发生了某些错误的吻合，才导致4层被神秘的“跳过”。
了解了问题所在，你立刻开始针对性的开展工作，在你的妙手回春下，你和你的老板一起眼睁睁的看着电梯不可逆转的上升，向上、向上，甚至还顶破了8层的天花板，在一众员工的众目睽睽下消失在了高空之中……
显然，问题从来不会这么简单的解决，你决定研究下那些延伸进钢筋混凝土深处的钢索，刚研究没多久，公司的女同事就过来对你破口大骂——因为电梯的钢索会影响厕所换气扇和电灯的开关，让整个厕所像极了三流鬼片的拍摄现场。
你开始意识到问题可能稍稍超出了你的想象，面对老板的不断催促，你只能赶鸭子上架般拿出了你的最终方案:
1.要求前往4楼的人站在电梯的后半部分。
2.在电梯下方安装滑梯。
3.将电梯后半部分的地板换成活版门，当检测到有人按4楼时，在5楼开启活版门。
4.最重要的一步，关闭电梯内部的光源，将电梯变成后来人看不明白的黑箱，也就没人会来找你的麻烦了。
虽然有些员工抱怨前往4楼时会遇到匪夷所思的失重感，但这无伤大雅的问题跟4楼的恢复使用又能算得上什么呢？
你唯一需要知道的就是，你成功的解决了公司的问题，你的薪水翻了三番，而且你因为业务能力出色被调到了跟程序毫无关系的领导岗位，甚至还跟前一任修理电梯的员工当上了同事( )
至于你问那个电梯？要相信后人的智慧。
而“去4楼只能站在电梯的后半部分”则变成了一个公司的都市怪谈，没人知道这古怪的规定是如何生效的。
但它正在客观实在的发生，不是吗？
","有一天，有几条虫子，干扰了老板赚钱，老板希望你能抓住它们。
你带着年轻的锐气，青春的活力，学艺多年积累的程序设计艺术，打开了公司的代码仓库。
远看，似乎一个运转的机器，巨大的代码堆积在一起形成了大致的轮廓，蠕动着前进。
凑近了一看，在不净的框架中，乱码般的语句在运转，像生了麻风病的蛞蝓一样在喷吐，粘稠的水在流动，而穿着格子衫的人群则在焰柱旁围成了一个半圆，这就是码农的仪式。他们环绕着那不可名状植物，不断的伸手进去拨弄，又不断的掏出一些东西填上去，使他堆的更高，为了防止倒塌，又掏出黏糊糊的糊糊，用力的涂抹，试图把它们黏在一起。
这是一个前人留下的屎堆起来的一个克苏鲁缝合怪，看起来摇摇欲坠，有无数的虫子爬来爬去。但勉强堆起了山一样的形体，蠕动着为老板赚钱。
你满心热血，要对这座山进行清理，使它成为一个鲁棒的钢铁巨兽，可以随时更换最新的部件，奔腾如飞，坚固异常，带着兄弟们走向人生巅峰。
你经过缜密的分析，顺着虫子留下的痕迹，终于找到了问题的源头，发现一坨很多年前某码农因为时代局限或者水平有限拉的陈年旧屎，你觉得只要对它改良一下，梳理清楚结构，加强判断与容错，就可以变化成一个钢铁部件，让这坨怪物离巨兽更近一步。
你用力的挖掘其中的信息，却发现，事情没有那么简单，这一坨实际上不是孤立的一坨，而是和整个山体融合在一起。或者说，这座山实际上是一坨坨粘稠滑腻的克苏鲁，通过无数的触角和粘液连接在了一起，这些克苏鲁伸出无数的触角，伸进这座山体中未知的角落。
有看起来结构相同，但是出现了几十上百次的重复逻辑。有无数道不知道伸向何处的判断分支。有七零八落到处都是又无法解释的神秘数字。有从表面直接伸向最底层的神秘调用。还有猜不出，看不懂，无法预计什么时候会触发，什么时候会爆发的无数定时器。还有无数神秘的线程在独立的挂在那里，猜不出哪个什么时候会忽然启动，什么时候会忽然挂起，什么时候会忽然互相抢资源而死锁，哪些资源会莫名其妙的被改动。神秘的链接，神秘的任务队列，神秘的池，神秘的环形缓存，神秘的堆栈。
他们耦合在一起，互相支撑，构成了一坨更大的克苏鲁屎怪，缓慢的蠕动。
你极其困难的清理和修改了其中的一点点内容，让这一点点的内容脱离出耦合态，看起来清晰一点。结果，忽然屎山对面十万八千行外，你永远意想不到的一块功能，忽然挂了。一个你完全在工作上没接触过的同事，通过他的盘查，发现是他维护的一个函数/方法、类、线程、内存块，池，和你改动的部分是深度耦合的，你的解耦导致了难以理解的错误使他们的部分产生了错误。于是你被骂了，你只能再退一步，在一个更小的范围内进行调整，但是发现，虫子不止是由这一块构成的，于是你追踪者虫子的足迹，去改良一个一个的模块。
在经历了一轮又一轮的批评，几乎结识了全公司所有模块的负责人之后，你终于抓住了一条虫子。但是在这个漫长的过程中，你早已忘却初心。在无数次的赶工加班熬夜的迷糊中，被同事老板挨骂后的愤懑中，表白失败/和女朋友吵架/发现自己头顶有点绿的低落中；无数次当做临时代码写下，计划单元测试完成后就重写却忘记的过程中，因为偷懒或者不舍得打断思路而而懒得抽出轮子而产生的超大代码块中。
留下了无数看起来结构相同，但是出现了几十上百次的重复逻辑。无数道不知道伸向何处的判断分支。大量的无法解释的神秘数字。从表面直接伸向最底层的神秘调用。猜不出，看不懂，无法预计什么时候会触发，什么时候会爆发的无数定时器。无数猜不出哪个什么时候会忽然启动，什么时候会忽然挂起，什么时候会忽然互相抢资源而死锁，莫名其妙改动资源的神秘线程。神秘的链接，神秘的任务队列，神秘的池，神秘的环形缓存，神秘的堆栈。
你要抓的哪条虫子确实抓出来了。然而，在你没看到的地方，随着运转，更多的新的虫子正在茁壮的成长。
这时，你突然发现你的脚抽不出来了，几条触手顺着你的腿向上攀延，你的手被深深地吸入泥沼一样的屎山，你使尽全力想要抽出胳膊，但越是挣扎，陷得越深，仿佛屎山中心有一个冰冷的黑洞，要将所有接近的物体吞噬殆尽。你的精气在一点点流失，一种极度的疲惫，但是又释然的感觉涌了上来。此刻，你觉得舒适又满足，渐渐地闭上了双眼，你甘愿奉献头发与生命，将自己化作一块补丁，维系着系统的苟延残喘。它再也没法离开你了，你和你的头发，成了它的一部分。
不知道过了多久。终于又有一条虫子在运行中暴露，干扰了老板赚钱。
老板又安排了一个年轻人来抓住这条虫子。这个年轻人带着锐气，青春和活力来到这座山前。
看到这摇摇欲坠的克苏鲁大山，不仅倒吸一口冷气。
“oh shit ! shit mountain !”
","直到改出了 bug，才知道原来某行代码是干这个用的

n天后，我擦，那行代码不止干了这个

又n天后，我擦，这种代码不止一行

又n天后，妈的，老子也搞上去了几行


","屎山？小公司的祖传代码才可以叫做屎山。
大公司的祖传代码，那是屎海上漂浮的僵屎山。
你就在这屎海里面漂着，一旦进来了，就出不去了。
每天的工作，就是在粪泳前进。还有拉着部门的粪船前进。
各个部门的粪船每天继续产出新鲜的屎，投放到屎海里，它们不断聚集，成为新的屎山。
旧的屎山顺着洋流还相互亲热着，迸发出岩浆般热情的屎，掉落在你头上和身边。
你不得不一边拼命地游以自保、一边还想尽办法地不沾太多屎到身上。
系在你身后的是部门的大船，部门领导坐在船上，用伞和棍子推着避免撞上屎山。
偶尔有个负责的领导，还会愿意让你上上船休息。
可惜一旦你沾着太多的屎了，或者让船沾着太多的屎了，就等着被踢下船去吧。
偶尔有那心有抱负的人，尝试着改变这一切。
他们以为找到了一些仿佛可以容易对付的屎山，想着要重构，说他们看到了一条干净的出路。
但是，他们还是太年轻了。
因为，他们看到的，只是屎山的一角。
他们带着部门的船从旁边划过，却不知这就是昨日的泰坦尼克。
","第0天，你发现电灯开关离床很远，每次睡觉关灯都很麻烦，于是把电灯开关封锁起来，从里面拉了一条连杆到床头，用机械传动的方法缩短了睡眠区域和开关操作区域之间的距离。

第1天，你觉得这样还是太远，打算再把它改造成遥控的，于是你做好了自动按按钮的装置和遥控器。此时你面临三种选择:
0.直接把装置装在新按钮上
1.把连杆拆了，把装置装在旧按钮上
2.把旧按钮拆了，换成传感器
你想了想，好不容易做好了，不用多可惜，于是选择了0。

第2天，遥控器不见了，你找了老半天才找着，心想这遥控器好是好，就是容易丢，于是一气之下用强力胶把它粘在了地上。
你冷静下来一想，不对啊，直接在床上合适的位置搭个小桌板，把遥控器固定在那上面不就行了？
真聪明，可惜现在遥控器死死黏在了地上，要想扒下来就得把整个地板拆掉。
好巧不巧，你在某宝上发现一个电动伸缩器，一接到信号，就会像一根手指一样伸出来，然后缩回去。
你大喜过望，赶快买来了伸缩器，吊在旧遥控器正上方，再量好了自己睡眠时手的位置，在那里搭了个小桌板，把伸缩器的遥控器粘在上面。这样，你睡觉之前只需要按一下小桌板上的遥控器的按钮，伸缩器就会按一下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第3天，你感觉这小桌板硌得慌，于是把床平移了一段距离，清空空中空间。但这样，按钮又太远了。于是你去某宝买了个声控灯和一块黑色的幕布，罩在小桌板上遮住新遥控器，又给伸缩器装了温度传感器。睡觉前只需拍拍手，声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到升温,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第4天,你发现最近气温变化迅速,温度传感器总是误报。于是你接了一台电脑、一个机械臂、一个视频识别仪,每隔一秒,机械臂就会操作电脑刷新显示实时的外界温度的网页,再由识别仪扫描电脑屏幕,读出温度数字,由此刷新温度基准值。于是现在,睡觉前只需拍拍手,声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到幕布内和外界温度的差值超过了阈值,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第5天，你发现声控灯时常因为环境噪音误启动，但又没有说明书，不知道怎样把它拆开来调整启动的分贝阈值，于是又买了一个语音识别信号器，把它的输出口和声控灯的输入口封在一个密闭的隔音空间里。只要你说“关灯”，语音器就会收到信号，在隔音空间里发出声波，声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到幕布内和外界温度的差值超过了阈值,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第6天，你嫌每次睡觉前都要说话太麻烦，于是在床下装了一个压力板，连接一个录音机。只要你躺下，压力板就会启动，录音机就会说“关灯”，语音器就会收到信号，在隔音空间里发出声波，声控灯就会亮起，幕布内的空间就会升温，伸缩器就会受热膨胀按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第7天，你感觉自己还是很怀念点按按钮的快感，于是你买来一个机器人，在床下压力板四周装上了复合杠杆和摇杆，把床顶起来，减轻压力板收到的力。只要你按下按钮，机器人就会摇动摇杆，床就会下降，压到压力板，压力板就会启动，录音机就会说“关灯”，语音器就会收到信号，在隔音空间里发出声波，声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到幕布内和外界温度的差值超过了阈值,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第8天，你发现你的装置失灵了，起初以为是机器人坏了，于是拆开了机器人，发现没有坏。无奈之下你只能把机器人和摇杆强行报废断开，自己摇动摇杆，发现摇杆也没坏。于是你只能把复合杠杆再拆成一节节钢棍去调查压力板，发现压力板也没坏。你只好把录音机的电路剪开，发现也没坏。只能破开小桌板看隔音空间的外壁，也没坏。于是撬开隔音空间看声控灯的接收器，发现也没坏。于是撕破幕布看声控灯的灯泡，没坏。伸缩器的手指，没坏。地上的遥控器，没坏。你一不做二不休把地板穿了个大洞把遥控器取出来，没坏。旋转器，没坏。连杆，没坏。敲开封装的盒子，原来是大灯的一颗螺丝松了。
你把它拧了回去。

第9天，你还是像9天前那样从床上跳起来，关灯，跳回床上，睡觉。
","说到祖传代码不得不提当年在移动的一段经历。
我刚入职第一天，旁边的妹纸告诉我，你是今年第五个负责这个模块的，心里凉了半截，这TMD才七月份啊，听她说最长的干了两个月。
我就不信那个邪，页面交互一般，后端不也就增删改查？能难到哪里去。看了代码才知道，too young，too simple。里面最老的代码是09年那会的，直到现在一直在维护，今刚好十周年庆典，我光荣接盘，这大概就是代码届的接盘侠吧，现在用的还是jdk1.6，不分什么前端后端，页面都是用Java写的，最坑的是里面的js，有四五个公用的js文件，大概几万行代码，注释掉的代码占三分之二，大概是我这么多年见过最多的注释了，是谁说注释多的代码质量高的？出来，我不打死他。
说来也怪，两个月了还没给我安排需求，就是来的那个礼拜说了句让我看代码，每天早上一杯咖啡，页面点一点，心情好就看看代码，日子过得很是惬意，这大概就是程序的春天吧！真不知道前面那四个哥们放着这大好的日子不过，咋跑了呢？
一天中午，项目经理喊我，问我代码看得怎么样了？从项目架构说到业务逻辑，其实有个屁的架构，随便扯了五六分钟，项目经理笑了笑，点了点头，很是满意的样子。
“小李，这有有个bug，你去修一下“
“嗯嗯，没问题“意料之中，毕竟也快两个月了。
“下个月初，你争取弄完哈“说话的时候十七八号的样子。
“没问题。“
开始写代码了，带着一丝激动，毕竟两个多月没操练了，也带着一丝胆怯，因为是个人都能看出来这是是否能顺利转正的关键一战。
两个多月来，最认真的看了一天代码，我在哪里？我是谁？我在干什么？是哪个智障写的函数，十几个行参，变量命名汉语拼音占了一大半，我严重怀疑这是小学生写的代码，还智障一样的不分前后鼻音，小学语文老师怕是后勤老师教的（真不是看不起后勤老师），函数内部无止境的递归调用，本以为快结束了又来个回掉函数，一个函数有800多行。果然出来混还是要还的，过了两个月的春天，一下子跌进了冰窖。
这样的日子浑浑噩噩的过了七八天，招我进去的那个技术老鸟实在不忍心，过来指点我。
“小伙子，你这样看代码，估计明年春天也搞不定，你这个bug，是第三个人上线的时候写出来的，你重点看下他提交代码的部分“
一语惊醒梦中人，只能用这最白痴的办法了。
看了三天，终于找到问题所在，花了十分钟，搞定。然后技术经理核查了我两个小时代码才放心让我上线。
后面有一次和项目经理吃饭，“小李，前面四个人都跑路了，我就看好你，你知道为什么当初你刚来那两个月，我啥也没让你干？我是怕你一开始就做需求，扛不住跑路。”
“经理，那代码那么老了，怎么不重构一下“
“上一次重构代码的项目经理已经被大老板开了“



","几年的代码也好意思叫shit山？这种东西得在微软/电信公司这种toB地方才恐怖。
我司有些代码我正好要升级gcc版本，要试试转docker踢到云上去，然而这批代码写于2000年前，那个酸爽哦。最早的部分可能写于1980年代bell实验室，第一批维护升级做需求的人早就退休了，第二批也退休了，每一行代码动起来都胆战心惊。
这会出现什么结果呢，重构花费时间极长，但是b端客户对稳定性和可升级性的需求不是普通客户能比，所以历代开发在这个坑上只能采取坑上盖板子这样的方式继续开发，坑传个10年20年，从底子上来看问题多太正常了。质量全是靠工程手段维持。框架稀里哗啦，代码风格迥异，逻辑不知道干什么，早期代码没有注释，指针到处乱来，文档有一本砖头一样厚的90年代开发指南，那感觉，嘿嘿嘿。


","公司代码已经40年了，最早写代码的人不知道是否活着，要命的是文档没留下。
你们几千几万代码算什么，这个比微软系统还大。项目代码堆在一起有90多G，目测过千万行。
像int2 int4 int8 uint12345678这种类型定义上千种。无意中，翻出了一个用于定义的头文件，24万行的#define，我不知道这是不是人类写的。
我们有个古老的更新记录，当然，没有汉化版，像读一本流水账样的历史书。代码被美国人、印度人、中国人、澳洲人都更新过。
时代在发展。
像文本格式的数据库早就不用了，而我们却在用它包装n层并转换成sql。
你问我们怎么添加一列数据库字段，嘿，用手写数据库，用祖传的文本工具把它转换成代码，再添加进各个工程配置中，再一个个的编译，别忘了在sql中添加这一列，对了，你用多大的数据要写清楚，32字节，不要写多也不要写少，中间空4个空格你知道吗？写错了整个工程会出现莫名奇妙的错误。这些做完了。一天结束了。
像MFC已经不美了，我们却用托管C++强行封装并中转成WPF，然后，引用WCF是作为中间桥梁进行通信的。
托管C++你们知道吗？那可是编译器都看不懂的东西。能编译通过，只是在编写的时候一直是上万个报错的，你要自己用脑子想这东西能不能编译，不能依赖VS自动检查功能。
由于底层各种封装，封成迷宫了，VS经常解读到崩溃，编译到死机，自己去看的时候，几百层的调用栈中又有几百种重构函数。
工程之间的逻辑好复杂，主要是几千个工程太多了，dll与lib已经傻傻的分不清楚了，哪些有哪些的依赖，先编译这几十个工程，然后才能编译那几十个工程，要按照一定顺序来，不然依赖会报错。想哭。
哦。。我在里面添加个helloworld是多么不容易，要写一天，模块上千个，结构体万万不能动，任何一个结构体的修改会导致整个项目的瘫痪并要重新编译一整天（也许到最后是失败的）。
看代码就像走迷宫，对着一个函数按下F12之后，等着转圈圈，然后就会出现几百个定义索引，不是老玩家谁知道应该去哪个定义索引。
迷宫都比它简单，起码只有一条完美的出路。
真是大粪堆。
吐槽完了。继续搞这坨屎。
匿了，怕公司看。
过去一年了。感官上不一样了，再搞两年成熟练工就不再痛苦了，只是英语还需要更高的水平，听印度人讲英语还是听不懂。
","驾驭屎山的唯一方法，不是重构，而是不重构。
为什么有人可以在屎山里加功能？
很简单：把屎山扒拉开，每块闻一闻，找出和你要改的功能对应的那坨屎，把这坨屎包起来（封装），你就可以假装它不是屎，是巧克力。然后，在旁边拉一泡新的屎，等它风干成型（测试通过）就可以收工了。
当然，怎样优雅地在一座屎山里闪转腾挪，做到“百屎丛中过，片屎不沾身”，还是需要很多经验和技巧的。不过说白了，就算失误了摔个嘴啃屎，臭也只臭你程序员一个，老板还觉得你很努力，客户还觉得真香。
很多愣头青觉得自己是天才，可以把屎山重构了。他们中的大部分人引发了屎崩，永远埋在了几千米高的屎山之下。
极少数人活了下来。他们真的做到了，他们真的重构了整座屎山！
重构之后的那个东西，被后人称为——屎山2.0。
当一个系统复杂度增加的时候，它的熵也会增加，这是宇宙规律。而某些有洁癖的码农，他们非要强行降低这个复杂系统的熵——不是做不到，但需要巨大的能量，也就是成本。
你想让谁来付这个成本？老板还是客户？
屎山不是一天拉成的。每一代屎山的建设者，都是非常聪明的人。他们非常清楚继续堆高屎山，未来将产生的代价。他们理性中立客观地评估了推翻屎山重建的成本，然后做出了一个充满智慧的决定：
在屎山上继续拉屎。
这个决定对于每一个人都是最优解，因为每一个人只需要对他当下的目标负责。每一次“继续拉屎”的决定都是正确的，不这样做才令人匪夷所思。如果重构屎山，客户很生气，因为交付时间更长了，还会冒出许多以前没有的bug。老板很生气，因为成本大增，而客户毫无多付钱的意思。就连重构屎山的人自己也很生气：天天钻在屎山里996，搞得浑身屎味，工资却一分钱没涨。
尿海不择细流，故能成其大；屎山不拒细壤，方能就其高。屎山就这样一天天长大，终于令最后接手的码农感叹：高山仰止，景行行止。
其实，屎山，是任何复杂系统的终极归宿。无论你使用何种语言，师从什么流派，哪怕23种设计模式样样精通，最终还是会踏上前往屎山的道路。因为，条条大路通屎山。
就连微软、谷歌、Oracle这样的大公司，他们的产品也都是屎山。Oracle每改一个功能，全公司的服务器需要全速测试几个月。chromium浏览器的源码有十几个G，虽然是开源的，但没有人敢在如此险峻的屎峰上提交自己微不足道的屎坷垃，高处不胜寒。
至于微软，呵呵……从win8到win11，10年了，控制面板还是有两种口味：一种是古早味的，一种是苹果味的。office从2016到2021，5年了，不拿放大镜都看不出有什么区别。
这段话可能会让你误以为，微软、谷歌都是垃圾。但实际上，他们是地球上最强的软件公司。世界上最高的屎山，都是最聪明的屁股拉出来的。换了一般的程序员，屎山还没垒出一个小屎包，就屎崩了，就这点水平还天天嚷嚷着要重构屎山。
乔布斯曾说：死亡是最好的创新。所有代码的最终归宿都是坟墓，而绝大多数代码早已死无葬身之地。屎山是不可能重构的，这辈子都不可能重构的。打败屎山的唯一方法，唯有另起炉灶，建一座新的屎山。这就是为什么在巨头们巍峨连绵的屎山脚下，总能有新的小屎包崛起。
当然，对于血气方刚的少年，我知道，你很可能觉得我在扯淡，屎山有什么好怕的，重构就是了。
明知山有屎，偏向屎山行。来，壮士，干了这碗屎，我绝不会拦着你。
我只会献上一本秘籍，祝你早日成功：
作为一名有理想的程序猿，我也在努力建造自己的屎山。
我想做一个能直接翻译英文pdf的工具，不是划词翻译那种，而是一次性翻译整个文件，英文pdf进，中文pdf出。这样看论文就可以偷懒了~
链接如下，感兴趣的同学可以试试。目前只有PC版，APP的坑一直没填：
大中华区Rust语言代言人 @张汉东 老师在试吃之后，只评论了两个字：
神器。
他翻译的pdf是这样的：
说实话，得到这样的评价实在出乎我的意料，因为我还从没试过翻译编程领域的文章，初看貌似效果还行。不过，我在受宠若惊的同时，也暗暗感到惭愧。因为只有我自己知道，屎山里还有多少坑没填……
不说了，我要进屎山填坑了……
如果你喜欢我这种用脱口秀style把道理讲通透的风格，可以尝尝我最近出版的两本科普书。这两本书都入选了2021年度CCF“科普阅读推荐图书”榜单。CCF是什么，对于程序员就不需要介绍了吧……
一本既不吹捧科学家的伟大、也不纠结历史细节、只想让你无废话看懂量子、还吭哧吭哧手绘100多张彩色漫画实验图解的硬核科普：
一本不屑于教Python和调参、只想和你探讨人类命运和智能本质的AI科普：
还有不赚钱、只求交个朋友的套装：

","之所以被成为屎山，因为你一碰，就会屎山爆发，那画面……不忍直视！
当你看到祖传代码时：


当你尝试改动时，只删了一行代码时，可能会发生下面这种情况

有句话，说的非常好：祖传代码就像一座很大的屎山，你见过的最大的山，每次你想修正一个bug，你的工作就是爬到屎山的正中心去！
","你管理着一个动物园
为了创收，你在动物园里修建了一个海洋馆，门票另收，吸引小孩子
结果上面下来一个工作组，说这是违规的，你一个动物园搞海洋馆另收门票和旅游局搞杜绝宰客、吸引游客的精神相悖
于是你决定钻个空子，把海洋馆“外包”出去，实际上从自己的左手转到右手。为了做得更像一点，你在地图上把海洋馆抹掉了，但为了让游客知道有海洋馆的存在，你在游客守则里此地无银三百两地加了一句“本园没有海洋馆，如果有工作人员向你售卖海洋馆的票，拒绝他们”
但你一个为了创收而建起来的动物园哪来的经费搞海洋馆？
于是你在海洋馆和大象区之间造了个异次元通道，让大象掉进海洋馆里，然后立一块牌子，说这是鲸鱼，过几天换一头大象
为什么大象这么多？你也不知道你前任跑了个什么程序，能以固定的频率转化出几头大象来
你不想知道这个，是因为上次探究为什么动物园有那么多跑来跑去的兔子的经历太具有灾难性了。你造了一个坚实的围栏，让兔子再也跑不出来，结果因为动物园空空荡荡，别的动物以为这都是它们可以获得的领地，都想跑出来。你想了想还是兔子攻击性小，于是在兔子园区底下挖了个坑道，让兔子能跑出来
兔子那么多怎么办？（其实你也不知道为什么会有那么多兔子，按理兔子园区也没几只兔子啊）于是你雇了一批员工捕杀兔子，维持兔子的正常数量
结果你发现员工杀完兔子之后处理现场时会把兔子肉和兔子血先分包扔在架子上，等都处理好了再一起丢，于是有的游客不明所以就把兔子血和兔子肉当商品买走了。没办法，你只好在游客守则里写上“动物园的饮料店不提供‘兔子血’”
过了几个月领导又下来检查了。领导看到那海洋馆里的大象的时候都被你气笑了，他问你，你告诉我这是鲸鱼？领导还发现海洋馆和动物园的员工就是同一批人。于是领导又责令你进行整改
动物园又没钱，你还能怎样？你只好在鲸鱼区贴上“大象是3D投影”的告示，然后让员工分成两批，穿不同颜色的衣服，还告诫海洋馆里的员工不要回答任何与动物园有关的问题，问就说没有动物园。为了避免下次检查的时候发现你在动物园里搞捕兔运动（毕竟兔友挺正确的），你决定给兔子肉打上“山羊肉”的标签，让人不明所以
年末的时候你发现海洋馆亏损了，原因是有人偷偷摸摸溜进海洋馆投宿（是的你开了个酒店），却不付钱。于是你给游客发放不同颜色的衣服以供辨别，叮嘱海洋馆员工把入园的时候没买住宿的人赶出去，而且1：00以后把所有灯都关了，让那些想投宿的人摸黑去吧！
你还发觉员工离职率有点高。你想了想，让员工干捕兔子这回事确实不太容易留住人。于是你把动物园员工也分为了两批，其中老员工穿黑衣服，负责干捕兔子之类的活，还有就是撕掉游客地图上的虚线——鬼知道为什么印刷厂送来的地图会有虚线！总有好事的游客沿虚线撕下一部分地图去喂动物，把动物喂死了
你的动物园终于开始盈利了——的确，它特别奇怪，压根就不是什么正常的动物园，但它能跑起来啊！发现你的动物园很奇怪的人认为你的动物园里有污染认知的东西，还写出了几张告示来保护人们。其实哪有什么“它”，就是一群秃头的程序员罢了！程序员又有什么错？

","曾经在visa工作过，感觉什么10年20年的代码简直naive，你见过1965年的代码吗？第一次看到简直惊呆了，这半个世纪的代码现在还在用还跑的好好的？
机器是大型主机，语言是COBOL，估计这一辈的攻城师都没见过吧，90年代c和java都没什么气候的时候行业50%的人都在写COBOL，现在连这个语言的名字都没法出现在教科书里了吧。
能跑就接着让它跑吧，换的话成本太高。

","我大二的时候在学校实验室有过一次失败的打工经历，大概就是学校一个实验室需要重写一部分代码，从FORTRAN到Java，我开始觉得还好，和两个朋友应聘都通过了，毕竟整个学校愿意为了打工专门学一下FORTRAN的人也是屈指可数。
拿到代码以后我们就懵逼了，这部分代码比我们所有人年纪都大，从197几年一直更新到1989年，以后再也没有人更新过，加起来有上万行，曾经有过文档但是丢失了，几乎没有注释，变量命名乱七八糟，为了让这坨代码在进入Windows时代后能跑起来，90年中期又有人专门给这坨代码用FORTRAN + C写了一个编译器，随着系统升级，编译器也不能用了，然后在2001年还是2003年又有人用 C 重写了编译器，得到了一个在当时Window版本可以用的二进制程序。但是因为系统升级以后，这个二进制程序不能用了，而且编译器也不能用了，就决定直接把最早的那堆FORTRAN代码重写。
原始代码为数不多的注释里，还有一些特别可怕的内容，类似“我也不知道这里为什么能运行，但是得到了正确的结果，千万不要改”。
我当时不知道屎山这个词，现在看到以后回想起来，简直是层峦叠嶂的屎山。
……
反正。
最后也没有重写成，解决方案是把电脑系统降级回去了。

","从前 有个函数佳佳
type add(type a, type b);
它爸希望它返回a+b。
有一天佳佳被诊断出先天过敏性疾病，给它吃666和28,它居然拉肚子了（回答了250）。
//add(666,28) ——— 250
它爸的兄弟也就是它的舅舅们想了一个办法，在给他吃东西之前看看这东西它会不会过敏。
if(a!=666&&b!=28)
return add(a,b);
else return 694;
大家发现这种方法简单粗暴。于是每一次佳佳被诊断出先天性疾病的时候都在前面加上一句if else。
N年后，大家每次要去跟佳佳吃饭的时候，都得小心翼翼的检查食物。
if((a!=666&&b!=33628)||(a!=666&&b!=28)||(a!=3666&&b!=446628)||(a!=38666&&b!=65328)||(a!=4666&&b!=528)||(a!=4666&&b!=6667328)||(a!=7666&&b!=7628)||(a!=28666&&b!=399228)||(a!=2666&&b!=428)||(a!=375666&&b!=3928)||(a!=9666&&b!=328)||(a!=6636&&b!=48528)||.....||||(a!=66976&&b!=728))
return add(a,b)
然后开始处理佳佳的过敏物
else if (a!=66976&&b!=728) return 67704;
else if (a!=375666&&b!=3928) return 379594;
else if (...) return ...;
............
else ............;
又过了N年，大家发现佳佳还可以被用来检测它亲兄妹健健的先天性疾病，于是有了

if(add(a,b)!=把上面那一坨东西写成三元操作符?:的形式，你懂的反正就是一坨)
sub(a,b)
else if (a!=66976&&b!=728) return ...;
else if (a!=375666&&b!=3928) return ...;
else if (...) return ...;
............
else ............;
后来医生对佳佳和它的近亲程程以楚楚芳芳等及其他拥有相同病症的人给出的治疗方案。
有一天，有个人发现了楚楚有一个特性，每当给它的第二个食物是0的时候它都会发脾气把家给烧了。这和它的远门祖宗球球表现的一模一样
exit(0)
可是佳佳的上司请不起球球，因为球球太贵了。
于是上司门决定给楚楚的第二道菜是0来让楚楚烧家。
exit(0) 被替代为 div(0,0);


1万年后，科技的进步，时代的前行。医生们考古发现了佳佳的先天性疾病，想对它进行治疗（debug）。
功夫不负有心人，佳佳的病被治好了。这个时候医生们发现，佳佳的病治好了，可是依赖佳佳的健健和程程们都因为佳佳的大病初愈而而疯狂。
医生们想着，既然佳佳都能被治好，那就顺便治一下健健和程程吧。
当医生们完成手速之后，发现楚楚，芳芳，开开，萍萍好像也因为他们被治好后而疯狂。 疯狂的不仅仅是他们，还有他们的孩子们（所有使用这些函数的人）。
于是医生们日复一日，年复一年的治疗啊，发现这治下去没完没了了。终于医生们放弃了，把治好的病人们又恢复了原状。（放弃debug）
终于世界又恢复了宁静。

10万年后，有个叫灭爸的人，它发现这样下去会有大量的资源被这些疾病缠身的人们给消耗殆尽。于是它打响了一个响指，所有和佳佳有关的人都被消灭了。灭爸和它的火帮负愁着年门开始了世界的修缮（重构）
终于在他们的执着努力下，所有被他们消灭的人的岗位都得到了新的替代。他们终于消灭了所有的已知疾病。

不知又过了多久，一个叫嘉佳的年前函数，被确诊为拥有了某先天性疾病。
................
","看着难受，又不能改它，只要一动，山就塌了，将自己深埋屎下，臭不可闻。
就像你有几栋楼，几百个房间，手上拿着一串没有备注的钥匙，一个一个房间试，你以为你打开了，却没想，门后还有一道门。
当你费劲心思解决了所有门，你又发现，钥匙断了。
你完全不明白为什么要这样设计，那么愚蠢，当你有了个新想法，忙碌之后，又发现自己写的更蠢。
不要试图去理解它，改变它。
这是神圣的传火，让你的下一任有点事情做。
","先给你看一下一坨屎一样的代码
这坨屎，忍忍，你有足够的时间还可以修复的。

花了我一天追根溯源了解需求；
花了一天修改代码；
花了两天对比自测，以及尽可能遍历所有异常场景，测试会怎么样，以及询问前开发，leader，产品，各个相关人士，这些问题得意见；
然后上线预防环境clone请求并行跑1天，对比两边结果是否一致，研究不一致的原因，并解决；
最后才正式上线…
300行代码终于变成30行..


如果这样的狗屎增加100倍，并随机遍布到其他100w行的正常代码中。
你试一下去解决一个bug？
你就会体会到攀爬一座屎山，并在上面采摘一个可以食用得部分的那种独特快感..

你除了骂一句 谢特shit，别无他法。
2021年6月1日
给大家介绍一下比上面更牛逼的狗屎代码。
先说最大的一个问题，增加一个字段需要同时修改10多个子项目，提交10多次github，build这些模块之前先instal一轮，模块之间编译安装的还有依赖先后..
这完美分布式单体应用，成功锁死所有修改，牵一发而动全身，这句话我算是懂了。

还有分支用来区分客户的。比如分支名huawei，就是客户华为，分支名weiruan。就是微软..….其他人无权利创建分支。
方便他自己管理项目呗

因此任意修改代码都需要“架构师”亲子处理，无其他人可以搞定。
另外公司离不开他了，整个团队中中他永远是受益者，不管招聘多少人开发效率还是太低了….一直加人…全体996也不行..然后他拥有了80多个下属….离职率百分80（能呆着超过2年的员工只有3人..）.…@可他已经升级成公司技术vp..



评论区的说kpi的同学，这就是你们想要的真实故事。
哈哈哈哈哈哈
那个代码我感觉挺多人说挺好的，没问题。
怎么说呢，确实没问题。
直男癌和撩妹高手的差别吧。
举个例子：
直男：我想和你嘿嘿嘿
撩妹高手： 我想和你一起看日出的
绝大多数人对于屎山是痛恨的，但是自己写的时候又还是写成了狗屎（包括我自己..）
这是人性，能偷懒不香嚒？做一些看不到眼前利益得事情，没动力呀。
所以才有重构，重构就是为了解决这个问题。
大概思路：
1写最直觉无脑版本代码
2优化变量名称，函数结构，提取方法，类。抽象
3刷代码规范，魔法值呀，变量eqs常量 反过来呀，bean copy用工具类，
4面向对象的优化，函数式优化
5优化过多if
6性能优化
7更好的中间件选行替代
8容错，高可靠，高可用优化
每次一点点的来，没几个人能一步写到位。
2022年2月25日
那个架构师，升级成副总之后，半年不到，巅峰结束..…他被降级成为了team leader ，管10个人…

——————
2022年11月5日
他被开除了，花了很长时间最长才找到工作。。。
","有网友觉得我们技术总监水平太差，搞个脚本都要好几天，是什么野鸡总监……
这就不得不提到屎山里的另一个大坑，最初大家想的很简单，从生产上拿一份数据放到本地库里，再修改一下代码逻辑循环生成合同……但尴尬的是我们svn上的合同模板和生产上的不一样！
进操作间动生产数据不是吗那么容易的……大量的时间都浪费在和甲方勾心斗角上，留给写脚本、测试脚本的时间并不多……
说一个亲身经历的一座「屎山」，曾入职一家成立15年的软件公司，我当时应聘的是中级程序员，但在入职几个月后，我的岗级和薪资调整到了高级程序员，这并不是因为我在这几个月中技术水平跨越式提升，而是因为这三个月中发生了以下事情：
前任组员一号和我完成交接之后跑路了！
前任组长和新招来的组长交接之后跑路了！
前任组员二号和新招来的初级程序员交接之后跑路了！
新任组长和我交接之后跑路了！
新人组员（女）在工位掩面痛哭之后，换组了！（捂着脸掉眼泪不发出声音的那种哭）
组内人手严重不足，我白天解决生产bug，晚上写新需求！
这是一座年轻的「屎山」，我是第三批接手者，历时几个月后我成了项目组中，资历最老的员工！实习生和初级程序员写出来的bug和低级错误我就忍了，都是从菜鸟过来的，勉强可以理解。
但是框架因为“高程”、“架构组”、“大手子”等人的填填补补，已经到了严重影响用户体验的程度！！！
For example！当时项目的工作流很奇葩，不论出现什么错误，都会统一提示“发生未知错误”。哪怕我照着“公司祖传框架使用手册”，在配置中填写「核算系统接口调用失败」、「当前时间不允许操作」、「xxx号风险模型校验失败」等提示信息，但客户用的时候还是统一提示“发生未知错误”！
起初因为运维人员每天都在帮客户解决这种问题，客户倒是没有多大的怨气。某一天，因为很复杂的原因，客户为了此事大发雷霆，我被要求解决这个问题。
在一顿忙碌之后，问题定位到了一个公司自己封装的jar包，反编译后发现里面的逻辑有问题。我就联系外地的架构组，让他们给我一个新的jar包，第二天我收到了回复：“这个框架很早就重构了，公司新框架不兼容老框架，使用老框架的项目都交给项目组自己维护了，你们项目组的框架应该是xxx在维护。”
xxx是一个很陌生的名字，几番打听之后才知道，xxx是我们组的第一任组长，离职两年多了！我只能在svn上继续摸索，愣是没有找到jar包的源码。几经波折之后才知道，svn之前是几个外包厂商共用的，后来因为外包厂商多了，就给每个厂商重新配置了一个svn，迁移的时候这个jar包的源码因为没有厂商认领，就被丢到了公用的svn上。
然而故事并没有结束，从公用svn找到的源码，和我通过反编译出来的代码，很多地方对不上！源码里的注释在我眼中都变成了「年轻人，千万不要动这坨屎！」
最后我只能在工作流外面，又封装了一套组件，专门用于代替工作流提示信息，并且留下了一行注释「如果你不幸看到了这行注释，不要怪我，我也不想的！」
以上只是「屎山」一角，「屎」是因为祖传代码里面有很多问题是真的臭，「山」是因为屎太多了。最讽刺的是，你可能为了治理「屎山」，也在里面拉了几次「屎」......
昨天答完问题，晚上做梦梦到了当时做项目填坑的苦逼生活，气醒了！！！今天再跟大家分享一个关于这座「屎山」的一角。
项目组负责的几个系统中，有一个负责放款的系统（前置业务系统，并不涉及记账和转款），放款是甲方爸爸非常核心的功能之一，上线之前肯定是重点测试的，所以我接手的时候已经平稳运行了数年。接手之后也没有出什么问题，整个放款业务也没有什么新需求，我也就没有深入研究，直到那一天......
背景是甲方爸爸接了个一个大单，但是因为量太大，其中几笔合同的合同号录差了，导致纸质合同和线上合同对不上，甲方爸爸就找到了我们组的一个组员去做数据处理。处理了一下午，线上合同的合同号还是没有变，组员来找我的时候已经满头大汗，我心中隐隐猜到，又要踩屎了。
我发现组员按照数据库文档修改了合同号，但是系统上还是显示旧合同号。因为已经踩了几次屎，我就直接去翻代码了。然后大量“中文拼音”命名的变量和无数意义不明的注释，看的我太阳穴一跳一跳的。
原来生成电子合同功能跟我们想象的不太一样，在完成放款操作时系统会生成一个以合同信息主键（36位UUID）命名的PDF存在本地，每一次点击下载合同其实就是根据主键ID下载这个文件，所以数据库里不论怎么修改对电子合同都没有影响，当时捋明白这个逻辑的时候我惊出了一身冷汗，但并不是因为这个设计多么的反人类......
前方高能！！！前方高能！！！前方高能！！！
前任运维人员交接的时候，说放款系统上线一年没啥问题，唯一要注意的就是因为与外部系统交互产生的交易文件很多，所以要定时清理，还当着我的面，删掉了一批日期比较早的文件。操作生产环境有指定的电脑，那台电脑上看pdf文件是没有后缀的，图标也是一张白纸，加上当时在场的人也都没有太在意，根本没有发现这些“交易文件”不太对劲。看着大概就长下面这样，谁也没有好奇的去看看里面是什么。
所以新任运维人员会定期去删除老旧文件，也就是以前的电子合同！！！
我当时就给技术总监和项目经理打电话，三个大老爷们大半夜跑到单位附近的肯德基研究对策。好在数据都在数据库里，技术总监捅咕了几天，写出来个脚本把所有被删的文件重新生成了一遍。但是服务器空间不够又传不上去，就跟甲方爸爸说电子合同这块设计不够完善（前任技术总监背锅），我们想要优化一下，不要钱的那种。
“事故”尘埃落定之后，项目经理想要追责却发现这锅只能他自己背，除了他全都是后来的......
在那个公司干了一年多，工资涨了三次，但我还是离职了，毕竟「屎」是真的难吃......当我把项目交接出去的时候，我就想起我在项目里留下的注释（屎），露出了和（幸）蔼（灾）亲（乐）切（祸）的笑容。
知乎第一个过百的评论，心情十分复杂[捂脸哭]
评论区很多朋友提出重构或重写系统，关于这一点本苦逼打工人又要吐槽了！
曾经在某一个外包项目上苦苦挣扎了一年半，除了春节基本没完整休过节假日，精神和肉体都处在崩溃的边缘，一度准备离职。项目经理苦口婆心地挽留我，发生了如下对话：
“小孙啊，这个项目明年就要重写了，到时候你就是这个业务条线的leader，其他公司哪有这个机会。”
（别走啊，现在这个摊子磨走了多少人，就你钱要得最少还干得最长）
“我敲代码还行，我这年纪轻轻的当不了领导，而且重写项目这事说了一年了，也没看到动静。”（当时参与系统原始需求的甲方，要么高升要么跳槽了，重写个鸡儿，那就是新做个系统！别以为我不知道，就是因为价钱没谈拢，重写的事儿才一直没开工，不要给我画大饼！）
“那你再等半年，年底往上申报调薪的时候，我给你多涨点，你要是不满意再走也不迟，现在这时间段工作也不好找。”
（年底先给你涨500，现在这时间段人不好招，等年后招来人了，谁还管你走不走。）
“现在工作还挺好找的吧，已经谈好两个下家了，薪资都比现在高不少。”
（别跟我画饼！）
“你这是早就准备好了啊？不再考虑考虑？”
（年轻人不讲武德！再给你最后一次机会，耗子尾汁！）
“也考虑挺长时间了，可能是我不适合这份工作吧，希望公司能越做越好。”
（绿水青山，永不相见！垃圾公司，赶紧倒闭！）
很多系统是不具备重构、重写条件的，原始需求早就没有影了，能找到操作手册都算是不错了。总不能让程序员根据屎山倒推需求吧，那得推出个啥来？！
最后脱离苦海，摆脱了一座屎山！后来找工作的时候，就尽量避免外包了，外包公司的屎山是最高最臭的，因为上面拉屎的人来自天南海北！
","你面对一个巨大的屎山。

有的块都发黑变硬了，也有的还新鲜带虾仁的。

不要试图了解都是谁拉的他们吃了什么。

新需求就撇条新的垛上去。

旧bug就试试自己拉泡稀的把旧的粘起来拍打拍打能用就行。

不要试图去refactor什么，敲开硬壳子可能溢出旁边那坨的芯，窟窿越捅越大。

什么设计模式代码风格也不用多在意，山上什么样的都有。

不行就上手捏出需要的形状hardcode。
","屎山通常由一开始的沟通不畅或学艺不精引发，这是人类工作中几乎不可避免的，尤其在当下，很多领域的程序员门槛越来越低的大环境下，上述问题更是难以避免。此时随着新需求的引入，或者已有需求与条件的变动而产生的大量编写与重构工作中，由于周期短，工作量大，可能存在人员交接等情况，上述问题将会在工作中产生极大的影响；而“祖传”只是将这种影响累计起来，最终可能就会走向一发不可收的局面，所以通常就会把各种祖传代码称为“屎山”。当然这么说感觉很空中楼阁，不如我给你个形象的比喻吧：
现在，甲方给你了一个很简单的需求：提供给他纯净的乙酸乙酯，你现在要实现他的这个需求。
首先，你可能会想到最简单的实现：就像蒸馏后的污水会变成纯净的水一样，你也可以去工厂回收废旧的乙酸乙酯，然后搭建一个蒸馏器，这样把蒸馏出来的纯净乙酸乙酯提供给甲方，任务就完成了。
但很快问题出现了：工厂送来的废旧乙酸乙酯开始混有乙醚了，这玩意沸点比乙酸乙酯还低，一蒸馏会跟着乙酸乙酯一起出来，纯度满足不了客户的要求了。好在学过高中化学的你很快给出了解决方案：既然已经花大精力搭了蒸馏装置了，不如直接把原料换成乙醇，乙酸和浓硫酸，直接制取乙酸乙酯，这样收集的地方加个饱和碳酸钠溶液，把出来的乙醇和乙酸吸收掉就好了，客户的要求还是可以满足。你对这个想法很满意，于是改造完交给手下的小A管理了。
但可惜你忘记交代小A装置被你改过的事情了，他还以为你在用上一套蒸馏废旧乙酸乙酯的那套装置，于是他望着收集装置处出了神——这出来的不就已经是纯净的乙酸乙酯了嘛，为什么还要用碳酸钠洗一遍，上一任维护者真是不懂得节约。于是小A自以为聪明的去掉了收集装置处的碳酸钠溶液。
结果这一去，甲方大大暴怒了：你这送过来的乙酸乙酯咋出口处显示的pH值还是4呢，这肯定纯度不行，以后再这样咱合作取消。小A一听这也不是个事，于是紧急连夜拆拆探探地检查了整个蒸馏器，但是不论怎么检查，都没发现蒸馏器的什么问题。“那既然蒸馏器没问题，肯定是出口处那个pH监测器坏了”，小A如是想到。于是在小A的一番调整下，显示的数值调整到比实际的数值大3，这样看起来就是7了，完美。甲方大大看过后也点头，这件事就这么结束了。
直到小A的接班人小B到来了，小A临走前告诉他，那个pH检测仪是坏的不要随便乱动，蒸馏器加的原料是废旧乙酸乙酯，你只要看好蒸馏器就行。但是这个小B可是个人才，他一番折腾后发现pH检测仪可是太正常了，就是被小A人为调大了3，这小B可是气不打一处来，好嘛，小A你自己瞎调赖机器有问题，看我给你调回去。
结果调回去后小B傻眼了，咋蒸出来的东西pH值都是4，但好在小B没那么傻，发现加料的地方可不止一个孔，还有一个孔加的是浓硫酸，小B想了想，既然另一个孔小A说是加的废旧乙酸乙酯，那这个浓硫酸估计就是干燥废旧乙酸乙酯用的。“虽然硫酸难挥发，但谁知道这蒸馏温度有没有人动过，没准是少量硫酸也被蒸出来了呢”，这样想着，小B把浓硫酸换成了中性的无水氯化钙。
结果这下好了，问题更大了，不但蒸出来的产物pH值比4还低，而且居然还能溶在水里(乙酸乙酯几乎不溶于水，这里应大家要求额外写一些注解:浓硫酸，无水氯化钙和下文的无水硫酸钠都可以用来除去乙酸乙酯中的水；但是浓硫酸在这里还有一个作用:帮助乙醇和乙酸反应生成乙酸乙酯。小B在这里擅自去掉了浓硫酸，那蒸出来的基本上就是乙醇和乙酸的混合物，自然pH值不对劲)，小B赶快换了同样是中性的无水硫酸钠，但依然是这样。结果就是，在停工了整整一天后，小B也没能解释清楚这股子无名之酸是哪里来的。
伴随着甲方大大的反复催促，这工不能再停了，但是问题又确实查不出来。没办法，小B只好在产物里加一些生石灰，然后额外加一套过滤装置把多余的生石灰过滤走，最后把测定出pH值合格的产物交给甲方。
从此，本来一套简单的蒸馏器，在收集处不但多了一个生石灰添加装置，还多了一套过滤装置，不仅如此，还有小B留下的温馨小提示：“不要动加料口处的浓硫酸和收集处的任何装置，本生产车间严格依靠这些装置运行，任何的操作都可能会导致生产无法进行”。
屎山就是这样炼成的；这下你是不是就懂得，为啥很多祖传几代的代码，就会不可避免地变成“屎山”
"
20,学 Python 都用来干嘛的？,"最近做了个Python办公自动化的Live讲座，里面对技术讲得更加详细
大家有什么编程或者求职的问题可以在值乎向我提问哈
Python基础知识小技巧

看到这里，大家不要忘了关注朱卫军哦，还写了好多好多好多~
","能写的东西可太多了，日常生活的有这么些有趣的教程：
比如哄哄女朋友：Python导出微信聊天记录并生成词云，备用地址：
向手机发送通知：教你如何使用Python向手机发送通知(IFTTT)，备用地址：
文献搜索工具：你不得不知道的python超级文献搜索工具，备用地址:
制作日历：Excel+Python=精美壁纸日历 任意DIY
检测人脸是否佩戴口罩：20行代码检测人脸是否佩戴口罩，备用地址：
打水印：超简单Python安全批量打水印教程！
提取音乐高潮：Python 制作音乐高潮副歌提取器，备用地址：
如果你想成为超级极客，可以看看这些文章：

树莓派+智能音箱：Python声控普通风扇、Python声控开机
树莓派+摄像头：Python人脸识别开机
Python 深度学习图像风格迁移

想看更多
更多有趣的Python教程欢迎关注公众号：Python实用宝典
或者访问网站：Python实用宝典
","熊孩子浏览器
我们家娃喜欢看电视，一看就没够，为了让她在看电视的时候做点儿有意义的事情，我用python做了一个小程序，叫bear_kids_player. 说起来也简单，就是在播放视频的时候每隔一段时间弹出一个对话框，里面有一个问题，让孩子输入。答对了对话框就销毁，然后视频就接着播放；答不对，对话框就一直在那里，视频停止。
最初的设定只是让孩子输入字母或者做做加法，后来加了一点改进，目前可以显示图片，并且自动朗读显示的单词。
具体安装只要用pip install bear_kids_player 就可以。
安装结束以后，用如下命令可以启动：
ctrl+o 可以打开视频
ctrl +F2 可以关闭视频
在 .../bear_kids_player 文件加下有一个config.csv 文件，可以对一些参数进行设定
比如：Intervals(间隔时间)， 打开文件的快捷方式，关闭文件的快捷方式，题库筛选的阈值，题库筛选所需的类型
另外还有一个questions.csv 文件，这是一个题库。这个题库可以自己输入题目，答案，类型，以及想要显示在对话框里的图片链接，可以依据个人的情况自己添加题目。
下面是一个简单的演示
当然由于朗读功能使用的是gtts实际上链接google获取音频的，所以在国内可能朗读功能会不那么好用。不过本来也就给自己娃写的程序，倒是也没指望推广。
python的主程序用的pyqt5，总共用了我大概一周业余时间完成，由于对一些库以及发布python包不是很熟悉所以浪费了很多时间。
此外，视频解码程序是K-Lite_Codec_Pack_1526_Basic（17MB），可以从

下载到，需要安装解码程序才能对常见的视频格式进行支持。

家里的娃娃三岁半，原本小写字母认不熟，许多字母会搞混譬如p，q，g，d，b，还有一些小写字母认不出，教了无数遍都不上心学。自从使用了这个程序大概三天左右，小写字母都差不多认识了。增加了单词输入题目以后，娃娃只用了两天就可以不依赖我的帮助，自己把我事先设定的10个单词准确输入了。我们家娃从来没接触过键盘，有这个成绩我还比较满意。
后面可能会做些升级，比如要求娃朗读，然后用pyttsx库做语音识别输入；或者去掉她输入熟练的单词的显示，让她依据读音输入单词。或者换些加减法等数学问题。总之慢慢添加新功能。
程序没有很认真地注释，距离工业级水平相差甚远，目前就是东拼西凑 能用就行的状态，不喜勿喷。
","当然，如果你想自己做一些事情，比如爬一下喜欢的图片，爬某个网站，或者是抢火车票都可以，下面我们就来说说具体的！
配套资料：https://pan.baidu.com/s/12mlxhKw1tFPSDuAZkkBLKQ 提取码：i1or
配套资料：https://pan.baidu.com/s/1E3O-gFBbzaUcjtvSBROBtg 提取码：9epq
配套资料：https://pan.baidu.com/s/1FcO28DBQIrFqZ1_dTyRitw 提取码：yem6
配套资料：https://pan.baidu.com/s/1_JankxPLCvwqpD8MR7ZoqQ 提取码：edrg
配套资料：https://pan.baidu.com/s/1jHMLUT4H-Bf1EYKlDZjwIQ 提取码：6arw
配套资料：https://pan.baidu.com/s/11hUdZjrmjI91vk-hF61uug 提取码：quha
更多Python用途（想学习哪个可以直接私信我获取哦）：

关于Python的学习，可以看Python入门教程完整版，600集让你轻松入门Python！
Python入门教程完整版（懂中文就能学会）
配套资料：https://pan.baidu.com/s/12-dymJ8FjWzh6b5NKJuP3Q 提取码：gqly
","2020年03月29日-更新：
有不少小伙伴私信我学习python的方法。我简单回复一下。
入门推荐：
1、廖雪峰的python网站。讲的很基础，很适合初学者入手。
2、有了基础后推荐做一些小项目。使用python做个表格，自动处理数据。或者参考我这篇文章做个爬虫。在这个过程中肯定会遇到很多的问题，这也正是提升自己的最好方式。
3、假如你是程序yuan或者科班学生，那么更推荐你刷LeetCode。选择python答题。双管齐下，效果更佳。
4、最后的最后，推荐一款我最近在用的学习辅助工具。百词斩——夜曲编程。它的优势在于：
复杂+理论——生动+理解+样例+练习+纠错。主要专门对计算机考试，但是并非是刷题，而是重在理解
零基础——深入进阶，对小白友好，对基础不好比较友好～。有学习群、助教全程陪伴学习，疑问可以在线解答，可以反复与大师沟通经验。
感兴趣的同学可以关注【夜曲编程】，后台回复【免费教程】开启白嫖之路。
有什么python下载问题，和库的安装、删除的问题都可以找夜曲编程的人员问问，就不用花精力捣鼓下载python，学习python的过程会更加方便。
-------------------------------------------- 我是分割线 -------------------------------------------
我来更新一波，最近又学了些骚操作，那就是查阅网上的图片，更进一步来说可以瞻仰漂亮小姐姐的图片。
有时候当你浏览这么一个话题时。
想要一次性全部下载图片，作为珍藏，但是总不能手动一张张保存吧，这时候就要祭出时代的翘楚，乱世之英雄了。
好了，话不多说，先上代码，你们拿去运行，收获了喜悦之后，再来体验知识的曼妙！
此代码，直接在cmd中能跑起来，自动在当前目录创建一个文件夹存放图片。
现在，我们来开始讲解具体的实现原理，实现步骤，实现方法。
这部分下次更新，我要去睡觉了。
看了各位dalao的回答，又增长不少知识。心中不禁感叹！
我当初学习Python的目的很简单，为了解决工作中的问题，提高工作的效率。我的工种是嵌入式软件，按理说与Python八竿子打不着，但实际恰恰相反。
我学习的背景为，我负责开发的设备每天都会产生大量的日志，而通过日志数据可分析bug。以前都是人工统计，就是一个一个的数，看的头昏眼胀，数据量小的时候勉勉强强还行。但数据量大了之后就凉凉。所以我学习的目标就非常明确了。所以我建议题主带有目标的学习，就不会出现不知道该如何练习这类型的困惑了。
好了，啰啰嗦嗦又讲了一大堆。总而言之一句话，可以分析数据，解决bug。
那么问题抽象出来，如何从大量的数据文件中寻找制定的内容呢？
一、实现思路：
二、代码实现。（为了更有说服力，那就贴一下我的代码，仅供参考）
以上为代码实现！（话说知乎的编辑为什么没有代码类型文本的编辑呢）

","如果你还没有开始使用Python，答应我，把这个回答看完，如果你真的学习并深入使用过Python，我想你一定会爱上他，并且对于Python的未来充满期待。
对于Python而言，不光是简洁的语法，它广泛的应用场景，完善的语言生态，丰富的库，都吸引着我不断地探索，接下来，我分两个方向和大家聊一聊 Python在各个领域中的降龙伏虎之能，不要走开，我们一起探索一下。
可能几年之前，说到数据分析，你并不会想到Python，但不知从什么时候开始，数据分析师的简历上，Python已经成了最亮眼的加分项。各种数据分析框架的出现，让Python这种本就极其简单的语言更加方便易用，让数据分析师可以将更多的经历放在数据本身。而后随之而来的各种数据可视化框架，也让数据分析工作不再需要切换不同的语言不同的软件，将所有的工作集中交给Python，他都可以用最简单便捷的方式帮你完成。
话说数据分析是当下一个非常热门的方向，如果你想学习的话，可以学习知乎知学堂推出的官方课程，学习3天，只需要1毛钱。知乎数据分析大V猴子老师讲课，近距离跟大佬学习。
学习数据分析方法，通过方法拆解任务问题，思维+方法双重进阶，告别数据小白。
快来报名吧！

曾几何时，讲到科学计算，我们想到的就是几个头发花白的老教授在实验室里不停的计算，但如今，我们每个人都可以站在巨人的肩膀上进行科学计算，这个巨人就是丰富的科学计算库，我们只需要几行或者十几行代码就可以做到数据的预测，评估，图像的判别，修复，路线的规划，修改等，随着近几年Facebook，Google，百度等大厂的加入，Python在科学计算方向的地位水涨创高，现在已经成为数据挖掘，机器学习，人工智能等的第一编程语言，相信过不了多久，可能我们人人都是数据科学家吧。
大数据现在可是风口，不亚于10年左右的移动互联，怎么能少了Python的身影呢！近几年Python你在大数据领域的发展也是风生水起，虽然无论是实时还是离线计算，Python你的性能都是远不如Scala与Java的，但是Python的易用性，以及丰富的库，大大提高了大数据开发者的工作效率，同时，Python能够更好的兼容各种科学计算库，让大数据的开发从根本上规避了各种复杂的技术问题，摆在我们面签的更多是业务，程序员的个人能力被各种框架无限放大，知道项目上线前的一刻，你可能还不知道自己原来如此优秀。
通常，脚本编写是指编写小程序以让简单任务自动化。从简单的定时开机关机，批量修改删除文件，到复杂的游戏外挂，自动抢票，整点自动秒杀，再到企业级的定时任务脚本，自动化运维，自动化测试等等都是脚本的应用，简单的开发过程，以及强大的功能，让Python可以在脚本编写领域和Shell有一较高下之力。
说道Python就不得不说说爬虫，很多人了解Python都是从爬虫开始的， 至于为什么，我只能说，贴近生活，简单高效，既可以解决工作，生活中的数据需求，又可以做些私活赚点外快，何乐而不为呢？
很多人都认为Web方向是Java的赛道，没错，现在市场上90%的web服务还是java实现的，但是由于Python服务的简单高效以及完美的扩展性，让技术门槛变得非常低，几行代码就可以制作一个简易的Web服务器，现在有多少大学生的第一个博客项目就是Python编写的呢？
对于嵌入式应用，我不在行，但是我知道Python可以配合Rasberry Pi工作。它在那些硬件发烧友中非常流行。
您可以用PyGame库来开发游戏，但是，它不是最流行的游戏引擎。如果把游戏作为兴趣爱好，您可以用它来构建项目，但是，如果您真的要做游戏开发，我个人不建议选择它。
相反，我推荐您用Unity的C#脚本，它是最流行的游戏引擎之一。它允许您在很多平台上构建游戏，这些平台包括：Mac、Windows、iOS和安卓。
您可以用Python的Tkinter来开发，但是它似乎不是最流行的选择。相反，用Java、C#和C++等语言开发桌面应用看起来更流行。最近，一些公司也已经开始使用JavaScript来创建桌面应用程序了。比如，Slack的桌面应用程序是用Electron来构建的。它允许您用JavaScript来构建桌面应用。
就我个人来说，如果我要构建一个桌面应用，我会用JavaScript。它允许您复用Web版本的某些代码（如果有的话）。
当然，Python的能量不仅仅如此！！！我们一起期待Python带给我们的其他震撼吧。
希望我的解答可以对大家有所帮助，也欢迎大家随时补充交流。
","“学 Python 都用来干嘛的？”看了一些小伙伴们的回答，已经列举了很多应用。那么这里再为大家补充一款同样免费、好用，而且更加灵活的 Python 应用工具，那就是：SeaTable 表格，它同时结合了协同表格的易用性和数据库强大的数据处理能力，支持“文件”、“图片”、“单/多选”、“协作人”、“公式”等丰富的数据类型，能帮我们用表格的形式来方便地组织和管理各类信息，和专门的软件系统一样强大。它还可以按照需要进行扩展，实现数据处理的自动化和业务流程的自动化。它自带数据收集表、 Python 脚本、JavaScript、API 、可视化插件、数据处理、BI高级统计分析、自动化规则等功能。其中在 Python 方面，就提供了完善的 Python API，我们用它可以快速地开发出自定义数据处理流程，可以基于表格快速实现各种 IT 小应用、工作流程，甚至业务系统等。
再具体点来说，在 SeaTable 表格中，我们可以上传 Python 脚本到到平台，可以把脚本和数据放在一个地方进行管理，不需要再单独找一个服务器。同时，可以在表格中根据不同的需要存储多个 Python 脚本文件， 一键点击运行或通过设置自动运行就可以达到我们想要的效果。而且，相比于传统的 Excel 表格， SeaTable 表格支持单表千万级数据，同时提供 SQL 查询接口等。为 Python 应用提供了完善的功能支撑。
另外，它支持免费私有化部署，可以用 Docker 方式，简单易维护。
下面，我们就来看 Python 结合 SeaTable 表格的一些应用。实操举例：
用 Python 从维基百科中抓取往届举办冬奥会的城市数据， 然后自动填入到 SeaTable 表格中，并用 SeaTable 表格的可视化插件自动生成城市地图、城市图库。
比如我们团队平时管理的站点就有20多个，全部使用的是免费的 Lets' encrypt 证书，并通过脚本在证书过期前自动更新证书。偶尔会出现脚本没有配置对或其他的原因导致证书没有正常更新，尤其是对新部署的站点。这就需要制作一个应用来解决这类的问题。使用案例如下：
比如用 SeaTable 表格做了一个股票池，将股票名称、代码、相关文件资料等信息都记录到了一起，并且增加了一个“股价更新”脚本，通过代码调用网上的股价数据，一键点击就可以自动更新股价，甚至还可以设置每天自动更新等。这样，查询和管理自己的股票信息就变得更简单方便了，而不用每次必须登录证券交易软件来查询。
使用案例如下：
比如在本案例中，本活动的打卡规则是：参与者须连续9天，每天打卡一次，并且打卡时间是在16点至22点前。如符合规则，那么活动结束后，我们会如数返还之前缴纳的费用。因此，我们会按打卡规则编写脚本代码。利用编写好的脚本筛选掉不符合打卡时间的打卡者。
下方这个视图中的“标记”列，就是用来自动标记通过脚本筛选出的不符合打卡时间的打卡者。
完成上一步后，我们在下方的视图表上，点击右上角的“脚本”，将编写好的脚本代码粘贴或者导入进去。然后就可以点击运行脚本了。
脚本会对「标记筛选视图」 里的汇总数据自动进行如下处理：
运行脚本后，如下图：
脚本地址：
https://github.com/seatable/seatable-scripts-cn/blob/master/examples/python/verify_records.py
后面一步更简单，用统计功能统计出连续打卡9天及以上者即可。本案例如下：
比如，从考勤机中导出来的打卡记录，存在每人每天的具体上下班打卡时间都在一列里，也存在着每人每天有多次打卡时间的记录。那么我们用脚本就可以从表中获取每人每天的最早打卡时间作为上班打卡时间，获取最晚打卡时间作为下班时间。并且把每人每天的最早打卡时间、最晚打卡时间统计到一行，这样就十分清楚了。案例如下：
案例如下：
“按钮”是 SeaTable 表格的一种交互式字段类型，在用了“按钮”列类型的单元格中，通过点击按钮或自动化触发，就可以执行指定的动作，自动完成一些数据处理和工作流程。这些动作包括但不限于：运行脚本、发送邮件、发送企业微信消息、将行复制到另一个表、修改行等。
限于篇幅，本回答就介绍这么多，SeaTable 表格功能丰富，使用灵活，我们可以配合使用，快速打造出自己的应用。

","先来看看，大佬都用Python干啥。
还有人用 Python 来买房。
实验楼上面好多 Python 项目，真的是可以做很多事情，下面一起来看看！
1. Python 数据分析入门与进阶（数据分析方向）
通过 Python 数据分析和算法，实现【苹果公司股票分析、实验楼课程数据统计、用户情绪分析、潜在客户分析】等项目：


2. Flask + VueJS 全栈 Web 开发实战（Web开发方向）
使用 Python 的 Flask 框架和 VueJS，通过两个实战项目留言板项目和论坛应用的练习，掌握 Flask + VueJS 进行 Web 开发的能力。


3. Python 实现搜索引擎（爬虫+Web框架）
利用 Python 异步特性实现异步爬虫系统，一步一步地将构建索引、索引压缩、排名算法等环节编码实现，最后利用异步 web 框架 sanic 构建后端实现一个完整的垂直搜索引擎站点。


4. 基于 Python 实现微信公众号管理 Redis 服务器（公众号后台管理）
实现一个 Redis 服务器监控工具，第一部分实现了 Redis 服务器管理和监控信息获取的 API ；第二部分创建一个用户系统接入微信公众号平台。借助这个项目我们可以进一步学习 Web 开发中的一些知识。


5. Python 使用机器学习玩转 Flappy Bird 游戏（机器学习）


6. Python 新手入门课
7. Python 异步网络编程实战
8. 基于 Ansible + Celery 的运维开发平台
9. 采用微服务架构基于 Flask 实现电商网站“淘贝网”
10. 基于 Django + React 实现电商平台
11. 基于 Django 实现问答社区
12. 使用 Python 实现一个轻量型数据库
13. Python 实现类似 Redis 的 NoSQL 数据库
14. 基于 Django 实现 Upwork 众包网站
15. 基于 React + Flask 打造私人专属网盘
16. 异步 Web 框架 Sanic 设计与实现
17. Python 异步网络编程实战
","还能一键扣图，让开淘宝店的设计师下岗，在一旁痛哭流涕……


再也不用担心工作忙，没法经常和她/他/它聊天了。
可以实时知道女友的情感情绪指数，再也不用担心女友莫名其妙生气了。
还能顺道教女朋友学英语（女朋友一定很惊喜）
为了方便快速开发，我们使用python中的wxpy模块完成微信的基本操作。
首先，我们设置一个config.ini配置文件，并从这个配置文件开始读取信息。这些参数一看就懂，所以无需多言。
设置完相关参数以后，我们再来学习一下，如何每天教女友学英语：
如果你愿意，可以在上面对时间的判断中，加入一些其他你想要的，这样你女友就更开心啦！后期如果有时间，我将会加上以上节日问候功能。
接着，开启微信机器人，为了程序的健壮性，自动判断一下操作系统，根据不同操作系统执行不同指令：
只有每天的问候和节日问候是仅仅不够的，我们必须时刻知道她的情绪指数，这里可以使用snowNlp或者jieba来做分析，但是为了能够在打包成exe可执行文件时使得程序尽可能小，我们采取直接调用接口的方式来做。代码如下：
教完女友学英语后，开始把我们的关心语发给她。这里涉及到wxpy模块的相关操作，很简单，看我的例子就会了：
最后，就是如何每天定时发关心语给女友的问题了。
首先来个while循环，365天无限关心
最后，输入以下代码开始守护女友模式吧~
pip安装下列包：
设置以下内容：
至于没有女朋友的……
要不考虑一下它
这张逼死淘宝专业抠图店家的照片，用3行Python代码，花5秒就能超高精度抠图。
这里的 API 接口来源于 Remove.bg 网站，一个邮箱账号可以申请一个免费接口，可处理 50 张照片，如果想处理更多或者生成高清照片，需要买套餐，算下来价格大概是 1 元一张。
上淘宝搜索「证件照换底色」的店铺，发现多数店铺收费是 5 元，觉得利用好价格差空间，应该有商机。
接着比较感兴趣淘宝店家是怎么抠图的，抠图的质量如何，于是选择了排名前两位的店家来做测试，跟掌柜开始了一段「套路」聊天。
先找了第一家店主，店主上来就说先发照片，抠图满意再付款，于是就发了文章开头那张比较难抠的一张，想看看他们水平怎么样：
没想到店主这一抠就是二十分钟。。。
满心期待地打开图片一看，头发丝抠的不好，照片色彩也变了：
跟第二家店掌柜聊了后，也是花了 16 分钟弄好，比第一家稍好一点：
把三幅图一对比，从头发丝抠的效果和照片的色彩还原度就可以看出还是 AI 效果最好，而且只需要 5 秒钟。
于是，大致可以总结这款 AI 工具从效果和效率上基本碾压手动 PS 的淘宝店家。
心疼掌柜，花了 20 分钟还没有拿下我这一单……
这么难抠的图 AI 工具效果都好，那简单的证件照应该更没问题，基本确定有商机。




接下来用 Python 把上面的代码进行完善打包成 exe 文件执行。
轻松实现这样的功能：只需要简单敲几下键盘，就可以随意批量更换照片的背景色（常见的白、蓝、红三种颜色），然后秒换背景出图。
效果如下：
具体实现很简单，第一步输入 API，第二步输入图片所在文件夹，接着程序就会先抠图，生成带透明背景的 PNG 格式图形。
接下来第三步利用 PIL 库来设置图片的背景颜色，键入一个字母就可以秒生成对应的背景色证件照。
这样就做成了一个简单的证件照更换工具，拿去开个淘宝店和抠图的设计师抢饭吃没有压力……
估计打死店主也都想不到让自己下岗的是几行代码……效率还是自己的N倍……
此工具可关注公众号“七月在线实验室”后，发“证件照”获取。

↓↓↓
公号后台回复“666”。即可免费获得 七月在线【面试求职 第四期】课程+最新升级版《》电子书。

《名企AI⾯试100题》涵盖计算机语⾔基础、算法和⼤数据、机器学习、深度学习、应⽤⽅向 (CV NLP 推荐 ⾦融风控)等五⼤章节，每⼀段代码、每⼀道题⽬的解析都经过了反复审查或review。
部分内容展示

","我们在做技术方案的时候，系统架构图是必不可少的。
轻松用 Python 快速绘制出一份精美且清晰的架构图，省去拖拽调整连线的步骤，让你分分钟上手。
用 Python 做个陪着自己玩的聊天机器人，多有意思啊，想和它聊啥就聊啥，也不会烦。
爱动弹了，就再升升级，搞个群聊、私聊的~
用 Python 模拟手写体汉字，基于 Python 的 PIL 就可开发实现。
将图片转化成各种较小图块拼接成的图像工具。
马赛克风格的图片转化工具，支持自定义拼接图案和符号。
工具实用方便、代码简单易懂，适合对图像感兴趣的小伙伴学习和上手。
Python 强大的模块系统，可以高效的完成办公自动化的操作，轻而易举实现 Excel 自动化、Word 自动化、PPT 自动化。
比如文件自动分类：
比如一键删除重复文件：
比如批量格式转换：
比如轻松进行图表操作：
Python 写的微博爬虫，命令行直接启动。
可以连续爬取一个或多个新浪微博用户的数据，并将结果信息写入文件或数据库。写入信息几乎包括用户微博的所有数据，包括用户信息和微博信息两大类。
支持获取微博用户、内容字段丰富。
以后去掉背景图，把自己从图片里抠出来，咱谁也不求，Python 就能办！
不光抠图，剪视频咱 Python 也行，不只是单个剪，批量处理也么的问题！
只需两步，就能用 Python 做自己的专属二维码！
","哈哈哈哈哈，我来说我来说！！！（收藏的时候记得点个赞呀~）
python可以写很多好玩的东西呀，本回答包括：
所有源代码都可以在这找到，里面现在有20多个小游戏：：
https://github.com/CharlesPikachu/Games
随便举几个例子吧。
1.1 坦克大战
效果：
介绍：
1.2 支持联网对战的五子棋
效果：
介绍：
1.3 推箱子
1.4 2048小游戏
1.5 炸弹人
等等。
这里还有个姊妹项目：
https://github.com/CharlesPikachu/AIGames
主要是设计一些AI算法来自动玩小游戏的：
例如：
等等
2.1 模拟登录
因为爬很多网站都需要先对网站进行模拟登录，然后才能获取到数据，所以自己写了个简单的模拟登录库，名字叫DecryptLogin。
项目地址：https://github.com/CharlesPikachu/DecryptLogin （欢迎给个stars呀~）
项目开源文档：DecryptLogin中文文档 - DecryptLogin 0.1.0 文档
你只需要pip安装这个库：
然后就可以简单地实现很多网站的模拟登录操作啦，例如模拟登录知乎(需要手动输入验证码)：
如果你不想手动输入验证码，可以自己写个验证码接口函数：
(PS：楼主也正在筹备为这个库搞个hackcaptcha库，专门解决登录过程中的验证码问题，项目地址：
https://github.com/CharlesPikachu/hackcaptcha
项目还在开发中，弄好了再详细介绍吧...)
言归正传，DecryptLogin库的项目地址里还有很多和模拟登录相关的有趣的爬虫小案例：
可以供新手学习爬虫使用，例如：
2.2 写个音乐下载器
项目地址：https://github.com/CharlesPikachu/musicdl
项目文档：https://musicdl.readthedocs.io/zh/latest/
写这个包的主要动机是我想用树莓派做个声控音乐播放器。你只需要pip安装该库：
然后写几行代码就可以快速实现一个音乐下载器啦：
运行效果如下：
更详细的介绍你可以自己查看项目文档，各种接口调用起来还是很方便的。毕竟我自己也要拿来玩耍。(禁止商用哦~用的公开的API，只能下载各个平台的免费音乐，侵歉删~)
2.3 爬爬表情包
知乎上的表情包其实挺多的：
抓到的表情包还可以用来拼图玩T_T：
2.4 其他
等等。
所有源代码都可以在这找到：
https://github.com/CharlesPikachu/Tools
里面的内容包括：
举几个例子吧。
3.1 艺术签名生成器
效果截图：
介绍：
3.2 简单的翻译软件
效果截图：
介绍：
3.3 多肉数据查询系统
效果截图：
介绍：
等等。
4.1 DeepDream
效果：
介绍：
代码：
https://github.com/CharlesPikachu/DeepDream
4.2 CNN模拟生命游戏
效果：
介绍：
代码：https://github.com/CharlesPikachu/CNNLifeGame
4.3 生成会跳舞的小姐姐
效果：
介绍：
代码：https://github.com/CharlesPikachu/DanceNet
4.4 颜值预测
效果：
介绍：
代码：https://github.com/CharlesPikachu/isBeauty
4.5 铅笔素描画自动生成
4.6 快速风格迁移
等等。
更多有趣好玩的python应用，欢迎关注我的微信公众号：Charles的皮卡丘
很多小伙伴反应Github里python发送邮件来控制电脑的案例使用起来不太方便，时间太久了，我也忘了当时怎么构思的，不过授人以鱼不如授人以渔，最近我看到一个不错的批量发送邮件的课程，十分不错：
是夜曲编程出品的“python入门课程”中的一个小案例，里面还有很多其他有趣的python实战小例子，可供新手学习完之后巩固自己的知识。
学习完之后你就可以根据自己的需求自己设计一个用邮件远程控制自己电脑的代码啦～
另外，为了帮助不自觉的小伙伴更加主动地学习相关的课程，夜曲编程还独家推出了课程奖励机制，完成学习挑战的小伙伴即可获得夜曲编程提供的一些奖品，例如蓝牙键盘和夜曲独家知识卡片等等。
感兴趣的小伙伴可以关注一下他家的公粽号“夜曲编程”，
后台咨询具体的课程细节。注意，他家的课程都是可以开课三天内无条件退的哦，担心课程设置不适合自己的小伙伴完全可以先入手尝试几天，看看课程是否真的适合自己。还有扎实的免费课可以拿，去咨询一回复下「免费课程」就行，虽然是免费的，但是也很扎实。
","不知道别人，我最开始学Python纯粹是出于兴趣。
只有兴趣使然的Pythoner，才能真正付出足够的时间和精力，每天100行代码、100分钟视频、100页书，坚持锻炼自己的技能，最后成长。
动手实操 | 如何用 Python 实现人脸识别，证明这个杨幂是那个杨幂？
网红和明星越来越像，脸盲症发作了？
别怕，写个程序帮你认人就行了
充气玩玩什么感觉？Python告诉你
用Python来玩一把充气娃娃“云测评”。。。
提高驾驶技术：用GAN去除(爱情)动作片中的马赛克和衣服
没时间解释了，快上车！
Python Crawler - 网信贷黑名单数据爬取
借钱出去的时候，要不要先看一下借款人的信用？
去看一下信用黑名单吧，要是借款人名字高挂，这钱还是不借了吧
案例里是将结果输出到txt的，大家也可以尝试讲这些转成pdf或者输出到其他更方便查询的地方~
Python小工具: 发个周报邮件给老板
每周都要发周报，烦死了。
照着这个教程做一篇，以后统统全自动发送，爽不爽？
上面这些小项目能不能激发起你的兴趣？
如果你有了兴趣，那我们就要谈更深入的问题：
当以职业为目标的时候，所需要的技能深度比单纯的兴趣所致要高得多。
Python的方向太多，所需要的能力也太多，所以接下来我就简单给大家做一个罗列：
1.Web方向（后端及全栈）
Web一直是Python爱好者就业的一个大方向，学习资料也比较全，岗位数量相对来说比较多。Python的优势在于编程效率，这一点上强无敌。但是受限于动态语言特性和使用者的水平，面对一些比较大的工程可能就没有那么得心应手。
想要从事Web方向所需要的能力：
HTTP协议、HTML5&CSS、Web前端基础、jQueryWeb前端、 ES6Web前端高级、React-web框架、后台数据库开发、Python框架 Django、Python框架-Flask
2.爬虫&数据采集
这一方向目前来说是入行最快的方向，除了爬虫岗位多用的Requests、Scrapy还是比较简单的，也会涉及到分布式和数据库的一些基础知识。
想要从事爬虫方向所需要的能力：
浏览器调试、数据分析与性能调优、消息中间件、数据存储与redis数据库编程、反爬技术、Selenium与 PhantomJS开发、常用爬虫框架Scrapy与平台
3.数据分析&数据挖掘
数据分析是一直是Python的强项，数据分析三大库放眼整个数据科学领域也是最优秀的存在。数据分析岗位目前是也比较火热，现在开始学习算是不错的时机。
从事数据方向需要从事的能力：
数值计算Numpy、数据可视化Matplotlib、数据分析Pandas、数据规整、数据清洗、数据合并、文本分析、数据挖掘、推荐系统
4.自动化、DevOps
Python的自动化方向岗位也是比较多，但是这一领域的出彩更多是源于Python本身的学习难度低成本低。现在运维领域比较热的概念DevOps更多也要依托于Python。一般来说，DevOps一般会要求具备相应的运维基础能力，收入也会更高，所以如果有运维行业的同学可以考虑这个方向。
从事自动化需要具备的能力：
Python自动化、任务调度系统、任务流程系统、CMDB资产管理、web 可视化、JumpServer、k8s容器化、Go语言编程
5.机器学习、人工智能
我个人非常不建议大家从事这个方向。AI岗位工资高的超出想象，但是从业门槛也超出想象，确实能年薪五十万，但要求是985甚至清北学历，有些甚至要博士学位。[1]希望大家不要被无良培训机构忽悠，花个几万块钱是小事，浪费掉的时间比那些钱更宝贵。
从事AI方向所需要的能力：
机器学习库scikit-learn,特征工程、常见机器学习算法kNN、SVM、决策树、随枳森林，量化交易、深度学习Tensorflow,线性回归，神经网络。

我制作了一个表格，将以上提到的五种方向，从学习难度、入门门槛、回报系数三个方面来评分，当然其中有我的个人倾向，各位可以做个参考：
最后，如果你看完这篇文章也想成为一名Python使用者，不妨看一下我花一个月时间整理的Python入门教程：

","很多人跟你一样，只管闷头学，却不知道为什么去学，往往的理由是：“简单啊”、“收入高啊”、“人生苦短，我用Python”，好吧，那我这里简述下学了Python可以干嘛。当然是为了赚钱啊，哈哈！
Web应用开发
服务器端编程，具有丰富的Web开发框架，如Django和TurboGears，快速完成一个网站的开发和Web服务。典型如国内的豆瓣、果壳网等，国外的Google、Dropbox等。
系统网络运维
在运维的工作中，有大量重复性工作的地方，并需要做管理系统、监控系统、发布系统等，将工作自动化起来，提高工作效率，这样的场景Python是一门非常合适的语言。
科学与数字计算
Python被广泛的运用于科学和数字计算中，例如生物信息学、物理、建筑、地理信息系统、图像可视化分析、生命科学等，常用numpy、SciPy、Biopython、SunPy等。
3D游戏开发
Python有很好的3D渲染库和游戏开发框架，有很多使用Python开发的游戏，如迪斯尼卡通城、黑暗之刃。
图形界面开发
Python可编写桌面图形用户界面，还可以扩展微软的Windows，常用Tk、GTK+、PyQt、win32等。
网络编程
除了网络和互联网的支持，Python还提供了对底层网络的支持，有易于使用的Socket接口和一个异步的网络编程框架Twisted Python。

","用python爬取了“学python都用来干嘛”下的部分有趣回答来回答这个问题。（如有侵权，请告知我删掉= =）（为了爬虫而强行爬虫，其实根本就不用爬虫的= =）
小白一枚，我是真的菜。我抄别人代码用python做过的事情：1、抢课脚本（我尝试了非常久，卡在验证码登录长达几个月，最后成功了不过还是很简陋）2、做简易网站。3、爬图片。4、爬百度文库。5、批量修改后缀名。6、做小游戏，像飞机大战，坦克大战，塔防小游戏，主要用pygame模块。7、爬有道翻译。8、爬知乎
以下是爬取内容（手动狗头）：
1、 用 Python 实现人脸识别
2、去除爱情动作片中的马赛克和衣服
3、 网信贷黑名单数据爬取
4、自动发送周报邮件给老板
5、快速完成一个网站的开发和Web服务
6、3D游戏开发
7、预测交通事故
8、不要沉谜于写所谓的“爬虫“，还有法律风险，慎重！
9、哄哄女朋友，导出微信聊天记录并生成词云向手机发送通知
10、做（沙雕）聊天机器人
11、自动抓取所有好友的头像，最后拼成了一张大图
12、一键扣图
13、自动爬取海贼王漫画
14、京东/淘宝价格监控，每次关注的商品降到目标价以下就发个短信提醒
15、监控一个加油站的油价
16、用树莓派做了个小车，用python实现了基本的控制功能
17、实现二维码生成和识别
18、做了一个专门看电视的个人网站，不用担心什么VIP/平台/广告/找片/下载，跳过片头片尾
19、破解观看只面向校内IP开放的视频
20、获取研究生系统全部学生姓名、学号、选课信息
21、扫描研究生系统上的弱密码用户基于上面获得的选课学生学号，获得身份证号码等重要信息
22、模拟登录图书馆并自动续借
23、网易云音乐批量下载
24、批量下载读者杂志某一期的全部文章
25、爬取了当前比较火的游戏壁纸
26、爬取美团网餐饮商家的信息
27、爬当当网各分类所有五星图书
28、网页开发
29、实现了主播开播的全员提醒，以及直播画面截图并发进群里
30、批量解决数学作业
31、ROS系统
32、扒同行的文章来伪原创
","分享一个很优秀且简短的自动化拼写检查器，用Python来完成的，个人觉得挺好玩的，也很有趣。
当然，不是由我来搞定的，是来自谷歌Norvig大神的杰作
当我们使用谷歌搜索内容的时候，如果你拼错一个单词，网页会提醒你可能的正确拼法，这就是所谓的""拼写检查""（spelling corrector）。谷歌使用的是基于的统计学方法。这种方法的特点就是快，很短的时间内处理大量文本，并且有很高的精确度（90%以上）。
效果大概是下面这个样子：
当用户输入一个单词的时候，分为了两种情况：
所谓的""拼写检查""，从概率论的角度看，就是已知 w ，然后在若干个备选方案中，找出可能性最大的那个 c ，也就是求式（1）的最大值。
P(c|w) \quad(1)
根据可得：
P(c|w) = P(w|c) * P(c) / P(w) \quad (2)
对于所有的备选项C来说，W都是相同的，因此可以将上式简化为：
P(w|c) * P(c) \quad (3)
所以，实际上可以看成是求式（3）的最大值
P(c) 的含义是，某个正确的词的出现""概率""，它可以用""频率""代替。如果我们有一个足够大的文本库，那么这个文本库中每个单词的出现频率，就相当于它的发生概率。某个词的出现频率越高， P(c) 就越大。
P(w|c) 的含义是，在试图拼写 c 的情况下，出现拼写错误 w 的概率。这需要统计数据的支持，但是为了简化问题，我们假设两个单词在字形上越接近，就有越可能拼错， P(w|C) 就越大。
举例来说，相差一个字母的拼法，就比相差两个字母的拼法，发生概率更高。
例如，如果你想拼写单词 Serendipity，那么错误拼成 Serendipitu（相差一个字母）的可能性，就比拼成 Serendipituu 要高（相差两个字母）。
所以，我们只要找到与输入单词在字形上最相近的那些词，再在其中挑出出现频率最高的一个，就能实现 P(w|c) * P(c) 的最大值。
实现代码如下：
当然， 工业强度的拼写校正器的完整细节是非常复杂的，不过从这个玩具拼写校正器中，我们也可以学习到一些内容，而且其校正的准确率也是不错的。
更多内容可参考：

","这个我有经验，Python可以做的事情太多了！！！！
下面看我都有哪些操作！！！
上干货之前，先给大家安利一个python入门课程，这个课程真的非常适合像我一样对编程毫无基础的人，从我个人经历来讲，我建议新手们先别收集那么多其余资料，收集不等于内化为你自己的知识，想当初我也是收藏一大堆但是最后还是留着吃灰还占内存，不如就别再给收藏夹添加垫底资料了，新手小白直接领这个Python入门课程就好，课程内容包含4节Python实操课+4节人工智能认知课+班群学习：
用来做多表格处理，避免数据出错和审核数据投入的大量时间精力
1.用Python进行数据处理，可以生成输出热点图和桑基图，直观看出数据来源以及趋势变化。
2.Python可以获取数据，发现数据规律，帮我们深入洞察用户，让我们成为最先看透问题本质的人
1.你可以用十几行代码爬取大量有用资料做调研，通过用户对社会事件的关注度，更好地进行事件分析而撰写爆文
2.用Pyhton来精准掌握了当下的用户画像和兴趣偏好，提高你出方案的效率
3.抢车票！用 Python3 自动抓取 12306 网站信息，轻轻松松在这个火车票查询工具买到票，过年回家再也不用跟黄牛讨价还价！！！
用Python做一个小工具，唰唰几秒自动识别需要的栏目信息，生成新的表格，辅助自己又快又好地完成读取和录入的工作。
Python就可以用几行代码，自动回复用户的常见问题，不在做个回复信息的工具人！！！
不需要安装复杂的Photoshop 软件，用Python做的小工具分分钟能扣个高精度图，还能自动更换背景！！！简直是黑科技！！！
当然，Python能做的还有太多太多了，像什么抢优惠券、抢演唱会票、抢球鞋、监控股市的交易、量化投资、小游戏开挂、爬取电影资源、自动发送邮件等等，骚操作真的太多了，但前提是你得学会爬虫去爬取这些信息！
下面答主分享一下爬虫的整个过程：
1、了解爬虫的工作原理
爬虫的工作原理即：获取数据——解析数据——提取数据——存储数据。根据这个我们基本可以明确后面的学习步骤。首先最基础的一步就是学习如何利用一个强大的库——requests来获取数据。
2、了解一下HTML基础知识
为什么要了解HTML呢？因为爬虫就是通过编程向网络服务器请求数据（HTML表单），然后解析HTML，提取出自己想要的数据。这部分只需要达到读懂和修改HTML文档的水平即可。
3、如何解析和提取数据？
学会安装并使用第三方工具（BeautifulSoup）来解析和提取网页中的数据。
4、如何存储数据？
爬取到的信息要存储下来才能看，这里就要学习2种常用的数据存储方式：存储成csv格式文件、存储成Excel文件。
(到此，我们就学完了爬虫完整的四个步骤，掌握了最基本的爬虫技能啦。如果想进阶的话，可以继续学习MySQL和MongoDB这两个库，它们一个是关系型数据库的典型代表，一个是非关系型数据库的典型代表，用于应对十分巨大的数据量 。不过这里需要去接触另一种语言SQL。)
5、如何更高效的爬虫？
通过Scrapy实现分布式爬虫，解决爬取效率问题。不过这相当于是一个打怪升级的过程，先把前面的掌握了后面用起来才能得心应手！
至此，你就完成了爬虫的简单入门。把大目标被拆分成小目标，循序渐进，由浅入深，按照上面这个学习路径学下来，你会发现Python的学习只要你坚持，还是比较非常顺利的，同时基础知识也会掌握的很扎实。
学编程最需要的就是耐心！现在大家想学编程太方便了，跟着教程满天飞。刚开始入门的时候有高手带，往往能有事半功倍的效果，尤其是自己不知道怎么找资料，怎么去配置编程环境什么的时候。有人手把手教的话，入门就高效很多了。强烈推荐一下这节0基础入门课程哦~
最后，既然看到这里，在收藏的同时，也请不吝啬的点个赞！！！！（以下图片来源网络，侵删！！
","之前闲着无聊，想找个项目练练手，这时我看到正在 压着泡面的kindle，嘻嘻
就你了，之前一直想在kindle上看漫画，可是想到又得下载资源还得发送到kindle，好麻烦，所以一直没有实现这个愿望，说干就干吧，。
首先关于kindle推送的设置，可以参考下面链接设置。
kindle是支持 JPEG (.jpeg, .jpg)；PDF (.pdf)等图片格式的。这里不推荐使用图片格式，因为漫画有多页，如果用图片推送的话，你会看到kindle上散乱着一堆的图片。。

先整理下思路
1，把漫画下载到电脑。
2，将下载好的一话漫画（15-19页）转换为一张pdf格式文件
3，通过邮件推送到kindle
4，定时爬取网站发现漫画更新 立即推送漫画，
需要用到的模块挺多的，一共需要这几个模块
第一步就是从网上抓取漫画页，具体哪个网站就不说 了，低调
因为此网站为静态网页，结构较简单，所以爬取起来比较容易，。这个函数主要为抓取一话里海贼王的所有图片地址，放到pic_list列表里并返回。
然后定义一个函数用来下载图片（传入图片地址，文件保存地址）
这里是将下载好的图片转化为pdf文件。
PDF文件生成完毕后就可以通过smtplib邮件服务来推送漫画了，qq邮箱的服务器为
mail_host = ""http://smtp.qq.com""
mail_user = ""邮箱地址""
mail_pass = ""邮箱密码"" # qq邮箱一般需要授权码
receivers = [占位] # 这里填上kindle的亚马逊邮箱地址吗，可填多个接收邮箱
红色标记的就是kindle邮箱地址，
下面贴上代码
到这里主要功能都已写完，
目前追到了最新最新951话，952话还没更新
需要源码的可到GitHub页面查看下载。
GitHub地址：https://github.com/shuaishuai0108/PYTHON-CRAWL-ONEPIECE-COMICS
","Python，大概就是飞一般的感觉。
随着机器学习的火爆，Python已经连续三年占据IEEE Spectrum2019年度编程语言排行榜榜首。
而GitHub上，也经常能看到Python写的非常有趣的个人项目。
比如这个曾一日千星的项目：
像文字云一样，用各种小图拼出大的图片，构建一个像素风的世界，就像《我的世界》里一样，一定非常有趣。

还可以拿来做拼贴画、十字绣等装饰。
在这个名为tiler的GitHub开源项目里你就可以自动实现这一切，它开源第一天，就涨到了1100星，增长速度肉眼可见。
Tiler，意味瓦工，也就是用各种小元素作为“瓦”，搭建出一张大图片。
项目预设了不少“瓦”：有乐高、加号、圆形、@符号、心形、乘号、波浪线、横竖条、《我的世界》中的各种格子，以及曲别针形：
另外还有一组万圣节主题icon，包括各种南瓜灯、小鬼头、蝙蝠、猫头鹰：
这些不同的“瓦”都可以设定大小颜色和角度，以适应不同的画面规格。
另外，你还可以设定整个画面中由多少种颜色构成和“瓦片”的大小，也就是马赛克的模糊程度。
你可以用不同材质的“瓦片”，拼接出各种图案。
比如梵高的《星空》，项目中展示了10×10、25×25、50×50三种圆形拼成的规格：
△ 10×10的《星空》
△ 25×25的《星空》
△ 50×50的《星空》
有没有在PS里拖动高斯模糊半径控制条的感觉？
你也可以设置让构成图片的“瓦片”大小不一
也可以试试拿乐高积木来拼：
放大看，斑斓的星空，是这样的：
一个个小砖块，布满了乐高积木表面特有的圆形凸起。
嗯，要是真有这么大一片乐高，想想就爽歪歪。
（此处冲去乐高门店下单，金币-1000）
还有乘号版：
如果放大，你就会发现，这就是十字绣的图样啊！
这么大一副十字绣，色彩艳丽，斑斓交错，一看就可以玩很久，退休老母亲看到两眼发光。
就是绣完挂在家里，也和你北欧风/极简风/莫兰迪风/自如风的房间非常搭配，成为全场最吸睛的装饰画。
要是木有耐心，可以考虑一个迷你版：
还可以做成《我的世界》的样子
星空的细节如下：
你们能认识这些砖块都是啥么……
如果想在自己电脑上运行的话，除了Python 3和pip，你还需要装OpenCV、numpy和tqdm。
之后，靠命令行就可以解决了。
你需要设置几个参数：
在gen_tiles.py中设置：
DEPTH：每个颜色通道中的分割数量(ex: DEPTH = 4 -> 4 4 4 = 64 colors);
ROTATIONS：旋转列表，以度为单位，应用在原始图像上(ex: [0, 90])。
在tiler.py中设置：
COLOR_DEPTH：每个颜色通道中的分割数量(ex: COLOR_DEPTH = 4 -> 4 4 4 = 64 colors)；
RESIZING_SCALES：应用于每个图块的比例(ex: [1, 0.75, 0.5, 0.25])；
PIXEL_SHIFT：移动以创建每个框的像素数(ex: (5,5)); if None, shift will be the same as the tile dimension);；

OVERLAP_TILES：如果构成图像的“瓦片”可以重叠；
RENDER：渲染图像；
POOL_SIZE：多处理池大小；
IMAGE_TO_TILE：图像到瓦片（如果作为第一个参数传递则忽略）；
TILES_FOLDER：瓦片文件夹（如果作为第二个arg传递则忽略）；
OUT：结果图像文件名。
这个项目的作者ID叫nuno-faria，除了这个Tiler项目之外，他还开源过不少有趣的东西。
有一个用Java写的推箱子：
像素风满满的桌面足球：
还有俄罗斯方块、弹球等许多种，个个都还蛮有意思的~
https://github.com/nuno-faria/tiler
—完—
@量子位 · 追踪AI技术和产品新动态
深有感触的朋友，欢迎赞同、关注、分享三连վ'ᴗ' ի ❤
","虽然一直被贬低，但是不可否认，Python还是一门非常热门且用处广泛的编程语言，下面就介绍从github上精选的4款由Python开发等小工具。
Star：7.5k
作为IT/互联网相关的工作人员，哪怕不是开发者，也有可能会和Linux打交道，我们可以用Linux进行开发、运维等，因此，Linux就成为了一项非常重要的个人技能。
使用Linux过程中主要打交道的对象就是繁多的Linux命令和选项(options)就成了令人头疼的事情，举一个最为简单的例子，
这个Linux命令包含两个部分，command和options，ls是查看命令，-a和-l分别代表：显示所有文件(包括以.开头的隐藏文件)、以列表形式显示。
这些常用的我们都知道，但是有很多使用频率较少的怎么办？我们可以借助explainshell。
它是一款利用Python开发的Linux命令行工具，通过解析帮助文档，逐个匹配一行Linux命令中不同字符的含义，让你对Linux命令能够一目了然，是一款非常棒的Linux学习工具。
Star：14.9k
glances就如同它的汉语意思那样，“一眼”、“一瞥”，能够通过一个简单的命令对系统信息一目了然，了如指掌。
glances利用Python编写的一个跨平台的监视工具，旨在通过curses或基于Web的界面提供大量监视信息。
你不仅可以通过终端命令行使用该工具，还可以web界面、API接口等对服务器进行远程监控，可以将统计信息导出到文件或数据库。
Star：1.1k
根据论文《基于文本及符号密度的网页正文提取方法》实现的一款网络正文抽取工具。在今日头条、网易新闻、游民星空、观察者网、凤凰网、腾讯新闻、ReadHub、新浪新闻做了测试，发现提取效果非常出色，几乎能够达到100%的准确率。
一款用于从Web下载媒体内容(视频、音频、图像)Python命令行工具，使用便捷，支持Youtube、Twitter、TED、网易云音乐、哔哩哔哩、腾讯视频、优酷视频、央视网、抖音、爱奇艺、虾米、酷狗......等几十个音视频平台。而且，功能非常强大，别的工具无法下载的，它都可以。

实用工具 | 2款播放器让你免费听遍全网无损音乐
大数据 | Spark机器学习工作流开发指南
实用工具 | 你距离PS大神只差这6款免费在线工具！
简易教程 | 分布式消息发布订阅系统Kafka从搭建到使用
教程 | 一文搭建你的第一个免费专属博客
办公效率 | 让你突飞猛进的10个Word技能
学习工具 | 推荐10款提升自己的优质APP
Google | Python编程规范指南
","程序员工作繁忙，动不动来个996，没时间陪女朋友咋办？
没关系，这件小事是难不倒聪明智慧的程序员的，他们花式陪女朋友的方式，让我们眼前一亮。
在github上，有一位叫作云外孤岛的程序员，每天通过微信发消息来陪女朋友，就是用Python来做的。
这简直就是程序员脱单指南啊！
单身狗终于有救了！

作者教我们用python给女友定时发提示消息，而且不会漏过每一个重要时间，每天早上起床、中午吃饭、晚上吃饭、晚上睡觉，都会按时发消息给她，而且还可以帮助她学习英语单词哦！
哪里不会学哪里，从此再也不用担心女朋友的学习啦！
在生日来临之时，自动给女朋友发祝福语。在重大节日来临之时，比如女神节、情人节、春节、圣诞节等，每个节日都会自动发贴心问候语。
满满的仪式感，从此再也不用担心女朋友说你不在乎她了。
最最最重要的事情，你可以通过女朋友的回复，可以实时了解女友的情感情绪指数。
慢慢的关爱，从此再也不用担心女友莫名其妙的生气了。
采用python中的wxpy模块完成微信的基本操作。
这些配置文件包括女友微信号；设置早上、中午、晚上等一些主要时间，以及对应的提示语；设置一些重要的节日时间，以及问候语。
自动判断所属操作系统，并且根据不同操作系统执行不同指令。
使用jieba库分析女友情绪。
作为一只单身狗，和舔狗，我选择做一只有情调的舔狗。
今天你依旧高冷，给你发了好多信息，都没回我。可你越是这样，我越是喜欢你。在我不断的嘘寒问暖下，你终于不再矜持，回了一个sb。我查了下英语词典，终于明白了这两个字母的意思。
s是sweet，b是baby，我想你一定是在叫我sweet baby了，这让我很感动。
扩展阅读：

"
21,既然有些人喜欢开挂，为啥不开发一款网游，提供编程接口，允许玩家自行用各种软件，同时允许计算机参与计算？,"真有这种游戏啊。。。
《Screeps》
steam链接：https://store.steampowered.com/app/464350/Screeps/
有想要挑战一下的可以看这个live demo，不需要注册就可以立刻试玩：https://screeps.com/a/#!/sim
游戏的介绍：Screeps is an open source MMO RTS sandbox game for programming enthusiasts, wherein the core mechanic is programming your units AI. You control your colony by writing JavaScript which operates 24/7 in the single persistent world filled by other players on par with you.
介绍的翻译：Screeps是一个为代码变态(划掉)爱好者设计的开源的MMO RTS（大规模多人在线即时战略）游戏。这个游戏的核心机制就是来为你控制的单位写AI。你可以用JavaScript来控制你殖民地（里的一切），并且这些内容7*24小时运行的，并且充满其他玩家来与你对抗。
说白了就是给你提供一个JavaScript的接口，用来写一个“AI”来跟其他玩家对抗。可以简单的基于规则，也可以写有限状态自动机，也可以写增强学习之类的agent ai（但性能其实很受限）。
现在这个游戏已经变得巨复杂了。从能源到采集，从防御到进攻策略甚至还有贸易等等等等。。。
这个游戏有多复杂？首先想要入门，游戏是全英文的，除了写code要用纯英文，最重要的是所有的官方文档也都是英文的。你需要通过阅读文档来学习这个游戏的API：https://docs.screeps.com/architecture.html
（这文档一看就是API Reference的风格）
文档中包括整个游戏系统的运行逻辑、写code的接口和一大堆内部机制。
当然，还有API References！来来来，请随意体验一下被代码支配的恐惧：
然后看看大佬开源出来的code：https://github.com/TooAngel/screeps
（是的，放在了全球最大宅男/女交友社区）
这个游戏的收费是花钱买算力(subscription token)。。而游戏中你可以获得算力再出售。所以完全有可能通过写一个巨厉害的code来赚钱……
详细信息建议看steam页面中Attack.On.Pika[AFK]的评论。。。分析的已经很透彻了
更：附上tutorial里的第一段代码：
大致的意思是这样的：从场景中找到名为Harvester1的一个creep(既游戏种的一种基本单位)。然后寻找当前房间中的所有source。然后命令creep去harvest 所有source中的第1个source。但这个过程有可能返回值是“ERR_NOT_IN_RANGE”这个错误，说明creep距离source太远了。然后就命令creep moveTO那个source里。然后整个函数永不间断地执行下去。
如此，万里长征第一步搞定了！你得到了一个可以遍历采集资源的creep。但是抵御不了入侵者，也很难最优化效率等等。想要更高端的agent，还是要多烧脑了。
更：看了一下API，这玩意居然还支持Binary Module。就是说一些要求性能的地方，你可以写个C语言的code然后编译成二进制的library再在JavaScript脚本里调用。

","哈哈哈，我玩过一款网游可能符合题主的意思。
预警：本文较长，注意流量。
既然是外挂，提供编程接口就没什么意思啦，允许玩家自行用各种软件这个才是问题的关键。
大概是2014年的时候吧，有时候上下班通勤时间或者厕所蹲坑时间，想找点游戏打发时间，不想玩单机，也不想爆肝玩一些容易耗时耗力的游戏。
然后我就发现了一款很弱智很脑残很沙雕但是又很魔性的网络游戏。我刷微博的时候看见一个同事在玩，我就跟着点进去开始玩了。我当时玩的是微博小游戏版，游戏名字叫“愚公移山”（PS：我玩的游戏版本目前已经倒闭停止运营了！因此此文所有配图都是在网上搜索，如有版权问题，请联系我删除。）
现在回想，这游戏仍可以排进我玩过的沙雕网游的top榜之首，游戏很简单，就是点这个茅屋，然后就会造一个小人，（还记得《愚公移山》的课文吗？“子又生孙，孙又生子。子子孙孙无穷匮也! 而山不加增，何苦而不平? ”）这个游戏就是要造小人，然后去移山！！
游戏里面的boss就是山，而且那些山不是叫王屋和太行，策划们给那些山取了一些很脑残的名字，诸如：
打boss就是，点击这个山，然后你的子孙数量就会减少一个数值，山的HP数量（血条）也会减少一个数字，然后根据你的子孙数量，和移山的数量，会在游戏里面有一个世界排名，然后里面也会有一个好友排名，会显示你和你的游戏好友的子孙数进行排名。
当然，作为一个网游，它不可避免的也有充值系统，当然沙雕游戏的商店也是很沙雕的，卖的就是一些莫名其妙毫无关联但是让你在游戏里更快生孩子的道具，或者是对好友使用可以给好友避孕的一些道具。
游戏中增加生产率的方法有很多，比如升级茅屋变成豪宅，茅屋点一次只能生一个，豪宅点一次可以生十几个；比如增加草丛或克隆人装置等自动生育场景（充值开通或者攻克boss之后的金币道具购买）

游戏内核就这么简单，接下来就是开始斗法。
=======简单分割线========
我开始玩的时候，我那个同事已经是图2那种级别了，子孙67亿，生产速度222万人每秒，击败全球60%的玩家。我想偷偷地超过他，于是悄悄咪咪地开始玩，由于这个游戏只有“点击生娃”这么一个简单的操作，于是我先用了最简单的外挂，按键精灵。
用按键精灵写了一个鼠标连点的软件，然后通过模拟器在闲置电脑上开启游戏，最开始通过大概十分钟的个人玩法，我已经把茅屋升级成了女娲，点一下可以生120个子孙，为了便于后期的统计，我设置成每秒点击100次，也就是一秒钟可以生12000个子孙。那么一分钟就是720000子孙，一小时就是43200000子孙，我挂8小时，就会有3.4亿的子孙。因为前期的boss都很弱鸡，大概几百万子孙就可以移掉那些山，那么一天时间，我就能推到一些boss然后获取金币开通自动生育区！同事的67亿子孙，估计也就几天我就能超越！
调试完成之后，我心满意足地上班去了，也不敢挤号，看着我同事一本正经地工作的时候，我总是莫名想笑，心想着过几天我的游戏排名就要超过你了！兀自暗爽！
然后我当天下班，飞一般的回家开电脑，打开一看，连点器仍在正常运作，但是我的子孙居然只有1.1亿！卧槽怎么回事，是我的数学不好还是游戏策划的数学不好？我又检查了一下连点器，依然是一秒一百次，一分钟72万，明明过了八小时，为什么只有1.1亿！
我不解地百度，崩溃的发现原来这个游戏还有随机事件，就是会出现一个叫做“智叟”的人物，一下子就按百分比屠掉你的子孙，比例高到15%-30%！！！估计就是官方为了平衡我这种无脑点击挂出的类似验证码事件。
然后这个游戏没有日志记录，被智叟屠了我也看不到是什么时间，也不知道他出现的规律和频率，除了网上搜到的图片，我都不知道他到底长什么样子，更不知道该怎么应对。但是我综合分析以往的游戏套路，应该是他出现之后点击他会触发一些事件，可以驱赶或者打败之类的。于是我守在电脑前大概2个小时，果然出现了智叟，只要在3秒钟之内点击他，就可以把他驱赶走，不然他就会屠杀很多的子孙，我不得不又在连点器原始代码里加上监测智叟出现的代码。
当天晚上，捣鼓了半天，开了几个自动生产场景，自动生育率在每秒四万个，加上连点器，一秒钟可以生52000个子孙，一小时就是1.8亿子孙！！！
睡觉之前再次确认了一下正常运行，明早起来，20亿妥妥的。
果然，第二天一早起来，我的子孙大军已经生到23亿了，然后又是解锁场景，又是升级女娲，自动生育弄成了80万每秒，点击生产也达到了每下1000个，开挂高达每秒10万，加起来也就是90万每秒，和昨天的速度简直不可同日而语，并且我的世界排名已经击败了30%的人！超过同事指日可待！！可能也就是这两天的功夫了！！
有了一天的游戏经验，除了智叟之外我还获得了一个信息：就是在游戏途中升级场景或者道具，会让产出比更高！于是我又下载了一个向日葵远程控制软件，手机控制电脑，在公司蹲坑或者喝水时，就打开看看够不够升级新的道具，然后就顺手升级一波。等到下班的时候，我已经每秒生产率达到了100多万，人口总数也快到了40亿，世界排名也从击败30%到了击败40%多。
同事的游戏似乎没怎么打理，每秒生产率还是两百多万，但是人口总数已然达到了3000亿的级别，这个时候让我不得不感慨计划生育的重要性。
想要超过他，不得不花点功夫，由于我有连点器这个大杀器存在，于是我开始讲究策略，我把点击就能生产的女娲升级升级再升级，虽然越到后面升级需要的道具金币就越多，我又不得不去移山，移山又死掉几亿的子孙，真的体会到愚公移山的精神。总之折腾了一个晚上，我的人口总数变成了只有一千多万，但是我点击一下女娲，可以用生产50000个子孙，然后又优化了一下连点器，让它每秒可以点击140次，这样光是点击的产出率就达到了700万每秒，加上生产场景每秒100多万的产出率，我的子孙以每秒800万的速度繁衍着。生产速度已经达到了我同事的四倍！预计一晚上我的子孙就可以突破3000亿的大关！明天上午，就可以全盘超过我同事！
时间很快就到了我玩这个游戏的第三天上午，我同事5500亿总人口的时候，我已经6000亿了！！我差点就忍不住跟他说了！！但是我压抑住激动的心，硬是等到了下班的点，我的人口数经过一顿操作已经达到了10000亿，也就是一兆！！而我的同事仍然只有6000多亿！！我的世界排名已经击败了70%的用户！！
下班时候我风淡云轻地叫住了他！
我打开手机上的游戏，故作轻松地说：“你是不是也在玩这个游戏？你看看你的排名。”我准备欣喜若狂地收获他大吃一惊的表情，但他并没有特别惊讶，看到之后只是笑着说：“你小子可以啊，我这两天没玩你一下子把我超越了。”
我们顺着聊了一会，然后我又得知他玩游戏的原因，因为他有一个同学，是一个网游重度氪金用户，玩这个沙雕游戏，居然也充值了一千多块钱！！同事为了证明技术比金钱牛逼（或者是证明他同学是个沙雕），就也开始玩这个沙雕游戏！也是想像我一样通过某种外挂手段干过他的同学。而且我同事仅仅只比我早玩两天！！这两天他下班忙着约会没有怎么玩游戏，所以一不小心被我超过了，我们坐电梯下楼越聊越起劲，干脆就去了公司附近的星巴克，他现场给我演示了一下骚操作！
他走的外挂路线是提升自动产出，他觉得连点器什么的太low了，而且效率不高，他说自己一直在攒道具金币买地狱之门，这几天没怎么管，刚好消耗掉一波子孙，可以换两个地狱之门！
地狱之门是一个可以一秒钟生产150万子孙的大杀器！！也是游戏里生产率最高的场景！！
他打开了他的ThinkPad，然后麻溜的开出模拟器，兑换两个地狱之门，然后打开了一个辅助软件——变速齿轮！
变速齿轮利用HOOK API修改游戏时间的倍速！他用的版本最高可以调速到256倍！也就是现实中每过1秒钟，他的游戏里已经过了256秒！！
他的两个地狱之门就已经可以达到300万人/秒，加上变速齿轮，每秒造人速度居然高达7.68亿！
然后我们喝咖啡聊天那一会儿功夫，他的人口数居然也突破了一兆！！
除了一脸震惊，我还能说什么呢？
然后我们正式踏入了一兆大军，世界排名也达到了击败70%玩家水平！
但是他给我看了一下他那个氪金的同学，让我知道什么叫金钱的力量！！他的同学居然有世界排名！世界排名只有100个人，他的同学就是在52位，击败全球98%的玩家！
据了解，他的同学不会软件，也不会外挂，纯粹是充钱玩，就玩到了这个地步！！
我百思不得其解，因为根据我的研究，正常打boss加自然生产（没有谁会沙雕到一直狂点手机生产吧？），想要到我们现在这个程度（击败70%），可能都需要玩1个月。然后同事告诉我一个令人伤心的真相：因为我们都没充过钱，所以我们看到的商店和充过钱的玩家看到的商店不一样，充过钱之后商店里是可以直接购买地狱之门的，15块钱一个，买了地狱之门之后还送金币，送的金币又可以升级地狱之门，所以我这种辛苦攒金币买的地狱之门一秒只能生150万个子孙，但是我同学氪金买的地狱之门是这样的↓
WTF！
果然免费玩家和收费玩家玩的不是一个游戏！原来我们看到的商店都不一样！！我的商店里还有很多的问号，我以为是到了某个级别才能解锁，原来是要充钱！！
最让人生气的是，氪金玩家还可以买几种道具，它们分别是：+10%，+20%，+50%
就是字面意思，你要有10亿人口，买一个+50%，瞬间变15亿！
可气的是，这些道具只要几块钱（1-3块钱左右）
然后充了会员还是月卡啥的玩家，每天还有一次6块钱子孙翻倍的机会！！5000亿瞬间变1兆！
而且没充钱的玩家只能遇到智叟来屠杀，充了钱的玩家随机事件居然是：天空突然经过哈雷彗星，你银行系以内的子孙数量翻倍！
同事的同学就这么无脑氪金，各种道具各种点各种付款，就这么硬生生氪了一千多，到了世界排行榜的前100！榜上有名！！
我们要给平民玩家涨个脸，我们也要进榜！我们要证明技术比金钱牛逼！我们结合了我俩的骚操作，研究出了后台双线程操作，一边疯狂连点，一边变速齿轮自然生产，就这种疯狂的生产速度，居然还是不及排行榜上大神的生产速度，top100的大神们人口基数太大了，计算单位都不是一个量级的，我们爬天梯爬得好辛苦。游戏第六天的时候，到了一个阶段，所有能获取金币的渠道都打完了，场景和女娲都没办法再升级，我们的产值变成固定的1秒220亿，世界排名变成了击败90%的玩家！
可以说是瓶颈期了，并且随着排名的提升，居然又多了一种玩法，就是你可以去掠夺其他玩家的人口，然后玩家会有闪电，可以打击前来掠夺的人，然后就会击落侵略者的一些人口数变成自己的人口数，但是闪电每一个都有冷却时间（用完了可以拿金币买），有时候掠夺的人来得多了，后面只能被掠走一些人口。
我和同事研究中发现，这个游戏的安全机制（反外挂机制）可以说几乎没有，这个闪电很快就会用完但是很慢才能冷却，于是我们又用了新的外挂手段：wpe封包。
我们设置了闪电的冷却时间，将数据包中的30分钟冷却设置成1秒，这样我们就一直有闪电，所有掠夺者，一个不留全部干倒！真正实现了朋友来了有好酒，敌人来了有猎枪！
然而一天劈死几百个侵略者，我们的战利品——那些增加的子孙们，居然只让我们的世界排名提升了1%。
但是这个契机我们灵机一动，可以刷CD时间，为什么我们不刷金币呢？
这里值得一提的是，到后期干掉一个boss会给几百个金币，在所有百分比道具里面，+10%的道具是可以花1500金币购买的！
但是我们目前范围内已经无boss可杀，没有获取金币的渠道，后来还是同事聪明，10金币买了商店里一个最便宜的道具，抓到数据包的数据之后，把金币数量的减法改成加法，然后封包发送，结果成功了！我们金币增加了10金币！
然后开始刷金之路，一路刷到999999999999个金币，到了游戏金币栏上限。
虽然免费玩家没有+20%，+50%和+100%(翻倍)
但这个+10% 对于开挂玩家来说，已经够用了！
然后我们的连点器变成了连点+10%，在我们已有的人口基数下，可以说是涨幅是一个天文数字了！全服第一指日可待！
玩这个游戏的第九天：

终于到了世界排行榜的第一，第二就是我的同事，我们人口数差不多，只要少抓一个智叟，就能轮流坐第一。
拿到排行榜第一之后，这个游戏开始变得索然无味。同事也赶紧抽了个时间去和他的氪金同学嘚瑟，结果氪金同学说了这么一段话：
像我这样的充钱玩家，不是为了充钱而充钱，其实就是想打赏一下做游戏的研发策划人员，其次才是图一个游戏里的便捷，像我这样的人才是一个游戏开发出来，生存下去的原动力！你们这些开外挂开辅助不择手段达到目的的人，简直是游戏败类！！！
他同学的一番话真的是震耳发聩如雷贯耳，我和同事都羞愧地低下了头。不过事后氪金同学从技术角度了解了一下我们的操作方式，然后抱着学习的目的刷到了世界第三。
最后坚决抵制外挂行为，呼吁大家用钱支持自己喜欢的游戏。
=====================
备注：本故事纯属虚构，如有雷同实属巧合。本人不为故事中行为和语言承担任何道德上的谴责或法律上的责任。


","我们有个黑客游戏，岂止是允许写外挂？而是不会写代码没法玩。
黑客大逃杀：一个服务器，每人一个root权限账号。然后写个程序运行，杀掉所有其他人的程序，同时保护自己的程序不死。活到最后的赢。
你们会想玩不…
","有啊有啊。
有个游戏叫robocode，题主要不要试一试？这个就是你要的类型哦，包你满意。
2001年发布，最新版是2018年4月发布。
玩法很简单，用程序控制自己的坦克击毁对方坦克。
但实际上可没那么容易，开炮要算提前量，不过对方也不傻，会用随机移动来扰乱你的瞄准。当然你也要用有效的移动策略防止对方打中。
我随便贴个视频你体会一下
当然这是低段位的比试，双方的动作都有很多问题。高手对决可以用深不见底来形容。
虽然国内并不流行，但真的是很好的游戏。
","虽然不是完全符合题主的要求，但这两款游戏，一定程度上形成了一个“开挂”的小圈子，各国作者都在研究如何更加优美，更加奔放的“开挂”。而且后者对于外挂的研究深度，一定程度诠释了外挂的最终形态。
第一款游戏是暗黑破坏神2。
暗黑破坏神2大家可能都玩过，一部分人的记忆停留在血乌都瑞尔上，硬核点的玩家可能还记得build各种char。但能觉得这款游戏能跟开挂扯上关系的，无非也就是hackmap，大箱子插件，深入点可能还研究过ATMA或者UdieToo。
但这个游戏有一种小众而独特的玩法，叫做硬血。
硬血就是修改暗黑2的人物存档，d2s文件，不涉及MPQ，dll文件的修改，使其可以进入任意暗黑2的战网房间内，两个人进行PVP。因为相比于正常存档，硬血人物是完全打不死的存在，所以起名硬血。
硬血玩法是硬血人物对抗硬血人物，不像传统单机游戏一样是外挂欺负AI，也不像传统网游一样是外挂欺负正常玩家。所以如何修改成一个好的硬血人物存档，有着非常深刻的讲究，其中运用了非常多的暗黑2基础游戏机制，需要大量时间去钻研。
硬血人物图片
硬血科普贴：
【图片】｛申精｝玩暗黑的这些年，玩硬血的这些年……【暗黑破坏神吧】_百度贴
浅谈对硬血的理解【暗黑破坏神吧】_百度贴吧

第二款游戏是mugen。
mugen是一个格斗游戏引擎，最经常拿来做同人格斗，详情请见我的科普
mugen到底是什么，怎么以最正确的姿势入门？
格斗游戏中，被讨论的最多的就是人物的强度，绝大部分格斗游戏，都被玩家严格的区分了人物等级，S-C不等。甚至更多的人还在跨作品比较人物强度，比如KOF97中的大蛇和KOF2001的伊格尼兹到底谁厉害，而mugen就为这种跨作品PK提供了平台。
再加上中期mugen的AI作者的崛起，本来傻傻的任人欺负的普通人物，被赋予了强大的AI，于是mugen玩家们不再去手操控制人物，而是观战让AI打AI，于是你在B站上看到了各种各样关公战秦琼的杯赛。
我的入门杯赛：强中-凶中略有节操大乱斗
https://www.bilibili.com/video/av215112
开启拳皇时代的杯赛：拳皇世界
https://www.bilibili.com/video/av780682
既然人物-AI都是各国作者制作的，那么mugen人物就免不了被加上各种私货，比如制作一个超高防御超高攻击时刻全屏攻击的大蛇，这样的人物应该就是mugen凶恶玩法的起点。
mugen中的凶恶技术，是各个时代中喜爱凶恶玩法的作者，对于制作高强度攻击面，和高强度防御面的汇总。由于喜欢凶恶的作者和观众非常多，甚至达到和普通玩家分庭抗礼的存在。即使到现在，mugen传播在外的名声最大的mugen角色，也是一个凶恶人物——祸灵梦。
mugen有着非常严格的分级制度，纸并强凶狂神，强上凶下的等级差不多就是一个格斗游戏的顶尖玩家操作非BOSS S级角色的水平，而到了狂中往往存在各种回血脱离，已经是人类手操正常角色战胜不了的存在。到了神下之后，格斗游戏的表现力都趋近于无，你来我往之间只是画面和音效的演出效果，更多的是后台代码之间的战斗，神级角色们搭载了各种各样的凶恶技术，这些凶恶技术积累于日本作者和中国作者，所以有着各种各样的中二名称。比如即死，OTHK，混线，超即死，永续毒，毒，死宣，强制死宣，即死返，贯通炮，邪眼杀手，亲变更，NOKO。每一种称呼，背后都有对应的一项技术，这些技术往往针对了mugen中各种判定和BUG，来让系统判定自己胜利。好的凶恶角色往往搭载了更多，更通用的凶恶技术，也有着针对某些角色钢板防御面的特殊对策。
凶恶技术：即死 | 千寻Mugen
凶恶技术还分攻击面和防御面，凶恶作者更加追求攻击面，在神级的顶点神最上的战争中，打掉多少高防御面的靶子，就是攻击面的体现。
2018神最上评测 https://www.bilibili.com/video/av29070493
然而神最上就是mugen的顶点了吗？并不是。随着mugen作者的深入研究，更加凶恶的技术出现了。那就是针对mugen内存地址，汇编代码，栈溢出的隔离技术，包括本体亲捏造，%n，%f，statedef溢出，def溢出，这些技术应用往往已经不局限于mugen中的胜负了，可以直接注入汇编代码，修改mugen源代码，调用dll，调用windows的API执行任意行为。这种人物之间的攻击，往往在游戏战斗之前就开始了，在选择人物甚至载入人物的时候就完成了攻击。所以出现了打开浏览器的人物，删除所有人物的人物，听歌的人物。所以有个mugen笑话就是病毒人物。
选择即关机或者重启的两个人物
选择之后按E，可以打开作者博客的人物（调用explorer.exe被360报毒了）
隔离技术：截止目前各种隔离技术一览【mugen吧】_百度贴吧
这里必须要提到一个中国作者，ydccdy2010，通称遥远，几乎大部分的隔离新技术都是他提出来的，是mugen凶恶历史上最重要的作者。
这些新技术的出现，让mugen人物强度再次提升了一个档次，甚至让原本的神级人物不带他们玩了，神最上评测中不允许出现隔离技术。
论外·攻守对决：https://www.bilibili.com/video/av9291548
看到上述两款游戏，你是不是对外挂又有了新的理解，其实不管是单机游戏的修改器，还是网游的挂，都没有太多深度。外挂的最终形态，就是变身成黑客，攻击游戏本身，攻击玩家电脑，攻击服务器。
","我之前就想要做一个这种游戏来着，没有人机界面，全部API提供，后来被朋友阻止了，他们的理由非常说服人：
我不想下班了以后再上班。。。。

=====

没想到这么多人想要下班了以后再上班。。。。。有建设性意见的可以加我微信，备注：下班之后再上班，我拉你进讨论群。。。。
","更新：感谢各位点赞，如想开私服，微信扫我头像。
——————————————————————————
这种游戏不要太多。
从最入门的
到
到
到
到

","不知道大家有没有听过剧场效应？
大家只想在有秩序的环境下做那个有特权的人，
而不是在一个混乱的环境下肆无忌惮得做任何事。
在一个混乱的环境下大多数人只能被按在地上摩擦，即使没有被按地上摩擦，那也远没有开挂带来的凌驾于秩序之上规则之外的感觉来得更爽。


","看到这个题目的一瞬间，我就想到了M.U.G.E.N。
------------------------------------------------
简单地说，mugen是个游戏引擎，从最开始的移植其它游戏角色供大家手控战斗，发展到了现在——角色作者制作性能超出天际的角色和AI，让AI们自己战斗（因为有些角色技能几十个，手操灾难，有些AI惨无人道）。角色作者采用各种匪夷所思的手段把角色的性能无限提升，包括并不限于利用bug、控制台命令、篡改程序等等。
2019.5.27添加
------------------------------------------------
虽然mugen并不是网游，但是其它方面完完全全体现了题目中的各种设定。
首先说一下mugen是什么：
mugen是一款免费的2D格斗游戏引擎。玩家可以自己制作游戏人物和AI。
绝大多数游戏，在给玩家提供了太过自由的环境后，往往都会发展出一些莫名其妙的东西出来。比如我的世界里有人造了一个游戏机，然后在我的世界里的游戏机里玩我的世界；中世纪背景的besiege，制作者原本想象中的投石机摧毁停车场变成了汽车人大战F22；war3原本一个RTS游戏，但是现在空战赛车射击消消乐连连看什么地图都有。mugen也是一个被“玩坏了”的典型。
这里引入一个概念：纸 并 强 凶 狂 神 论外，也许有些人听过这个东西，不过这里也大致不太严谨的解释一下：纸 并 强 凶 狂 神 论外是用来对游戏人物进行分级的，最弱者为纸，大概有星爷电影中眼镜仔的强度（或许更弱？）；断水流大师兄大概并级或者强凶级吧（不是一个系统，强行比较帮助理解，并不准确，大师兄不是游戏人物）；再往上就是狂神论外了。
mugen玩家制作的并、强、凶人物还比较正常，纸级太脆，作为游戏人物而言战斗力不足1鹅。并、强、凶级的人物就开始有意思起来，玩家创造出来的人物在自己制作的AI支配下互相战斗，各种花式连击和战斗脱离有声有色，状态爆发之下，一套连击带走对方也是有可能的，还出现了一个常用语“十割”，表示一套连招打掉整整一条血条，有十割当然也有五割、七割，一气（能量豆，用来施放超必杀技等）十割，三气十割等。
但是到了狂级，一些奇奇怪怪的东西就多了起来。比如死星或者叫做死兆星，源自《北斗神拳》，死兆星出现就意味着死亡的出现。狂级的很多人物在一定条件下就会触发死星，直接无视一切秒杀对方。也就是说你打对方打得正起劲呢，打到了对方就剩一丝血皮，突然对方瞬间脱离战斗，然后格斗游戏变成了一段花里胡哨的画面，等到画面散去，你就只能看到自己角色的尸体了。
普通mugen角色的作者（或者可以理解为mugen这个游戏的玩家）还在想办法用拳脚到肉的方式击败对方，还在尝试不断提升AI对于技能招式的判断，给自己游戏角色增加了死星的玩家已经脱离了正常的格斗概念。
类似的还有大伤害，脱离，无敌等等
mugen的画风从这里就开始奇怪了
像无限能量豆这种都是小case
先是有些作者作出的角色可以把对手打浮空一套连击到死，或者干脆就是自带无限连
然后就有作者给出了脱离——甭管你打的多开心，我都可以瞬间脱离被你打中浮空的不可控状态
紧接着有作者给自己的角色增加了大伤害技能，特定条件下的招式可以一击打掉一条血
那么对应的有些角色就出现了大伤害检测功能，一旦出现大伤害，则会令其无效
有些作者制作出了“我看了电视”这种无法格挡的赖皮技能
那另一些作者干脆搞出类似“自信”（白罗灭精）之类的全屏伤害、自身无敌的大招出来
所以狂凶级别的战斗通常最为精彩，大家往往看的眼花缭乱，B站随便搜狂级/凶级/mugen都可以看到很多。
（某不走心的随便举例）

继续讲神和论外
神是个什么概念呢？
大概就是“普通人不能理解”这种概念吧。
普通人战斗的目标还是消减对方的血条，让对方血条归零，或者低于自己拖到时间结束。
神已经不满足于这些了，像这种普通攻击模式，神级是不屑于做的，攻击最起码也要是全屏伤害，自身无敌等。
举几个例子：
时间暂停——游戏打一半，突然整个世界清静了，除了释放暂停神技的角色外，一切飞行道具、人物、时间包括背景人物统统被暂停了，然后等时间恢复后，瞬间脸上飞来无数拳脚黑粒子。
开场偷跑——游戏双方还在摆pose的阶段，一方就已经开始各种拳脚飞踹了，这时候甚至举着round2的小姐姐都还没走下场。
无敌——你打不到我的脸哟，“无耻”的作者们干脆去掉了自己的人物受击框，脱离了这个次元，比带土的写轮眼可要厉害多了。
回血/锁血/空血不死——我站着这里让你打，能打死我算你厉害。
秒杀——游戏一开始，ready go 刚刚喊完，屏幕上紧接着就出现了winner is XXX。游戏时间甚至都没有变，对方的血条就已经归零了。
神级角色的这些操作已经不是在游戏设定的框架之内进行了，有的通过调取mugen系统自带的一些金手指，比如让自己瞬间满血，对方瞬间死亡等，有的利用游戏规则漏洞，比如无敌、暂停等不一而足。
所以神级人物有人也称之为灯光师。两个神级角色战斗时各种炫酷的技能四处飞射，但是两边要么无敌，要么脱离了这个次元，让对方这些平时能够秒杀纸并凶狂的技能只有一些动画效果，完全没有伤害或者干脆打不到人。
那么什么叫做论外呢？
论外，大概就是讨论的时候要排除在外的意思吧。
为什么要排除在外呢？因为能够驾驭mugen世界规则，乃至篡改规则的神级角色们，也都无法击破论外的防御。
论外采用的技术完全就是黑客手段。
比如直接消去对方PLAYER，架还没打，对手就从这个世界里消失了。
比如直接篡改规则，让游戏宣告自己胜利，或者宣告对方失败。
比如冻结对面，直接让对方无法读取数据，各种神级手段无法施展。
比如让数据溢出，导致对方无法正确读取自己的角色，己方无敌等等。
比如直接修改对方人物数据，把对方神级人物变成一个白板再来和自己单挑。像这种时候，谁能取得胜利已经不是看招式如何了，完全是看谁的程式加载更快，早一步把对方变成白板，就直接在游戏开始前取得了胜利。而且论外最强的地方其实不在于攻击，而是在于防御，论外最强者被拉下马，要么是出现了一位拥有原本“论外最强”都无法击破的防御的人物，要么是出现了一位攻击快过对方的新人物。
像这种修改角色数据、修改mugen程序的行为大家还感觉不过瘾的话。隔离作者们还提供卡死mugen、弹网页、篡改BGM、直接让mugen崩溃等选项，绝对能让你体验到一个游戏里的二次元小角色和三次元肥宅战斗的绝望感。
可以说这些游戏角色已经脱离了原有的框架，完全就是一段病毒，像那种借助金手指开挂的，在里面都是相当低端的存在。
贴个论外大佬们的战斗？视频
提问者说的“由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的”在这些无节操的论外角色面前，可爱的像是一只小绵羊。提问者的想法限于如何在游戏规则内取得胜利，mugen某些作者已经开始定义规则和掀桌子了。
最后说一点：由于mugen各种技术实在太过复杂，我也仅仅是个偶尔看看视频的爱好者，所以这篇答案里面对于mugen技术的说明和人物分析肯定有很多错误，望包涵和指正。
","少年，你知道MUGEN神战吗？

为啥随便答一句就被顶起来了真正的圈内大佬的回答却没人看啊……
https://www.zhihu.com/question/320155407/answer/670408638
","有这样的游戏，只是没有做成对战类网络游戏。
在大学里，这个游戏叫航模大赛/机器人大赛/算法大赛。
在体育界，这个游戏叫F1。
在网络上，这个游戏叫网络安全。
在市场上，这个游戏叫程序化交易。
至于为什么没有面向普通玩家的游戏，这样的设定，与天斗，太容易，与人斗，太难了。
","你要知道，这些人开挂，是因为他们太loser
只能在一个公平环境下去用不公平的工具满足于自身产生虚假成就感
真要真刀真枪干外挂服务器
csgo有外挂社区服务器
在那里面，什么锁头穿墙都是弟弟
小陀螺都是垃圾
那里大陀螺是起步，大陀螺不是你转的更快打的更快
大陀螺是能规避子弹的
就像题主说的，比拼算法优劣了
你觉得，公平环境下low到开挂的菜狗，他会编程吗？
","那我干嘛不打codeforces？
全球同服，万人竞赛。
在线评分，一发入灰。
服务器位于俄罗斯，受俄罗斯法律保护。
","要是喜欢编程pk，可以去玩玩Screeps
用JavaScript调教你的AI侵略别人的领土保护自己的领土的游戏
Steam上68，官网上有免费试玩版，没有中文
听说建议先玩玩试玩，因为太硬核了，很可能发现不对自己的胃口
我并没有玩过，因为没学过JS。。。
","玩家开挂并不是因为喜欢自己动手做外挂，而是别人没有的超能力但我有，能通过最简单直接的方式大杀四方，享受的是那种高人一等的快感。
","有啊，mugen绝对符合你的描述：
mugen是一个格斗游戏引擎。
玩家自己开发角色参战。
最开初大家都尽量还原原作性能。
某一天一个人突发奇想的在某个招式下面加了个这个
[state -2]
type= nohitby
trigger1=1
time=15
这样这个招式就有15帧的无敌时间了。
然后陆陆续续的作者希望自己的角色更强
配合优秀的ai+人物性能
当时的神级，现在的狂级就诞生了。
狂下位的审核：黑鬼（又名阿卡林）
高速回血回气，各种广范围的无敌技能，一个秒杀技能。
手操一个强级人物和他打打就知道有多绝望了。
但这并不能满足作者们的欲望。
于是神级，诞生了。
神级的审核五位成员都是常时锁血，常时无敌。一般的技能对他们已经不起作用了。
这时候就必须要借助引擎本身的bug来扣他们的血。
然后各种代码之间的针对与反针对开始了。
某一天，一位作者发现了512内存溢出法可以让对手几乎无任何抵抗方式的被ok。
论外诞生了。
他们的生死和血条已经完全无关了。
他们的攻击手段也和扣血无关了，直接利用内存溢出的方式ok对手。
论外的技术由于过于凶恶，所以称之为“论外”。
发展了这么久，最凶恶的技术有目前四个：
1.极限卢卡尔为代表
阻止对面人物加载，替换对面人物文件，普通即死获得胜利
2.文本为代表
修改胜负判定法则，自杀判胜。
3，4，记不得
不过目前貌似还有更加凶恶的：混元魔女。
利用xp系统bug在打开mugen时就造成杀伤，不选人直接获得胜利。

","额，据我所知，有人在去年组织了一场“神仙大乱斗”。
是的，绝地求生神仙大乱斗比赛，参赛选手带上各自的挂，看谁能活到最后，在斗鱼直播的好像……
然后比赛被叫停了。
…………………………………分割线…………………………
守望也出地图工坊了，你可以完全自定义除人物模型和地图模型外的任何细节，比如更改技能和触发动作，改变角色在某种地形上的移速，改变弹道速度和命中判定，传送角色，更改物品属性等等……
不知道会不会出一个挂房……

","本末倒置了。
游戏的第一要素是好玩，不是防作弊。还是那句话：游戏不是为了防作弊而开发的。
开发者全部精力放在玩法上，也不能保证游戏好玩，怎么会更多关注防作弊呢？
而作弊者，不好玩的游戏他也不会去玩。因为他享受的是相对大部分人的优势。一个人玩作弊缺乏观众。
如果有人费尽心思开发防作弊机制，结果可能是不好玩儿没人玩，作弊机制无用武之地。而游戏好玩，大量玩家涌入，导致需求巨大，再好的防作弊机制也会被破解
","这怎么能少了老牌fps游戏，大名鼎鼎的穿越挂线（cross f***，简称cf）呢？
正式服的外挂不能满足题意。基本处于不明显的挂（如透视）大号开着，明目张胆的挂基本是小号的状态。如果是大号明目张胆开挂100%是盗号/借号/租号
但是！
cf还有一个服务器，叫做体验服
当年体验服本意好像是比正式服早更新，用于玩家测试。然而体验服很快外挂横行，也不知官方怎么下了决心，就把体验服变成养挂场所了，在体验服开挂我好像没听说过有处罚。

反正体验服就是个神仙斗法的地方:

进入刀战地图，作为良民入场。刚进场对面就冲过来个玩家，他手上的拳套挥得凶猛，下下似猛虎扑食，却又快若轻鸟舞翅，大有金丹期气势，你就看见个无影爪刚碰到你就横尸了

然后我方一个队友突然大喝一声，震退金丹术士，掏出破天斩魔剑（PS，这武器最早设定名叫玩具大宝剑），然后挥得刀下生风！同时脚法神速，有若神行太保，定是元婴强者！
然后他就从我们家走到对面家一遍，把包括那个拳套哥在内的全干趴下了。
结果对面又进来个屠龙哥，他的术法依然是快刀。但恐怖的是他的刀只有起手没有落刀，我连挥刀距离都看不清，只要进入攻击范围就死。
这哥们跟我方元婴大宝剑战了几个来回，互有胜负，看来也是元婴大神。
这边正难舍难分，对面又突入一个身影。只是他一进来就开始翻滚（正常角色被擎天打死时的特效“再见兄弟”，会有一个大幅度翻滚，然后这玩家一进来就自己在那翻）
看起来相当厉害啊！完全不知道他的真实位置在哪。犹如轻功高手，身影不定。
结果我方大宝剑冷笑一声，高速再来了个绕场循环，连翻滚哥一并砍倒在地。
好吧，原来是个中看不中用的。

然后对面又进来个屠龙哥，只是……只是我看不到人物模型。恐怕已是出窍分神，实力深不可测！
至于为何我知道是屠龙？因为他站在原地，轻抬宝刀，就能以屠龙索命千里之外。（玩家对这个挂取的外号叫做“小李飞刀”）

不，这可能已经是合体期了！他轻轻松松把我方大宝剑摁在地上摩擦。元婴强者都被打得惨不忍睹。（话说我们这边就大宝剑一个修仙之人，所以其他人完全是任人鱼肉状态）

后来这位强者觉得太无趣，自己跳到地图底下（死亡隧道地图）划水去了。（我下去就看到一片轻刀打水激起的水花犹如水雾一样，他一抬头我就GG了）

这时，一个笑脸兵入场。刚瞥见他的级别（最低级别图标就是个笑脸）就两股战战，要知道，在正服仙家最强战力基本是笑脸兵。
还未等我缓过神来，只见他小刀在空中漫无目的地一划，我们这边全部人应声倒下！
倒在血泊中的我才忽然顿悟了，原来笑脸，是对凡人最大的鄙夷和嘲讽。
（问题是这把怎么挂基本都在对面？）
[以上除艺术加工外全都是我真的见过的外挂]



还有一次是生化模式。一个玩家拿着生化手雷无限投掷，而且还在天空飞。跟轰炸机似的，炸的全房都有点卡。
美中不足的是他的飞天挂需要不断按跳跃键，不然会下坠，显得不太美观。

也许这把无敌手，太无聊了，这玩家没有参与下一把。
结果新一轮开始，玩家中一架空中炮艇直接起飞，拿着巴雷特，把原本2-3秒一枪的大炮打出了半秒一枪的速度，还不用换子弹。
妥妥空中炮艇，我们所有人都变生化了他还在空中火力压制。而且他的飞天挂是固定高度的，不需要他连续操作。所以他可以专心开炮。
正当我以为又要望洋兴叹的时候，生化群里突然窜出一只刚才还平平无奇的小红，腾空而起，直奔炮艇。
我们麦都兴奋炸了:
“卧槽！神仙对决啊！”“抓他！抓他！”
这小红飞天就是上局那个轰炸机的连续跳跃飞天。虽然慢了点，但却恰恰对固定高度的飞天形成了威胁。
小红从下面一点点扑上去，炮艇的飞天挂改变高度似乎很不连续，所以他只能且战且退。
勉强打死小红一次，击退第一波攻击。
但很快小红复活，继续扑上来。炮艇不就就被贴身击毙了。

后来他两还搞出了飞天终结者对战空中炮艇，飞天终结者对决飞天复仇女神……
反正我们一帮凡人都在地上喊666
","允许算法参赛，这种游戏很多啊。只不过，这种所谓提醒玩家的功能其实是完全没有必要的。
因为允许算法的话，所有的事情都可以由算法完成，玩家只需要看就行了。
本质上你想要的所谓掌控一切的感觉，然后却发现在AI面前人类的操作显得那么没有意义，实际上给不会编程的玩家不会带来多少乐趣。
因此这类游戏最终变成了程序员专属，或者至少是对算法感兴趣的玩家专属。也算是某种程度上的策略游戏吧。这对于某些只想要操作取胜，不想要极致策略的玩家来说并不友好。
"
22,程序员必须掌握哪些算法？,"不 BB，直接上干货，非科班出生，毕业工作后才开始学算法，到目前学了 4 年 ！！！
为了让你对数据结构和算法能有个全面的认识，我画了一张图，里面几乎涵盖了所有数据结构和算法书籍中都会讲到的知识点。

这里面有10个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；10个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。
掌握了这些基础的数据结构和算法，再学更加复杂的数据结构和算法，就会非常容易、非常快。
这里也给大家推荐一个特别适合新手免费刷题的网站

算法相关内容非常全面，从基础入门到进阶提升，所有必备知识点都包含了，而且牛客不光是一个刷题网站，还是一个交流学习平台，发个问题总有热心的大佬帮助！
如果觉得不错，别忘了双击点个赞哦。
在这里也送大家一本帮助我拿到BAT 等一线大厂 offer 的算法笔记，是一位阿里大神写的，对于算法薄弱或者需要提高的同学都十分受用，算法一定是计算机学习的重中之重：
貌似手机端打开连接有的会出现问题，可以点击这个总结看看：
这里补充一下，无论是学习算法还是学习编程的任何一个技术点，想要得到提升，最好的一个方法就是去阅读，阅读优秀牛人的分享，目前主流的程序员习惯阅读的博客网站中，掘金社区属于质量不错的一个，内容包括前端、后端、Android、iOS、人工智能等等，各个方向，各个技术点都有，C++程序员需要的知识都能找到。
喜欢在掘金社区阅读的小伙伴可以通过下方链接了解。
看动画轻松理解时间复杂度（一）
看动画轻松理解时间复杂度（二）
冰与火之歌：「时间」与「空间」复杂度
每个程序员都应该收藏的算法复杂度速查表
五分钟了解一下什么是「贪心算法 」
有了四步解题法模板，再也不害怕动态规划！
（进阶版）有了四步解题法模板，再也不害怕动态规划！
（再进阶版）有了四步解题法模板，再也不害怕动态规划！
浅谈什么是分治算法
看动画轻松理解「递归」与「动态规划」
浅谈什么是动态规划以及相关的「股票」算法题
深度解析「正则表达式匹配」：从暴力解法到动态规划
「多图警告」手撕排序算法 – iOS进阶必备
十大经典排序算法动画与解析，看我就够了！（配代码完全版）
这或许是东半球分析十大排序算法最好的一篇文章
几道和「广度优先搜索」有关的算法面试题
初识广度优先搜索与解题套路
从简单二叉树问题重新来看深度优先搜索
二分查找算法详解
一网打尽！二分查找解题模版与题型全面解析
面试官，我会写二分查找法！对，没有 bug 的那种！
动画：BM 算法中的坏字符规则与好后缀规则
动画：七分钟理解什么是KMP算法
动画：什么是 BF 算法 ？
动态规划之 KMP 算法详解（配代码版）
如何高效对有序数组/链表去重？
超详细！详解一道高频算法题：数组中的第 K 个最大元素
一道简单的数组遍历题，加上四个条件后感觉无从下手
数组特性的妙用！如何找到「缺失的第一个正数」
剑指 offer 第一题：二维数组中的查找
动画：什么是单调栈？
在数据结构中穿针引线：链表实现栈和队列
从简单的线性数据结构开始：栈与队列
五分钟学算法小知识：用栈实现队列/用队列实现栈
几道和「堆栈、队列」有关的面试算法题
超详细！图解「合并 K 个排序链表」
动画：面试如何轻松手写链表？
LeetCode 上最难的链表算法题，没有之一！
链表算法面试问题？看我就够了！
看动画轻松理解「链表」实现「LRU缓存淘汰算法」
从简单的线性数据结构开始：穿针引线的链表（一）
在数据结构中穿针引线：链表实现栈和队列
五分钟速读：什么是散列表（哈希表）？
什么是哈希洪水攻击（Hash-Flooding Attack）？
几道和散列（哈希）表有关的面试题
如何判断一个元素在亿级数据中是否存在？
面试前准备：二叉树高频面试题和答案
懵逼树上懵逼果：学习二分搜索树
LeetCode 二叉树问题小总结
从简单二叉树问题重新来看深度优先搜索
几道和「二叉树」有关的算法面试题
详解什么是平衡二叉树（AVL）（修订补充版）
【面试现场】为什么 MySQL 数据库要用B+树存储索引？
字典树概念与题型解析
面试官：为什么 MySQL 的索引要使用 B+ 树，而不是其它树？比如 B 树？
心里没点 B 树。。。
数据结构与算法——最小生成树
植树节，程序猿种的那些树
数据结构与算法——2-3-4树
数据结构与算法——2-3树
看动画轻松理解「Trie树」
浅谈什么是图拓扑排序
数据结构与算法——图论基础与图存储结构
数据结构与算法：三十张图弄懂「图的两种遍历方式」
数据结构与算法——图最短路径
学习数据结构和算法的过程，是非常好的思维训练的过程，所以，千万不要被动地记忆，要多辩证地思考，多问为什么。
如果你一直这么坚持做，你会发现，等你学完之后，写代码的时候就会不由自主地考虑到很多性能方面的事情，时间复杂度、空间复杂度非常高的垃圾代码出现的次数就会越来越少。
你的编程内功就真正得到了修炼。
2020 年 01 月 13 日补充：
入门的同学，我建议你不要过度追求上去就看经典书。
不要一来就拿着《算法导论》开始啃，初学就去啃这些书肯定会很费劲。你一旦啃不下来，挫败感就会很强。
然后就放弃学算法了。
所以，入门的同学，我建议你找一些比较容易看的书来看，比如《大话数据结构》和《算法图解》。
不要太在意书写得深浅，重要的是能不能坚持看完。
《大话数据结构》 这本书最大的特点是，它把理论讲得很有趣，不枯燥。而且每个数据结构和算法，作者都结合生活中的例子进行了讲解， 能让你有非常直观的感受。
虽然这本书有 400 多页，但是花两天时间读完，应该是没问题的。
如果你之前完全不懂数据结构和算法，可以先从这本书看起。
《算法图解》 跟《大话数据结构》走的是同样的路线，就像这本书副标题写的那样，“像小说一样有趣的算法入门书”，主打“图解”，通俗易懂。它只有不到 200 页，所以内容比较少。
作为入门，看看这本书，能让你对数据结构和算法有个大概的认识。
当然，这些入门书共同的问题是，缺少细节，不够系统，也不够严谨。
所以，如果你想要系统地学数据结构和算法，看这两本书肯定是不够的。
通过基本入门算法书的调教，你已经逐渐体会到了算法的魅力，现在正是时候踏入基础系列算法的领域！！！
这些书籍需要你费点心思去阅读。
很多同学在学习的过程中，看到一篇算法科普文章经常会有这样的想法。
哎呀，要是文章的代码是 Java 语言就好了呀。
哎呀，要是文章的代码是 Python 语言就好了呀。
虽然代码并不会很严重影响阅读，但还是有很多强迫症的同学喜欢看到文章的解释代码是自己擅长的。
我这里推荐《数据结构和算法分析》，这本书非常系统、全面、严谨，而且又不是特别难，适合对数据结构和算法有些了解，并且掌握了至少一门编程语言的同学。而且，这个作者也很用心。
他用了三种语言，写了三个版本，分别是：《数据结构与算法分析 ：C 语言描述》《数据结构与算法分析：C++ 描述》《数据结构与算法分析：Java 语言描述》。
大家都知道，对于程序员来说很大程度上算法就是为了应付面试的。
所以，推荐三本有益于面试的书籍，分别是：《剑指 offer》《编程珠玑》《编程之美》。
《剑指 offer》这本书的目的非常明确，就是为了面试。
这本书几乎包含了所有常见的、经典的面试题。如果能搞懂这本书里的内容，应付一般公司的面试应该不成问题。
面试之前也可以去牛客看看笔面经，知己知彼百战不殆！
我做了一个 图解《剑指 offer》的小程序，应该能帮助你学习，感兴趣的可以在微信搜索 图解剑指offer。
我也在 B 站录制了一些图解剑指 offer 的免费视频课程，感兴趣的也可以看看，每个视频控制在5分钟以内。


《编程珠玑》这本书的豆瓣评分非常高，有 9 分。
这本书最大的特色就是讲了很多针对海量数据的处理技巧。这个可能是其他算法书籍很少涉及的。面试的时候，海量数据处理的问题也是经常会问的，特别是校招面试。不管是开拓眼界，还是应付面试，这本书都很值得一看。
《编程之美》这本书有多位作者，其中绝大部分是微软的工程师，所以书的质量很有保证。不过，这里面的算法题目稍微有点难，也不是很系统，这也是我把它归到面试这一部分的原因。如果你有一定基础，也喜欢钻研些算法问题，或者要面试 Google、Facebook 这样的公司，可以拿这本书里的题，先来自测一下。
正如 N.Wirth 教授所说的： 数据结构+ 算法＝程序。
遇到一个实际问题，充分利用所学的数据结构，将数据及其之间的关系有效地存储在计算机中，然后选择合适的算法策略，并用程序高效实现。
这句话可能有点抽象，我举个例子给你们解释一下。
在工作过程中，我们多多少少都接触过 OAuth2 ，在使用 OAuth2 授权的时候，通常应用会弹出一个类似这样的信息：
1) 获取用户基本信息接口

2) 获取用户列表接口

3) 用户分组管理接口

。。。
思考一下，如果让你设计数据库，应该怎么设计信息存储权限？
如何你熟练掌握了各种数据结构的特点的话，那自然而然想到使用 bitmap 来存储权限。
我们把权限划分成最小粒度之后，每一个 bit 都它的含义， 例如我们把权限划分为以下几种：
每勾选一个选项，就代表着这个权限被授权，为了保证可扩展性，我们使用一个 uint64 来保存这些 bit ，也就是说，我们一共可以划分 64 种细分权限，然后对这些权限进行组合。
例如，第一个 bit 如果设置了，那么就代表可以获取你的昵称、头像、地区、性别等基本用户信息， 第二个 bit 如果设置了，就可以用你的身份发状态。
数据结构的实际作用还有挺多，感兴趣的可以搜索以下知识点：
上面这些例子是关于数据结构的，我再举一个算法的例子，如果有帮助，不妨点个赞收藏一下，好的内容值得肯定。
同样的也来思考一个问题：计算机的缓存容量无论再大，缓存满了还是要删除一些内容，给新内容腾位置。
那么删除哪些内容呢？我们肯定希望删掉哪些没什么用的缓存，而把有用的数据继续留在缓存里，方便之后继续使用。那么，什么样的数据，我们判定为「有用的」的数据呢？
这个时候采取的策略就是 LRU 缓存淘汰算法。
LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。
具体的关于 LRU 缓存淘汰算法 的介绍可以看我之前写的一篇文章。
补充：
为了避免知乎大佬觉得我吹逼，先贴一下自己的 GitHub 地址，目前 70，000 star，全球排名 51 名。
https://github.com/MisterBooo
算法是一种技能，是可以通过科学合理的方式训练出来的能力。
在想刷题之前，得从心里认识到接受刷题很重要，才能坚持去刷题。
江湖有个传言：国内刷 LeetCode，最多够你吃 1 年老本；湾区刷 LeetCode ，够你吃 10 年老本了。
为什么湾区的刷题性价比这么高呢？
你想想，电面考 4 道题，一道题值 5 万！单位是 Dollar ！
刷到就是赚到！！
想想是不是很刺激，有没有动力开始刷题了！可以提速刷题了！
就目前互联网的情况来说，无论是面国外大厂还是面国内大厂，如果想换工作都要去刷题，一面二面不丢你几道 Hard 题，都对不住你偷偷摸摸找个会议室假装开会实则面试的鸡贼。
同时，还得认识到一点，面试能力和你平时的工作能力其实差别挺大的。
有些人技术挺厉害的，但没有刷题，一面二面都过不了，而某些小镇刷题家，还真就靠刷题拿下了 Google、微软、脸书等大厂offer。
国内大厂也有这种趋势，比如字节，一大半都是面试题。
要不是他提前先看视频刷题，妥妥得凉凉。
所以，刷题很重要。
（PS：感谢大家耐心的阅读，算法是程序员的重中之重，必须攻克，大厂面试必考，顺便送一份阿里大佬刷Leetcode总结的算法笔记，如果你能吃透，那我相信80%的技术面试都会不在话下：
BAT大佬写的Leetcode刷题笔记，看完秒杀80%的算法题！
这本书的目录，非常经典：
刷题大概可以分为 4 个阶段。
1、纯小白，不知道怎么刷题，对很多概念都很陌生，各种数据结构和知识点几乎完全不懂，打开 LeetCode 第一题，满头问号。
有人相爱、有人夜里开车看海、有人 LeetCode 第一题都做不出来。
2、算法上基本已经入门，Easy 可以做出来，Medium 纠结半天也能有头绪，但基础不牢，比如字符转字符串还得 Google 一下。
3、刷了几百道题后，总结了自己的解题模板，参加周赛有时候甚至可以全部完成。
4、开始以 beat 100% 作为 AC 的目标了。
就目前的算法面试大环境来说，能达到第二阶段，中小公司可以应付过去了，到达第三阶段，字节、腾讯算法面试环节妥妥没问题了。
怎么样到达第三阶段？
给一下我的一些小建议吧。
1、如果目标是国内大厂，那么一定要刷足够的题，不需要把 LeetCode 上 2500 道算法题都刷完，但至少刷 200 道算法高频题，这些高频题我都写了题解同时也录制了视频，
在这个链接总结了：https://www.algomooc.com/1659.html
2、面试前一周以看题为主，因为刷题也刷不了几题，多看看自己总结或者别人总结的模板，比如回溯算法模板，掌握后，几十道回溯题都不在话下。
一些模板：
3、刷题过程需要注意难度要循序渐进，算法训练是一个系统工程，需要循序渐进，太过于急功近利，反而容易因做不出难题而产生挫败感，带来反效果。
如果你本身有基础，熟练度高，那你刷简单的 LeetCode 应该是几分钟一题，几分钟一题的，花不了你多少时间。
如果你刷简单都花费很长时间，说明熟练度不够，就更应该从简单开始，然后过度到中等，再过度到困难。
并且，目前国内大厂的算法考察，基本不会超过 LeetCode 中等难度，上限难度基本都是 LeetCode 中等题里面的中等难度，所以不要太去纠结难题怪题偏题。
把高频题掌握就行了：https://www.algomooc.com/1659.html
再退一步，如果你觉得 LeetCode 的题目太难，可以先从《剑指 Offer》上的算法题开始学起。
为了帮助大家更好的入门学习算法，经过半年的积累，我给大家卷了《剑指 Offer》系列的三十道题目，结合动画的形式录制了视频，相信能帮助你更好的刷题。
领取地址：
4、按算法分类来选题，比如一个时间段，只刷链表题，刷得差不多的时候，接下来再刷二叉树的题。
这样做有几个很明显的好处。
一、持续地刷同个类型的题目，可以不断地巩固和加深理解，可以总结出自己的思考路径或者解题模板。
比如链表题目，就会去思考虚拟头节点、双指针、快慢指针。
二、可以更全面地接触这个数据结构，算法的各个变种，这会促使你对这个数据结构，算法的理解更加全面和深刻，学习的效率会更高。
我一直认为读书是世界上性价比最高的成长方式，书很便宜但分量很重，是让我们摆脱平庸走向卓越的方式之一。
对于计算机专业的学生而言，读计算机经典书籍不光能让你快速提升知识和能力，更会让你在校招之际如虎添翼。
书籍下载：计算机必看经典书籍（含下载方式）
下面这是一个高赞回答合集，建议大家点赞&收藏，Mark住别丢了，大学期间绝对用得上。
1、怎么学好数据结构，看下面这个回答，已经获得了 21000+ 的赞和 50000+的收藏。
2、如何系统地学习算法，看下面这个回答，已经获得了 11000+ 的赞和 26000+的收藏。
3、新手该如何使用 GitHub，看下面这个回答，如果在大学期间就知道使用 GitHub ，那么能力远超同龄人。
4、想成为一名优秀的程序员，那么这些程序员平时都喜欢逛的论坛怎么说你也得收藏一些吧。
5、无论别人怎么说，我都是坚定不移的选择计算机专业。
6、如何系统地学习 C++ ，这个回答能帮你找到路线。
7、想要准备 Java 面试，那么这些面试题必须掌握。
赶紧点赞和收藏吧~
","程序员必须掌握的常用算法正如 @力扣（LeetCode）所讲，主要包括以下内容：
算法：
1、排序算法：快速排序、归并排序、计数排序
2、搜索算法：回溯、递归、剪枝
3、图论：最短路径、最小生成树、网络流建模
4、动态规划：背包问题、最长子序列、计数问题
5、基础技巧：分治、倍增、二分法、贪心算法

数据结构：
1、数组和链表
2、栈与队列
3、树和图
4、哈希表
5、大/小跟堆，可并堆
6、字符串：字典树、后缀树

还可以在此基础上细分，例如单单排序算法就可以分为以下十种：
对于学习算法，我推荐在力扣上刷题：
此外，推荐一个用动画的形式演示 LeetCode 上的题目的项目：
例如基础的冒泡排序法演示如下：
选择排序法：

插入排序法：

希尔排序法：

归并排序法：

快速排序法：

堆排序：

计数排序：

桶排序：

基数排序：

该项目正在完善中，已经用动画的形式演示出了一下题目：
因为知乎排版没有表格，所以我就截图了，以上内容详见：

此外，再推荐一些免费的学习资源：
在学习的时候，要想为什么要这样设计，优点在哪里，有什么改进方法，逐步通过这样的方式提升逻辑思维能力。不懂就查，找学习资料和相关解答，坚持学习。
1. 算法学习 LintCode：https://www.lintcode.com/
算法学习网站，上去每天刷两道算法题，走遍天下都不怕。
2. 算法学习 LeetCode：https://leetcode.com/
也是算法题网站，同上。
3. 算法学习 LeetCode 中文站：https://leetcode-cn.com/
这个是上面算法题网站的中文站点，英文不好的可以刷这个，英文好的推荐去刷英文网站的题目，还能提升英语能力。
4. 中国大学MOOC网：https://www.icourse163.org/
中国大学MOOC是由网易与高教社携手推出的在线教育平台，承接教育部国家精品开放课程任务，向大众提供中国知名高校的MOOC课程。在这里，每一个有意愿提升自己的人都可以免费获得更优质的高等教育。

我是程序员客栈，中国领先的程序员自由工作平台，技术新人力解决方案。
","大学四年，算法是我非常注重学习的一门知识。下面是我觉得值得学习的一些算法以及数据结构，当然，并且我也整理一些看过不错的文章给大家，大家也可以留言区补充。如果觉得不错，别忘了点个赞哦。先上图，后详细解说
----------------2021.9.1更新--------------
另外，这里有个可以白嫖的项目，推荐给大家
1、时间复杂度
2、空间复杂度
一般最先接触的就是时间复杂度和空间复杂度的学习了，这两个概念以及如何计算，是必须学的，也是必须最先学的，主要有最大复杂度、平均复杂度等，直接通过博客搜索学习即可。
文章推荐：
算法分析神器—时间复杂度
1、线性表
不用说，链表、列表必须，不过重点是链表。
三分钟基础数据结构：如何轻松手写链表？
以后有面试官问你「跳跃表」，你就把这篇文章扔给他
2、栈与队列
特别是优先队列，再刷题的时候，还是经常用到的，队列与栈，是最基本的数据结构，必学。可以通过博客来学习。相关文章：
三分钟基础知识：什么是栈？
二叉堆是什么鬼？
【算法与数据结构】堆排序是什么鬼？
学习算法的过程中，有业余时间也可以学一学项目，毕竟很多算法最终都落地到项目上滴，这里给大家推荐一个
3、哈希表（必学）
哈希表相关的，推荐通过博客来学习，推荐文章：
Hash冲突之开放地址法
4、树
树相关是知识还是挺多的，建议看书，可以看《算法第四版》。相关文章：
高频面试题：什么是B树？为啥文件索引要用B树而不用二叉查找树？
【漫画】以后在有面试官问你AVL树，你就把这篇文章扔给他。
腾讯面试题：有了二叉查找树、平衡树为啥还需要红黑树？
【面试被虐】游戏中的敏感词过滤是如何实现的？
5、数组
树状数组其实我也没学过，，，，
这里给大家推荐一份刷题笔记，里面把各种算法题型以及经验都总结了，把这份笔记突击学习一下，很多算法考察，基本都稳了，给大家看一下目录


下载链接：
1、十大排序算法
对于十大算法的学习，假如你不大懂的话，那么我还是挺推荐你去看书的，因为看了书，你可能不仅仅知道这个算法怎么写，还能知道他是怎么来的。推荐书籍是《算法第四版》，这本书讲的很详细，而且配了很多图演示，还是挺好懂的。
推荐文章：
必学十大经典排序算法，看这篇就够了(附完整代码/动图/优质文章)(修订版)
2、图论算法
图还是比较难的，不过我觉得图涉及到的挺多算法都是挺实用的，例如最短路径的计算等，图相关的，我这里还是建议看书的，可以看《算法第四版》。
漫画：什么是 “图”？（修订版）
漫画：深度优先遍历 和 广度优先遍历
漫画：图的 “最短路径” 问题
漫画：Dijkstra 算法的优化
漫画：图的 “多源” 最短路径
3、搜索与回溯算法
这方便的只是都是一些算法相关的，我觉得如果可以，都学一下。像贪心算法的思想，就必须学的了。建议通过刷题来学习，leetcode 直接专题刷。
4、动态规划
我觉得动态规划是最难的一个算法思想了，记得当初第一次接触动态规划的时候，是看01背包问题的，看了好久都不大懂，懵懵懂懂，后面懂了基本思想，可是做题下不了手，但是看的懂答案。一气之下，再leetcdoe专题连续刷了几十道，才掌握了动态规划的套路，也有了自己的一套模板。不过说实话，动态规划，是考的真他妈多，学习算法、刷题，一定要掌握。这里建议先了解动态规划是什么，之后 leetcode 专题刷，反正就一般上面这几种题型。后面有时间，我也写一下我学到的套路，有点类似于我之前写的递归那样，算是一种经验。也就是我做题时的模板，不过感觉得写七八个小时，，，，，有时间就写。之前写的递归文章：为什么你学不会递归？告别递归，谈谈我的一些经验
5、字符匹配算法
我写过两篇字符串匹配的文章，感觉还不错，看了这两篇文章，我觉得你就差不多懂 kmp 和 Boyer-Moore 了。
字符串匹配Boyer-Moore算法：文本编辑器中的查找功能是如何实现的？
6、流相关算法
这方面的一些算法，我也只了解过一些，感兴趣的可以学习下。
最后，给大家推挤个项目，以防不备之需
对于上面设计到的算法，我都提供了感觉还不错的文章，建议大家收藏，然后可以利用零碎的时间进行阅读，有些人可能会觉得上面的算法太多，说实话，我觉得不多，特别是对于在校生的，上面涉及到的算法可以不用很懂，但至少得了解。至于书籍的话，如果你连基本数据结构都还不懂的，建议看《数据结构与算法》相关书籍，例如《大话数据结构》、《数据结构与算法分析》。如果你有一定的基础，例如知道链表，栈，队列，那么可以看《算法第四版》，不过这本书是用 Java 实现的，不过我觉得你只要学过 C，那么可以看的懂。
这些算法的学习，虽然你觉得学了没有什么用，但还是那些话，它对你的影响是潜意识的，它可以给你打下很深厚的基础内功，如果你想走的更远，那么我推荐学习，标注必学的，那么我觉得，你是真的需要抽时间来学习下，标注原理与应用的，代表你可以不知道怎么用代码实现，但是必得知道它的实现原理以及应用。
算法的学习没有太多捷径，离不开刷题，刷多了就会有感觉了，这里再给大家推荐一份某大佬的 leetcode 刷题笔记，汇聚了上千道 leetcode 题解，并且代码都是 beat 100%：下载链接：
----------------2021.9.1更新--------------
这里有个可以白嫖的项目，推荐给大家

","更新：
有很多朋友私信问我Python学习有没有什么好的资料，我给大家找了几门不错的免费课，想学的可以看看。
《Python入门教程》
《Python初级入门精讲》
《Python爬虫开发》
《Python实战编程》
《1小时掌握Python爬虫+高效学习法则》

原回答：
【收藏是点赞的4倍，你们是要闹哪样！】
程序员必须要掌握的十大经典算法
快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。
算法步骤：
1 从数列中挑出一个元素，称为 “基准”（pivot），
2 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。
3 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。
递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。

堆排序的平均时间复杂度为Ο(nlogn) 。
算法步骤：
创建一个堆H[0..n-1]
把堆首（最大值）和堆尾互换
3. 把堆的尺寸缩小1，并调用shift_down(0),目的是把新的数组顶端数据调整到相应位置
4. 重复步骤2，直到堆的尺寸为1

算法步骤：
1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列
2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置
3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置
4. 重复步骤3直到某一指针达到序列尾
5. 将另一序列剩下的所有元素直接复制到合并序列尾

这种搜索算法每一次比较都使搜索范围缩小一半。折半搜索每次把搜索区域减少一半，时间复杂度为Ο(logn) 。

算法步骤：
1. 将n个元素每5个一组，分成n/5(上界)组。
2. 取出每一组的中位数，任意排序方法，比如插入排序。
3. 递归的调用selection算法查找上一步中所有中位数的中位数，设为x，偶数个中位数的情况下设定为选取中间小的一个。
4. 用x来分割数组，设小于等于x的个数为k，大于x的个数即为n-k。
5. 若i==k，返回x；若i<k，在小于x的元素中递归查找第i小的元素；若i>k，在大于x的元素中递归查找第i-k小的元素。
终止条件：n=1时，返回的即是i小元素。

深度优先遍历图算法步骤：
1. 访问顶点v；
2. 依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；
3. 若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。
上述描述可能比较抽象，举个实例：
DFS 在访问图中某一起始顶点 v 后，由 v 出发，访问它的任一邻接顶点 w1；再从 w1 出发，访问与 w1邻 接但还没有访问过的顶点 w2；然后再从 w2 出发，进行类似的访问，… 如此进行下去，直至到达所有的邻接顶点都被访问过的顶点 u 为止。
接着，退回一步，退到前一次刚访问过的顶点，看是否还有其它没有被访问的邻接顶点。如果有，则访问此顶点，之后再从此顶点出发，进行与前述类似的访问；如果没有，就再退回一步进行搜索。重复上述过程，直到连通图中所有顶点都被访问过为止。

算法步骤：
1. 首先将根节点放入队列中。
2. 从队列中取出第一个节点，并检验它是否为目标。
如果找到目标，则结束搜寻并回传结果。
否则将它所有尚未检验过的直接子节点加入队列中。
3. 若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。
4. 重复步骤2。

算法步骤：
1. 初始时令 S={V0},T={其余顶点}，T中顶点对应的距离值
若存在<v0,vi>，d(V0,Vi)为<v0,vi>弧上的权值
若不存在<v0,vi>，d(V0,Vi)为∞
2. 从T中选取一个其距离值为最小的顶点W且不在S中，加入S
3. 对其余T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值缩短，则修改此距离值
重复上述步骤2、3，直到S中包含所有顶点，即W=Vi为止

关于动态规划最经典的问题当属背包问题。
算法步骤：
1. 最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。
2. 子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。 动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是 在表格中简单地查看一下结果，从而获得较高的效率。

朴素贝叶斯分类器依靠精确的自然概率模型，在有监督学习的样本集中能获取得非常好的分类效果。在许多实际应用中，朴素贝叶斯模型参数估计使用最大似然估计方法，换言之朴素贝叶斯模型能工作并没有用到贝叶斯概率或者任何贝叶斯模型。
_________________________________________________________________________________________
公号：聊聊Python，感兴趣的可以来找我玩，一起来聊聊Python这点事~
作者：lxlmycsdnfree
链接：https://blog.csdn.net/lxlmycsdnfree/article/details/78881146
希望能对你有用
","我来缅怀一下当年OI和ACM的日子……题目都在 Welcome To PKU JudgeOnline 上。
初期（校赛及省赛水题难度）:
一.基本算法:
二.图算法:
三.数据结构.
四.简单搜索
五.动态规划
六.数学
七.计算几何学.
中级（校赛压轴及省赛中等难度）: 一.基本算法:
二.图算法:
三.数据结构.
四.搜索
五.动态规划
六.数学
七.计算几何学.
高级（regional中等难度）: 一.基本算法要求:
二.图算法:
三.数据结构.
四.搜索
五.动态规划
六.数学
七.计算几何学.
八.综合题. (poj3109,poj1478,poj1462,poj2729,poj2048,poj3336,poj3315,poj2148,poj1263)
=====================================================================
扯点建议：
如果你不是要死磕acm搞出成绩来的话，多放点心思在数据结构上对以后的帮助会比较大，比如字符串相关的字典树、哈希、自动机、后缀树等等，而对脑力要求较高的比如博弈论和各种花式动态规划（树型DP、集合DP、插头DP等等）就不用太关心了。
btw这些算法和数据结构如果能精通的话，对你以后做数据挖掘和机器学习是有极大帮助的。
广告时间：如果你对以上学习路径有什么困惑，或者你对以下问题感兴趣：
那么欢迎来到我的知乎 Live：
SimonS 的知乎 Live - 如何快速攻克传统算法和数据结构
SimonS 的知乎 Live - 如何成为当下合格的算法工程师
SimonS 的知乎 Live - 机器学习入门需要哪些数学基础
","刷了小400道Leetcode，总结了如下知识点（文末可下载笔记）：
上述都是程序员面试的高频考点，想要彻底掌握的话，一定要有体系地去刷，以深度优先遍历的方法循序渐进的实战，让自己把每个知识点彻底挖透记牢。推荐大家用Leetcode官方出品的免费教程 Leetbook，按照各个知识点循序渐进地罗列了算法题。
推荐的学习顺序：
Leetbook的好处是把算法归类为各个章节，而且大部分章节都是免费的。如上图，在入门的时候就不要刷那种高频面试题了，先把数据结构和算法的各个基础打好。每个 book 里都是先教学、再由易到难地实战，一个知识点大概有十几道题，刷完基本上就能掌握一些套路，到medium的水平了。
然后才是去看各种面经和高频题，给自己查漏补缺，并且要稍微记录一下，几行代码或者解题思路，方便自己快速复习。
这里再给大家分享一些资料，都是刷题福音：
下面是我总结的一些必刷算法（字母是难度），部分解法在文末的脑图中，可以直接下载。
二叉树
平衡二叉树
完全二叉树
前缀和+哈希表
二分查找
BFS
DFS
双指针
滑动窗口
字典序
TopK问题
---
当然，除了勤奋地刷题之外，一定要多学习大佬们的思路，掌握最优的解法。这里离不开一些开源笔记的帮助：
一位CMU硕士整理的101道经典题型，按体系归好类了，初学者可以先跟着走一遍（文末下载）：
还有LeetCode Cookbook对1479道题都给了思路和解法、复杂度分析（文末下载）：
上面的资料都帮大家整理好啦，记得帮 @李rumor 点个赞再去下载呀～

","力扣 (LeetCode) 作为全球极客挚爱的技术成长平台，致力于为同学们面试、求职提供帮助。
向下阅读的同学一定要注意，下方 图片可能会带来不适，有密集恐惧症的小伙伴们请建议迅速划过。
在这里，力扣君也为大家整理了一些程序员在 面试中 需要掌握的算法，熟练掌握它们可以帮你在面试中如虎添翼，百战百胜。
现在 ChatGPT 风靡全球，AI 的概念离不开算法，学习算法更为重要
算法 - Algorithms
数据结构 - Data Structures
在 互联网公司最常见的面试算法题有哪些？ 问题下的回答中，力扣君更加详细地整理了一些面试常见的算法并且对每种算法罗列了很多题目，在此就不赘述了，感兴趣的同学可以点击链接了解更多内容。
如果不谈面试的需求，对于程序员来说上面提到的那些算法依然非常重要，可以说上述内容都是作为一个程序员必须掌握的算法。
有人可能会觉得，这些基础的算法在工作中完全用不到，安安静静地做一个 CRUD Boy 多好。
其实不然，虽然同是程序员，程序员之间也是可以分出个三六九等的。一名出色的程序员一定是熟练掌握各种算法的。扎实地理解与掌握这些基础算法，能帮助你收获更强的竞争力，在自己的岗位上快速晋升。
那熟练掌握这些算法，到底可以为身为程序员的我们带来什么呢？
比如，现在让你实现这样一个功能：给你一些有序的数字，动态地查找目标数字。实现这一功能的方法有很多种，当面临不同情况的时候，我们需要使用不同的方法。
如果你熟知各种基础算法，那么你就可以很容易地针对不同的场景找到合适的解决方案，并且将它们变成代码，以提升程序的效率。而不是遇事不决，先上暴力，虽然解决了问题，但是在时间与空间上还有很多不足。
通过学习这些算法，可以提升我们在计算机方面的能力：抽象建模能力、逻辑思维能力等，并且积累一些解决问题的基本思路：折半、倍增、贪心、分治等。
现实中的问题都大相径庭，但是我们通过将其抽象并建模之后，会发现问题的本质是相似的，我们往往可能从某一个基础算法中获得启发，从而高效地解决问题。而达到这一境界，就要求我们首先对基础算法能非常了解，并达到熟练运用，融会贯通的地步。
所以，即使过了公司面试这一关，算法对于程序员来说依然是非常重要的。熟练掌握算法，将是你职场晋升路上的一把利刃。还是那句话，奔着求职、面试、晋升的小伙伴，刷 力扣 拿到你的 Dream Offer，走向人生巅峰！
下面给大家推荐几个算法学习的网站：
对于算法的学习的平台，只要关注以下三个维度来进行选择：
力扣的 探索卡片 针对每一种算法都有详细的教学和习题，非常适合初学者来进行练习。
拥有上千道原创算法题的 力扣题库，国内外不少知名 IT 公司技术面试时的首选题库。如果你正在准备技术面试，来力扣刷题肯定没错。
在力扣 题解 版块发起对一道题的讨论，如果你没有好的解题思路，可以和其他小伙伴一起学习交流。
参加每周一次的 力扣周赛，你可以通过周赛来赢取力扣积分兑换相应奖励，如果时间没有那么充裕，也可以参加力扣的虚拟竞赛。力扣的竞赛题更偏求职风格，比赛过程中错误的数据会显示出来以方便选手调式，对多数程序员来说可以说相当友好啦！
Github 除了开源项目以外，也有一些大型的学习算法的项目。比如：
https://github.com/algorithm-visualizer/algorithm-visualizer
其中将许多著名的算法都做了可编辑的动画，对于后期理解图论等相关算法有很大帮助。
https://github.com/qiwsir/algorithm
亮点是这个项目是中文的，算法由浅入深，相对适合从零开始学算法的。
想挑战自我？可以试下 TopCoder
参加过 TopCoder 比赛的童鞋可能会对它印象深刻，它有它独特的魅力。TopCoder 没有测试用例，在比赛中，完成代码后可以去直接阅读别人的算法，并构造错误用例来为对方扣分。
可以说 TopCoder 很适合学有所成的人去寻找下刺激，不过建议有一定的刷题基础再进行尝试。
Coursera 上有各所大学的算法课程。有很多都是世界顶尖的算法课，有兴趣学习的程序员也可以不妨前去一试。
关注力扣官方微信公众号：「LeetCode力扣」，更多关于程序员面试、技术干货的内容等你来啃！
","0.1 排序的定义
对一序列对象根据某个关键字进行排序。
0.2 术语说明
0.3 算法总结
图片名词解释：
0.4 算法分类
0.5 比较和非比较的区别
常见的快速排序、归并排序、堆排序、冒泡排序等属于比较排序。在排序的最终结果里，元素之间的次序依赖于它们之间的比较。每个数都必须和其他数进行比较，才能确定自己的位置。
在冒泡排序之类的排序中，问题规模为n，又因为需要比较n次，所以平均时间复杂度为O(n²)。在归并排序、快速排序之类的排序中，问题规模通过分治法消减为logN次，所以时间复杂度平均O(nlogn)。
比较排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。可以说，比较排序适用于一切需要排序的情况。
计数排序、基数排序、桶排序则属于非比较排序。非比较排序是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr[i]之前有多少个元素，则唯一确定了arr[i]在排序后数组中的位置。
非比较排序只要确定每个元素之前的已有的元素个数即可，所有一次遍历即可解决。算法时间复杂度O(n)。
非比较排序时间复杂度底，但由于非比较排序需要占用空间来确定唯一位置。所以对数据规模和数据分布有一定的要求。
冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
1.1 算法描述
1.2 动图演示
1.3 代码实现
1.4 算法分析
最佳情况：T(n) = O(n) 最差情况：T(n) = O(n2) 平均情况：T(n) = O(n2)
表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。
选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。
2.1 算法描述
n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：
2.2 动图演示
2.3 代码实现
2.4 算法分析
最佳情况：T(n) = O(n2) 最差情况：T(n) = O(n2) 平均情况：T(n) = O(n2)
插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
3.1 算法描述
一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：
3.2 动图演示
3.3 代码实现
3.4 算法分析
最佳情况：T(n) = O(n) 最坏情况：T(n) = O(n2) 平均情况：T(n) = O(n2)
希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。
希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。
4.1 算法描述
我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2...1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。
先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：
4.2 过程演示
4.3 代码实现
4.4 算法分析
最佳情况：T(n) = O(nlog2 n) 最坏情况：T(n) = O(nlog2 n) 平均情况：T(n) =O(nlog2n)
和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。
归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。
5.1 算法描述
5.2 动图演示
5.3 代码实现
5. 4 算法分析
最佳情况：T(n) = O(n) 最差情况：T(n) = O(nlogn) 平均情况：T(n) = O(nlogn)
快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。
6.1 算法描述
快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：
6.2 动图演示
6.3 代码实现
6.4 算法分析
最佳情况：T(n) = O(nlogn) 最差情况：T(n) = O(n2) 平均情况：T(n) = O(nlogn)
堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。
7.1 算法描述
7.2 动图演示
7.3 代码实现
注意：这里用到了完全二叉树的部分性质：详情见《数据结构二叉树知识点总结》
7.4 算法分析
最佳情况：T(n) = O(nlogn) 最差情况：T(n) = O(nlogn) 平均情况：T(n) = O(nlogn)
计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。
计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。
8.1 算法描述
8.2 动图演示
8.3 代码实现
8.4 算法分析
当输入的元素是n 个0到k之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。
最佳情况：T(n) = O(n+k) 最差情况：T(n) = O(n+k) 平均情况：T(n) = O(n+k)
桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。
桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排
9.1 算法描述
注意，如果递归使用桶排序为各个桶排序，则当桶数量为1时要手动减小BucketSize增加下一循环桶的数量，否则会陷入死循环，导致内存溢出。
9.2 图片演示
9.3 代码实现
9.4 算法分析
桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。
最佳情况：T(n) = O(n+k) 最差情况：T(n) = O(n+k) 平均情况：T(n) = O(n2)
基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，k为数组中的数的最大的位数；
基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。
10.1 算法描述
10.2 动图演示
10.3 代码实现
10.4 算法分析
最佳情况：T(n) = O(n * k) 最差情况：T(n) = O(n * k) 平均情况：T(n) = O(n * k)
基数排序有两种方法：
MSD 从高位开始进行排序 LSD 从低位开始进行排序
这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：
我有一个微信公众号，经常会分享一些Java技术相关的干货；如果你喜欢我的分享，可以用微信搜索“Java团长”或者“javatuanzhang”关注。
","温酒的答案说的好极了，我也发挥下：
终生范围的年薪。以下数字都是假的，只是说明算法，无实际意义。

比如26岁可以开始工作，如果40岁就下岗，实际上一年100万，也只有1400万，要除以整个工作年龄（65-26 = 39），平均年薪大概只有30多万。而且累积税率下，高收入年份集中在26-40岁非常吃亏。

但，这没有考虑到房价上涨因素，因为房价上涨时期，前14年的收入会因为房产而大量增值，使得算法更加复杂。

还有比如假设能做到50岁，那么晚工作5年（比如多读个火坑博士）损失的钱是多少呢？假设起薪是100万，50岁下岗时是200万一年，实际上损失的是最后5年的收入，大概200X5 = 1000万。所以写码要趁早。

其次要算地点年薪。比如工作30年同样年薪，在一个房价上涨的地区，会在退休时能提出更多的钱，尤其是50多岁把一线城市或是加州的房子一卖回乡下养老或是环游世界，美滋滋。

第三要算成长年薪，同样100万的工作，有些技能会保证10年后不仅不失业，反而会上涨到150万，而有些技能会在衰退中，10年后可能只有50万甚至失业。
我当年做过粗略计算，很多LeetCode题做一道可以提升年薪300-500美元。假设400道Medium、Hard题可以拿到大厂Offer，那么很可能不刷题的人上限也就是不到20万，而大厂senior上限可以轻松35-40万。差不多20万的差距，除以400 等于 500美元。

所以一道Medium或是Hard题的价值大概是500美元年薪每年。而且这个可怕在于是累积的，每年500, 20年下来就是1万块一道题。这还不算大厂背景对个人的加分、对失业的强抵抗力等，只是单单年薪上的收入（当然，税后会少很多）。

这个“算法”掌握了，你才有动力去学习LeetCode的算法，你就不会觉得它折磨人了。LeetCode这么一看，简直跟金山一样，还不去挖？
Google和微软的时薪就比较高，FB亚麻就相对低。这种时薪不光是用hours计算，还用体力计算。比如微软上班干两个小时活，扯六个小时蛋，然后回家精神抖擞，可以去卖房子、创业、炒股票等，相当于一天多出来4个小时有效时间；FB上班干七个小时活，被扯两个小时蛋，通勤再耗去一个半小时，回家就瘫痪了。

千万别看什么华为他们996效率高。我算过，他们效率很低：中午吃饭吃一个小时，还要午休一个小时，加上重新进入状态的时间，中国的12小时一天，实际上也就相当于美国的9小时一天左右，因为我们这里9小时是真的9个小时。

公司免费三餐大概省多少钱？早饭就算0（因为可以不吃），午饭算10美元，晚饭算15美元，一年工作220天，25X220 = 5500美元。但这是税后的，所以5500 要乘以1.5（税率按33%近似） = 8250美元税前。

还要算时间账：午餐和晚餐大概各省半个小时的话（不需要开车出去或是下楼吃等），一年会省220小时，相当于多出来220/8 = 27天。

还要算健康账：因为公司有大量的蔬菜水果等。食物种类多变更有利于身体。

还要算士气账：免费三餐大概能提升10%-30%的员工士气（我是吃货，所以+30%）。

结论：三餐免费每年带来很大的收益，无论公司还是员工。
假设一个人面一家大厂的成功率是25%，大厂有8家，冷冻期均是一年，连续坚持不懈面5年，一个offer都拿不到的概率是：
（1-0.25）^ (8*5) = 0.75 ^ 40 = 0.00001 = 0.001%

假设这人只有5%的成功率，且一年只面了4家，连续面5年，一个offer都拿不到的概率是：
（1-0.05）^ (4*5) = 0.95 ^ 20 = 0.3584 = 35.84%

可见，一个只有5%成功率的人，坚持面5年也有大概2/3的概率能进大厂。

第二个假设跟我在现实中的观察很相似，也解释了为什么很多看似不强的人也进了大厂。
","心率算法：
注意：由于最大加班心率是一个基于生理条件的心跳极限的估算值，故实际强度要因人而宜，对于初习者通常可保持在60～65%MHR即可。如果不顾自己的身体条件一味追求高强度加班，则将不利于健康。
代码诚可贵，生命价更高！程序员同行们一定要注意身体，我们一定要熬到国家“1024程序员节”法定节假日那一天呀！！！！！！
正经算法：
2020版数据结构与算法
2020版数据结构与算法（资料网盘） 提取码：jkg9
让数据结构不再难懂，让算法不再难写
让数据结构不再难懂，让算法不再难写（资料网盘） 提取码：qca8
C语言数据结构 培养架构师思维
C语言数据结构 培养架构师思维（资料网盘） 密码：4wi6
互联网巨头公司面试题目之二叉树数据结构与算法
互联网巨头公司面试题目之二叉树数据结构与算法（资料网盘） 提取码：j8i0



","计算机科学家投票选出最重要的算法（按照英文名称字母顺序排序）：
1、A* 搜索算法——图形搜索算法，从给定起点到给定终点计算出路径。其中使用了一种启发式的估算，为每个节点估算通过该节点的最佳路径，并以之为各个地点排定次序。算法以得到的次序访问这些节点。因此，A*搜索算法是最佳优先搜索的范例。
2、集束搜索（又名定向搜索，Beam Search）——最佳优先搜索算法的优化。使用启发式函数评估它检查的每个节点的能力。不过，集束搜索只能在每个深度中发现最前面的m个最符合条件的节点，m是固定数字——集束的宽度。
3、二分查找（Binary Search）——在线性数组中找特定值的算法，每个步骤去掉一半不符合要求的数据。
4、分支界定算法（Branch and Bound）——在多种最优化问题中寻找特定最优化解决方案的算法，特别是针对离散、组合的最优化。
5、Buchberger算法——一种数学算法，可将其视为针对单变量最大公约数求解的欧几里得算法和线性系统中高斯消元法的泛化。
6、数据压缩——采取特定编码方案，使用更少的字节数（或是其他信息承载单元）对信息编码的过程，又叫来源编码。
7、Diffie-Hellman密钥交换算法——一种加密协议，允许双方在事先不了解对方的情况下，在不安全的通信信道中，共同建立共享密钥。该密钥以后可与一个对称密码一起，加密后续通讯。
8、Dijkstra算法——针对没有负值权重边的有向图，计算其中的单一起点最短算法。
9、离散微分算法（Discrete differentiation）
10、动态规划算法（Dynamic Programming）——展示互相覆盖的子问题和最优子架构算法
11、欧几里得算法（Euclidean algorithm）——计算两个整数的最大公约数。最古老的算法之一，出现在公元前300前欧几里得的《几何原本》。
12、期望-最大算法（Expectation-maximization algorithm，又名EM-Training）——在统计计算中，期望-最大算法在概率模型中寻找可能性最大的参数估算值，其中模型依赖于未发现的潜在变量。EM在两个步骤中交替计算，第一步是计算期望，利用对隐藏变量的现有估计值，计算其最大可能估计值；第二步是最大化，最大化在第一步上求得的最大可能值来计算参数的值。
13、快速傅里叶变换（Fast Fourier transform，FFT）——计算离散的傅里叶变换（DFT）及其反转。该算法应用范围很广，从数字信号处理到解决偏微分方程，到快速计算大整数乘积。
14、梯度下降（Gradient descent）——一种数学上的最优化算法。
15、哈希算法（Hashing）
16、堆排序（Heaps）
17、Karatsuba乘法——需要完成上千位整数的乘法的系统中使用，比如计算机代数系统和大数程序库，如果使用长乘法，速度太慢。该算法发现于1962年。
18、LLL算法（Lenstra-Lenstra-Lovasz lattice reduction）——以格规约（lattice）基数为输入，输出短正交向量基数。LLL算法在以下公共密钥加密方法中有大量使用：背包加密系统（knapsack）、有特定设置的RSA加密等等。
19、最大流量算法（Maximum flow）——该算法试图从一个流量网络中找到最大的流。它优势被定义为找到这样一个流的值。最大流问题可以看作更复杂的网络流问题的特定情况。最大流与网络中的界面有关，这就是最大流-最小截定理（Max-flow min-cut theorem）。Ford-Fulkerson 能找到一个流网络中的最大流。
20、合并排序（Merge Sort）
21、牛顿法（Newton's method）——求非线性方程（组）零点的一种重要的迭代法。
22、Q-learning学习算法——这是一种通过学习动作值函数（action-value function）完成的强化学习算法，函数采取在给定状态的给定动作，并计算出期望的效用价值，在此后遵循固定的策略。Q-leanring的优势是，在不需要环境模型的情况下，可以对比可采纳行动的期望效用。
23、两次筛法（Quadratic Sieve）——现代整数因子分解算法，在实践中，是目前已知第二快的此类算法（仅次于数域筛法Number Field Sieve）。对于110位以下的十位整数，它仍是最快的，而且都认为它比数域筛法更简单。
24、RANSAC——是“RANdom SAmple Consensus”的缩写。该算法根据一系列观察得到的数据，数据中包含异常值，估算一个数学模型的参数值。其基本假设是：数据包含非异化值，也就是能够通过某些模型参数解释的值，异化值就是那些不符合模型的数据点。
25、RSA——公钥加密算法。首个适用于以签名作为加密的算法。RSA在电商行业中仍大规模使用，大家也相信它有足够安全长度的公钥。
26、Schönhage-Strassen算法——在数学中，Schönhage-Strassen算法是用来完成大整数的乘法的快速渐近算法。其算法复杂度为：O(N log(N) log(log(N)))，该算法使用了傅里叶变换。
27、单纯型算法（Simplex Algorithm）——在数学的优化理论中，单纯型算法是常用的技术，用来找到线性规划问题的数值解。线性规划问题包括在一组实变量上的一系列线性不等式组，以及一个等待最大化（或最小化）的固定线性函数。
28、奇异值分解（Singular value decomposition，简称SVD）——在线性代数中，SVD是重要的实数或复数矩阵的分解方法，在信号处理和统计中有多种应用，比如计算矩阵的伪逆矩阵（以求解最小二乘法问题）、解决超定线性系统（overdetermined linear systems）、矩阵逼近、数值天气预报等等。
29、求解线性方程组（Solving a system of linear equations）——线性方程组是数学中最古老的问题，它们有很多应用，比如在数字信号处理、线性规划中的估算和预测、数值分析中的非线性问题逼近等等。求解线性方程组，可以使用高斯—约当消去法（Gauss-Jordan elimination），或是柯列斯基分解（ Cholesky decomposition）。
30、Strukturtensor算法——应用于模式识别领域，为所有像素找出一种计算方法，看看该像素是否处于同质区域（ homogenous region），看看它是否属于边缘，还是是一个顶点。
31、合并查找算法（Union-find）——给定一组元素，该算法常常用来把这些元素分为多个分离的、彼此不重合的组。不相交集（disjoint-set）的数据结构可以跟踪这样的切分方法。合并查找算法可以在此种数据结构上完成两个有用的操作：
查找：判断某特定元素属于哪个组。
合并：联合或合并两个组为一个组。
32、维特比算法（Viterbi algorithm）——寻找隐藏状态最有可能序列的动态规划算法，这种序列被称为维特比路径，其结果是一系列可以观察到的事件，特别是在隐藏的Markov模型中。

","从程序员面试角度，说说面试时需要掌握的算法有哪些。
具体的请看下面列表。不过，如果是准备面试的话，我建议你通过做题来巩固这些算法知识。这里推荐你到 http://www.lintcode.com 上面进行 Online Judge，以下类别的面试题目都有覆盖到。
准备之前可以试听《如何在一个月内攻破算法面试》，帮你节省65%准备时间。
算法部分
数据结构部分

----------3.31更新---------
有朋友留言说这些算法覆盖得太少，他都“基本掌握”了。需要做以下几点补充说明。
1. 我在这里总结的是程序面试必须掌握的算法知识。所以选择的是最常面试到的算法内容。面试与做研究不同，不会要求那些极少用到而又及其高深的算法。
2. 有的人觉得自己“基本掌握”了，但如果真的让他来做两道题，他也许花很长的时间都写不出来完整的答案。甚至即使做出来了，还会有非常多的bug。在面试中，一个题目一般只有30-45分钟的时间可以让你作答，而且要求bug free。如果你做不到这样，那就不可以说自己“基本掌握”。
3. 以上的算法知识点，看起来很少，真正掌握、吃透，是要花很长时间的。个人觉得与其泛泛地了解一些算法知识的皮毛，不如深入地把以上面试、工作中最常用到的算法知识吃透。
九章算法，硅谷一线工程师在线直播授课，已经帮助30000+人成功拿到心仪offer。
九章算法班，硅谷求职必备，你的面试官也曾上过这门课，点击立即报名试听
更多课程信息请访问：九章算法
","每种程序员的需求很不一样，与其谈具体的算法，不如说最基本应掌握复杂度、穷举、分治、回溯、贪心、动态规划等算法基础理论。
P.S. 如果我当面试官问
里类似的算法，估计很难请人。实际工作需要不断学习（甚至研究）领域相关的算法去解决问题，没有什么必须掌握的。
","前面一些回答，尤其那个3k多赞的，算是知识点罗列吗？找两本书：初等算法+算法设计，把目录贴出来，大概就是这个样子了。
我对此类回答不太满意。我来换一个角度解读下吧。

其实程序员员掌握多少算法并不关键，关键的是能不能理解算法背后深层的理论，以及修练出解题的思路。
就好像排序中的堆排序，本质就是二叉树的应用。
快速排序、希尔排序等本质都是分治法的思路。
等等
见的多了就会发现，很多算法面向解决的问题明明相差很大，但底层实现都是非常类似；而又有些算法面向的问题很类似，而底层实现又相差巨大。

现实世界的需求是千变万化的，即使你掌握再多的算法也不可能直接照搬某个算法去解决你面对的问题。
关键的是要通过学习算法过程中整理出解决问题的思路。例如面对高性能的需求附带一些个性化的情况时，是用hash表解决，还是用二叉树，选择哪种具体的实现以及一些细节处的处理。
因此在现实环境中，严格按照某种算法定义使用算法的情况很少见，大多都是变种。甚至多种算法拼凑组合。
而为什么能产生这么多算法，这么多变种算法的原因，其实也是因为很多人在面对自己的需求时照搬经典算法解决不了问题，所以修改或优化了算法，才产生了变种算法甚至新算法。

所以，学习算法不要单纯去记忆算法的定义和实现代码，关键是要学会其中的思路。

这个跟写代码学习设计模式、架构模式等的情况是一样的。真正严格匹配某种模式的情况很少，都是杂合。
关键是掌握其中的本质。就好像武功中的，看山还是山，看水还是水。无招胜有着的境界。

欢迎点赞和评论。
","算法是程序的灵魂——编程从本质上来说就是算法加数据结构，而算法是编程思想的核心部分。
当前程序员的岗位划分逐渐细化。对于研发级程序员来说，掌握算法是完成岗位开发任务的基础，而对于应用级程序员来说，掌握算法是进行岗位升级的重要基础。
小编建议程序猿们从以下几个方面审视或提升或入门算法知识结构——
基础部分
关于排序
关于查找
在应用中可以重点学习：字典类用例、索引类用例和稀疏向量
关于图
关于字符串
以下从在线题库、在线提交程序源代码等维度推荐一些优秀的网站，希望能对题主有所帮助。
一、在线题库
算法学习，本质上是学习一门语言。学习语言的要领在于看、听、说、练。对于新手、进阶的信息安全工作者来说，刷题能够让算法能力得到一个质的飞跃。
1、hackerrank - https://www.hackerrank.com/
面向程序员、Hacker们的社交网络，在算法、数学、SQL、函数式编程、AI等众多不同领域为挑战者们提供了相应的编程题目，用户可直接在线完成挑战。
2、Topcoder - https://www.topcoder.com/
成立于2001年，最早的在线编程竞技平台之一，网站提供了一系列的算法挑战，参赛者可使用代码编辑器直接进行在线作答，比拼获胜者可获得竞赛赞助方提供的奖励。
3、Geeksforgeeks - https://www.geeksforgeeks.org/
Geeksforgeeks涵盖文章、解释和代码解决方案等内容，除了提供基础的编程、算法学习资源外，在“算法和数据结构”主题中，提供测试项目，解题者可以在在线编辑器中进行挑战。
4、codeforces - http://codeforces.com/
此网站是由来自萨拉托夫州立大学Mike Mirzayanov领导的一个团队创立和维护，是一个举办比赛、做题和交流的平台，网站自带blog功能，可以求助/发布题解。
5、lintcode - https://www.lintcode.com/
支持中英双语，汇集了算法、数据结构，人工智能，系统设计等众多领域的题目，网站还会举办编程比赛，很多算法爱好者在这里切磋技艺。
此外：
1、Codewars - https://www.codewars.com/
2、Leetcode（https://leetcode.com/）
3、Github （https://github.com)
4、codehs - https://codehs.com/
5、visualgo - https://visualgo.net/
6、CoderPro - http://coderpro.com.cn/
7、codesignal - https://codesignal.com/
8、CodinGame - https://www.codingame.com/
9、codechef - https://www.codechef.com/
10、v2ex - https://www.v2ex.com/
11、Online Judge - https://acm.sjtu.edu.cn/OnlineJudge/
12、codecademy - https://www.codecademy.com/
13、programmingpraxis - https://programmingpraxis.com/
二、在线提交程序源代码
Online Judge系统最初使用于ACM-ICPC国际大学生程序设计竞赛和OI信息学奥林匹克竞赛中的自动判题和排名，现广泛应用于世界各地高校学生程序设计的训练、参赛队员的训练和选拔、各种程序设计竞赛以及数据结构和算法的学习和作业的自动提交判断中。
1、北大POJ - http://poj.org/
免费的公益性网上程序设计题库，包含3000多道饶有趣味的程序设计题，是个提供编程、算法题目的网站，兼容Pascal、C、C++、Java、Fortran等多种语言。
2、杭电HDU - http://acm.hdu.edu.cn/
杭州电子科技大学的在线评测系统，中国最受欢迎OJ之一，题目数量多，来源广，有很多优质好题。
3、浙大ZOJ - http://acm.zju.edu.cn/onlinejudge/
浙江大学的在线评测系统，国内起步最早的几个OJ之一，题目数量约2000道，打开速度较快。
4、洛谷 - https://www.luogu.org/
创办于2013年，是基于网页形式的信息学在线评测系统，它不仅仅是一个在线测题系统，还拥有强大的社区、在线学习功能。
5、RQNOJ - http://www.rqnoj.cn/
RenqingNet Online Judge，2007年8月上线，集成了题库、测评、讨论、团队、比赛等主体的网络平台，是国内OJ(信息学在线测评)开放平台开发和运行的先导。
其它：
1、大视野在线测评BZOJ - http://www.lydsy.com/JudgeOnline/
2、UOJ - http://uoj.ac/
3、福州大学 - http://acm.fzu.edu.cn/
4、上海交大OJ - http://acm.sjtu.edu.cn/OnlineJudge/
5、中科大OJ - http://acm.ustc.edu.cn/ustcoj/
6、宁波工程学院 - https://ac.2333.moe/
7、波兰SPOJ - http://www.spoj.com/
8、日本JOI - http://www.ioi-jp.org/index.html
9、LIGHTOJ - http://www.lightoj.com/
10、浙江工业大学OJ - http://acm.zjut.edu.cn/
以上，一股脑推荐很多网站，但并不意味着所有的都需要花大量的时间和精力去研究。在算法学习中，首先自己要找出自己的问题总是出在哪里？最薄弱的环节是哪一个？只有发现自身问题，知道如何学习去提升技能，最终才会学以致用。
","好问题。非常同意大佬 @温酒 的观点。
这里我的经验是不要按照 8 小时的工作制来计算，而是按照每个工作日实际的工作时间来计算时薪。要不然在那些 w/l balance 好著称的公司工作计算会有偏差。
举个例子，湾区某大厂小张年薪税前 240k。一年 52 周，平均每周 $4.6k。每周按照规定工作 40 小时，实际上在美国一般真正用于工作的时间有 30 小时/周就已经很忙了。
4.6k / 30 = 153
所以小张的最低时薪应该至少为 $153。注意，还不包括公司给 match 的 401k 以及各种保险。所以综合考虑应该还要更多一点。

第二个算法我认为程序员应该掌握的是确定做一件事的止损点，即在沉没成本大于多少时果断放弃做这件事？
考虑以下几个场景
1）”追“一个妹子，追多久如果还不答应就果断换人？
2）刷题进 dream company，刷到什么程度就去面试自己的 dream company，如果失败立马换其他公司？
3）在当前公司划水到什么时候应当考虑跳槽？
4）房价降/涨到什么时候则考虑买房？

这些都是我们生活中息息相关的事情，我认为掌握这些算法更重要，优先级更高。

","结合2019春招和秋招真题，以下几类算法题最常考，汇总了一下：
一、暴力枚举
二、动态规划
三、DFS/BFS
四、数学
五、模拟实现
六、贪心算法
七、字符串算法
推荐两个题库，面试算法题基本上都是从里面出的或者变形而来：
1、剑指Offer
2、leetcode在线编程
1、如何学习算法：十年算法刷题大牛手把手传授算法学习经验
2、算法基础入门
3、算法基础提升
4、求职算法真题精讲-中级
5、求职算法真题精讲-高级
6、直通BAT算法精讲
《程序员代码面试指南》左程云
更多名企笔试真题解析、面试经验交流、招聘信息内推，尽在牛客！
求职之前，先上牛客！快快下载拿offer！
因为每家公司的侧重点不同，所以他们面试时考的题目类型也不同。如果能提前知道每家公司考题的风格，临到自己上考场就会轻松很多。整理了一些前辈们的面试经验分享给大家：
最后，祝大家都能拿到自己最想要的那份offer，加油~
","2017年我还是个萌新，那时和爱打呼噜的2b室友讨论了一个晚上的结构体字节对齐，探讨空洞中的数据。当初笑话别人写的2b代码，终于自己写到了，windows下的vs真的是最优秀的debug工具，clion党不哭，羡慕那些java程序员之间讨论的，都是丰富的乱七八糟名字的高大上的东东。linux c程序员可能就一个内存泄漏。
一眨眼自己要找工作了，开始天天刷算法题了。一天夜里梦到老师了，被算法支配的恐惧。同学们都在抄作业，我也拿着后排的大神作业在抄，抄的是题目是1.4和4.2，大神只写了一题，我越抄越觉得在抄天书，知识它就是不进脑袋。还了作业，道了一声谢谢。回过头，看到老师在黑板上留下2个字，遗憾。
我信息安全专业出生，研究生时期光顾着做安全全栈实验了，并没有写过正儿八经的开发项目，导致编程水平一直很菜，匆匆一刷《剑指OFFER》，就开始关注校招宣讲，笔试了趋势科技、深信服的C++安全开发，都没有过，最后在新华三C++安全开发岗上岸了。如果算法你比我还菜，千万不要投安全开发岗，信息安全和软件设计是2个完全不同的职业方向，老老实实去做渗透测试～
下面是我当时一刷的80道算法题：
春风又绿江南岸，碧莲芳草酒连天。戈壁不识花间味，狂风劲草马蹄边。又是一个校招季，祝学弟学妹都能找到一个好工作～
本篇完～

","上大学的时候，老师一直跟我们强调：“算法才是编程的灵魂”，由此可见算法到底有多重要，那么程序员应该要掌握哪些算法呢？
为了让大家有一个清晰的认识，我画了一张脑图，罗列出了个人觉得比较重要的且需要掌握的算法和数据结构，同时还整理对应的学习文章和书籍分享给大家，如果看完觉得有用的话记得双击点个赞哦，下面开始上干货：

数据结构研究的内容就是如何按一定的逻辑结构，把数据组织起来，一般学习算法都是先从数据结构开始学习，先根据实际问题确定数据结构，然后在数据结构的基础上进行算法设计。
常见的数据结构有：常见的数据结构有：栈（Stack）、队列（Queue）、数组（Array）、链表（Linked List）、树（Tree）、图（Graph）、堆（Heap）、散列表（Hash table）。
常用的基础算法包括：分治算法、贪心算法、动态规划算法、二分查找算法和分支界限算法等，下面列举每个算法的详细教程：
五大常用算法之：分治算法
五大常用算法之：贪心算法
五大常用算法之：动态规划算法
五大常用算法之：二分查找算法
五大常用算法之：分支限界法
排序算法最经典的莫过于八大排序算法了，分别是：插入排序、冒泡排序、选择排序、希尔排序、堆排序、归并排序、快速排序、桶式排序。
排序算法很重要，考试和面试都会考察，而且是必考，我把八大排序算法的原理和代码都整理出来了，看下面这篇文章就够：
搜索算法是利用计算机的高性能来有目的的穷举一个问题解空间的部分或所有的可能情况，从而求出问题解的一种方法。 现阶段常用的搜索算法有：枚举算法、深度优先搜索、广度优先搜索、剪枝算法、回溯算法等，以下是详细教程：
搜索算法之：枚举算法
DFS（深度优先搜索）和BFS(广度优先搜索)
搜索算法之：剪枝算法
搜索算法之：回溯算法
树与图相关是知识还是挺多的，而且很重要，想全面了解可以看书，推荐看《图解算法》，后面有下载链接。下面也整理了一些相关文章：
数据结构与算法——图最短路径
数据结构与算法：三十张图弄懂「图的两种遍历方式」
数据结构与算法——最小生成树
几道和「二叉树」有关的算法面试题
关键路径算法详解
大话数据结构-多路查找树（B树）_小地盘的诺克萨斯-CSDN博客_多路查找树
在这里我也整理了一份由易到难的算法学习书单（附下载链接），希望能对大家在学习算法和找工作有所帮助！
这本书是京都大学一个计算机教授和朋友联合出品的动画讲解算法的App 所衍生出来的书籍，非常适合新手朋友们。里面没有枯燥的理论和复杂的公式，而是通过大量的步骤图帮助读者加深对数据结构原理和算法执行过程的理解，便于学习和记忆。将本书作为算法入门的第一步，是非常不错的选择。


本书从算法之美娓娓道来，没有高深的原理，也没有枯燥的公式，通过趣味故事引出算法问题，包含50多个实例及完美图解，结合学生提问，分析算法本质，并给出代码实现的详细过程和运行结果。本书可作为程序员的学习用书，也适合从未有过编程经验但又对算法有强烈兴趣的初学者使用，同时也可作为高等院校计算机、数学及相关专业的师生用书和培训学校的教材。


《啊哈！算法》一切以实际应用为出发点，通过幽默的语言配以可爱的插图来讲解算法。其中涉及的数据结构有栈、队列、链表、树、并查集、堆和图等；涉及的算法有排序、枚举、深度和广度优先搜索、图的遍历，当然还有图论中不可以缺少的四种最短路径算法、两种最小生成树算法、割点与割边算法、二分图的最大匹配算法等。


这是一本像小说一样有趣的算法入门书，示例丰富，图文并茂，以让人容易理解的方式阐释了算法，旨在帮助程序员在日常项目中更好地发挥算法的能量。书中的前三章将帮助你打下基础，带你学习二分查找、大O表示法、两种基本的数据结构以及递归等。余下的篇幅将主要介绍应用广泛的算法。


这本书大家一定如雷贯耳吧，基本上只要你是程序员就一定会用到这本书，书里面剖析了50个典型的程序员面试题，从基础知识、代码质量、解题思路、优化效率和综合能力五个方面系统整理了影响面试的5个要点，是程序员找工作必备的一本算法书。


这本书真的称得上是算法领域的“圣书”了，如果把它从头到尾看完并且搞明白了，那么恭喜你，年入百万不是梦！


学习算法的过程，是非常好的训练机器程序思维的过程，所以，千万不要被动地记忆，要多辩证地思考，而且一定一定要在看懂之后自己用自己喜欢的编程语言实现一遍，一定要亲自实现一遍呀！！！这一点太重要了。
如果你一直这么坚持做，你会发现，你的编程水平会越来越高，写的代码会越来越艺术，你会不由自主地考虑到很多性能方面的事情，时间复杂度、空间复杂度非常高的垃圾代码出现的次数也就会越来越少。
加油！！！
","高赞把数据结构到基础算法都总结得很清楚啦~
想要在学习的过程中加深的对算法的记忆和理解，还是要理论实践两手抓。
这里就介绍几个田纳西大学助理教授奥斯汀·亨利（Austin Z. Henley）推荐的练手项目，其中涉及的算法、要点，下文会加粗。
不使用GUI框架中内置的文本框组件，要如何搭建支持光标移动、选择、插入和删除操作的文本框？
这个项目中，存在两个主要挑战：
不要小看这些基础的功能，其中有许多细节值得注意。比如当光标位于文本当中，按下向上箭头，光标会移动到何处？
如果你觉得这太简单，还有进阶测试：
最后总结一下知识要点：
别忘了还有拓展阅读哟：

即使是最简单的游戏也需要考虑数据结构和设计模式。
在这个项目中，你的任务是从头到尾实现一个定义明确的游戏。最好使用SDL，SFML，PyGame这样的2D图形库。
第一步，创建对象移动的效果。
第二步，了解有关游戏循环的所有信息。游戏实际上是在绘图、获取用户输入和处理游戏逻辑之间循环。
第三步，处理用户输入。
第四步，学习如何创建和管理所有游戏对象及其状态。比如如何生成动态数量的敌人。
第五步，学习如何应用游戏的逻辑。子弹头位置何时更新？什么时候会有更多敌人出现在屏幕上？怎么判定敌人被干掉了？游戏何时结束？
甚至，在进阶阶段，你还可以考虑引入AI，来制造更加“智能”的敌人。
从头开始编写一种非常小的类似于BASIC的语言编译器，然后将其编译为任何其他语言。比如，用Python编写可以输出C#代码的Tiny BASIC编译器。
知识点：
从这个项目开始，难度就加大了。
操作系统依赖于硬件，因此入门门槛比较高。但这个项目可以帮助你更好地理解计算机底层都发生了什么。
作者亨利推荐了一本免费电子书《使用Rust构建RISC-V操作系统》作为入门教材（地址见文末）。
知识点：
如果以上四个项目，你都觉得so easy，那么就来尝试一下最后这两个高难度项目吧。
电子表格应用程序（如Excel）将文本编辑器和编译器的挑战结合在了一起。
在这个项目中，你需要学会如何在内存中表示单元格内容，并实现用于方程式的编程语言解释器。
这是一个操作系统+编译器的二合一挑战项目。
挑战内容是，编写一个虚拟机，让虚拟机可以像真实的CPU和其他硬件组件一样运行。
亨利的建议，是从简单的虚拟控制台入手，比如CHIP-8。
博客一出，在Hacker News、Reddit上受到了广大码农们的欢迎。
有网友说：
并且，网友们纷纷建言献策，又推举出好几个优质上手项目：
所以，这些项目是否激发了你的灵感？
Talk is cheap. Show me the code. 快动手练起来吧~
博客地址：
http://web.eecs.utk.edu/~azh/blog/challengingprojects.html
Hacker News讨论（内含更多项目推荐）：
https://news.ycombinator.com/item?id=21790779
《使用Rust构建RISC-V操作系统》：
http://osblog.stephenmarz.com/index.html
—完—
@量子位 · 追踪AI技术和产品新动态
深有感触的朋友，欢迎赞同、关注、分享三连վ'ᴗ' ի ❤
"
23,编程入门指南 v2.0,,,,,,,,,,,,,,,,,,,,
24,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
25,为什么美国程序员工作比中国程序员工作轻松、加班少？,"不是因为外国公司效率高，也不是因为他们开会多。同类的app，不论是电商还是视频，国内的app远比国外的复杂，变化更快，功能更多。三天一小改，五天一大改，过个节都要出一套ui，新功能层出不穷，做活动此起彼伏。
国内程序员的工作量，就是比国外的同行多，同样多的功能，国外程序员做，照样加班。
关键是，这些功能，真的有用吗？
知乎可以提问，可以回答，因为它是个问答社区。但它还能直播，能视频，能充值，能交易，能借书，能开课，还能众裁。正中间的按钮，有时是想法，有时是会员，是创作，是发现，但没人在乎，大家只是看看首页的时间线罢了。这么多的功能，对用户来说，体验不一定有几年前的版本好。
大量的加班时间，花在了一些可有可无的需求上。
微观上看，是kpi焦虑，宏观上看，是违法成本低。有多低呢？大概像水电费那么低。
多开几小时的灯，就能出个新功能，成本近乎于零，没人用也不亏，何乐而不为？没有法律层面的支持，劳动者就像在囚徒困境中，谁都不想加班，谁都不敢先走。
随着时间的推移，加班成为新常态，向各行各业蔓延。生活越来越单调，越来越重复，人从生产者，转化为生产资料。
","你自己随便拿出一个app看看吧
淘宝，支付宝：要喂小鸡？要建农场？
拼多多：要各种小游戏，要砍一刀，要各种抽奖抽红包（100%最大奖但就不行，你就得花几秒钟去看一个抽奖动画）
微信：直播，视频，小程序
美团：也是各种小游戏，稍不留神就点进去了
中国的KPI啊，明明是个购物app，明明是个支付app，明明是个外卖app，明明是个即时通讯app
为什么要增加那么多各种各样花里胡哨的小游戏？
亚马逊有小游戏吗？PayPal有小游戏吗？Google有小游戏吗？
说白了，不就是骗老板骗投资人的钱吗？
无法增加用户时长，咱们就小游戏走起，甚至送钱让你玩各种app内置的垃圾游戏，说白了，就是花公司的钱，花用户的时长，增加自己的绩效。
往上，骗得是投资人和老板，一看数据，全都增长
往下，坑的是用户，版本三天一小更，五天一大更，让你每天多花十来分钟挣那几分一毛钱
往内，写代码的不堪其扰，一会这需求，一会那需求，天天996，把自己的app跟摊大饼似的，约摊约大。

","嗯，被经理举报了：

现在我切换到表扬模式。
是的，他们效率更高。

但是，国内程序员不可能通过提高效率减少加班和压力。因为这事的决定权不在你而在公司。
之前“开发和产品经理因为识别手机外壳颜色而打架”的传闻之所以能引起广泛共鸣，就是因为这类事实在太普遍了，太多人感同身受。

因为中高层聪明。太聪明了。聪明绝顶、英明神武、别具慧眼、大巧若拙、福慧双修、绝圣弃智、兰芷蕙心、七行俱下、上智下愚、秀外慧中、足智多谋、聪明绝世、聪明睿智、聪明正直、精明能干、才清智高——人家喜欢听好话，咱得多说。尤其像这个水平的，起码值一千个关于聪明的形容词，对吧。

可惜俺才疏学浅，实在凑不够数。只能列出八百个——不信您数数，足斤足两，一个不少！
啊？别看评论区。那都是不识数的。数到八百太难了，也就您这么聪明的能数清。不信您点点，八百！少一个俺再赔你一千个！

怎么样？满意了吧？
满意了我们继续。

所以，当你花大力气设计了一个精简高效的架构，把一个很难的问题干净漂亮解决掉时，绝不会有人击节赞叹——恰恰相反，他们觉得你捣鼓了个把月才产出几百行代码，反而会犯嘀咕：这人是磨洋工呢，还是不会？
你面向搜索引擎编程，乱七八糟拷一大堆东西到代码里，用到用不到都留着，KPI表现反而会特别亮眼。
一天几千行代码当然亮眼。
一群外行，怎么会知道这几千行里面就两行有效呢。

类似的，你兢兢业业，一个bug都不让出，人家就把你忘了；反之，你大大咧咧，一个功能你能写出800个bug——经理看起来就很忙很努力，因为他得不停的和你交流；你也很忙很努力，不停跑经理那里讨论问题：全公司你最忙你经理最敬业，不奖励你俩还有天理吗？！

你看，你好我好大家好，身为聪明人，你为什么不多写点bug呢。
当然了，这是极端情况。大多数公司还是没这么极端的——他们的中高层还不是那种聪明绝顶、英明神武、别具慧眼、大巧若拙、福慧双修、绝圣弃智、兰芷蕙心、七行俱下、上智下愚、秀外慧中、足智多谋、聪明绝世、聪明睿智、聪明正直、精明能干、才清智高的。

即便如此，他们中的绝大多数——包括多数程序员——仍然不懂软件工程。
他们并不知道，或者说并没有想过，今天你写的每一行代码，都会是明天的新代码的地基。
即使你知道，也没办法让中高层明白。

如果你今天写的太过随意，明天就很难在这个基础上扩展它；如果你着急完成任务，今天不先把昨天的设计缺陷修改掉，而是想一个办法绕开……那么明天你就不得不绕着圈子躲开更多问题。
越往后，就越难改；越难改，就越容易出bug。

但是，如果你想改昨天的代码，你就得先解决前天的问题；想解决前天的问题，大前天乃至大半年前的设计缺陷你就得逐一解决掉。然后，这大半年里，你就完不成任何新提的需求。

反正至多做三两年我就要换工作了。随他去吧，完成眼前的工作要紧。

因此，为了急功近利的眼前效率，中国程序员的长远效率自然变得极低——越往后越低。
我曾经接过一个任务。

因为高层设计的严重问题，我们不得不在网络通信层去更新用户登录状态（稍微懂点的都知道这需求有多奇葩：打个比方的话，这就好像让发动机制造商在活塞上做一个阀门以便随时泄压一样怪异。原因是我们的整车商忘了装启动机也没有离合器，所以需要减轻发动机阻力方便人家把车推起来）。

项目经理不懂。他觉得一条SQL语句也就是0.0x秒的事，我们的流程耽误1秒问题应该不大，所以就答应了。
我说每个用户都可能卡这么0.0x秒，人多了咱这模块吞吐量就没法看了。这个咱不能接。真要接也行，得改成多线程架构，得多安排时间。

经理说没事，直接加就行。做出事了他们负责就是（言外之意，一旦接了这个，将来我们自己的锅也有办法拉他们一起来背）。

既然都这么说了，我就动手做。
做完，内部测试没有任何问题；但一上线，整个系统死了。
原因是，那个库负荷特别大，一条数据库更新语句能卡几秒甚至几十秒。将来人多了还会更卡。
经理说，算了，你改多线程吧。

我思考了三天，决定不动我们这边的架构；而是设计个thread_call接口。任何传给thread_call的函数都会在另外的线程里执行——为了避免读写到调用函数的局部变量、然后在线程执行时调用函数已退出，thread_call内部会自动申请内存，把转交给工作函数的字符串等通过指针引用的参数统统复制过去；当线程执行结束，函数返回值也会保存在某地等待查询（超时或查询后自动删除），同时释放用到的资源。

为了实现这个，需要一个全局单例类负责管理线程、及时清理用到的资源；同时最好有一个线程池和一个内存池，免得频繁申请/释放。不然长时间运行下去，把内存弄的千疮百孔，程序就更容易出问题了。
内存池我已经写过一个泛型版本，直接拿来用就行。剩下的线程池、资源自动申请/释放（基于RAII和泛型，不支持原始指针因为无法确认空间大小、也无法确保复制成功，玩过泛型的都懂），加起来一百来行代码解决。最终代码量300多点，其中一大半是注释。
这个东西轻松的一次编译通过；然后挺过了各种测试，没发现任何问题。

这东西差不多相当于给C做了个简易协程框架（当时协程概念还没流行起来，不然我就把yield也实现进去了），今后遇到任何类似的“需要并行工作、但又不涉及数据竞争”的需求，直接写个处理函数然后丢给thread_call执行就好。
你看，如果程序都照这样写，是不是就会越写越快？
因为你昨天写的东西，今天可以拿来就用。写的越多，积累越多，实现新功能时需要重新实现的东西就越少，效率自然越高。


但是这个东西让项目经理作了难。
这是因为，如果算KPI的话，等于我花一周写了300行代码；然后又测了一周……两周300行代码的产出，这实在太少了。

反观别人，一个用户注册，人家一个字段一个字段一个字节一个字节的用代码检查、复制，轻轻松松搞出来500行。很水的几个功能轻松灌水上万行代码，然后部门KPI也有了，个人重要性也体现了——而且修不完的bug：你看，离了我们这个部门，公司真不能过啊！

可我傻乎乎的300行代码搞出这么复杂个东西，竟然还测不出bug……项目经理是知道这里面功能多，但上面觉得你忽悠他。300行代码你还能吹出花来不成？
而且，既然没有bug，以后人家还需要你这个部门吗？问题都解决了，我们这些人……还有继续雇佣的必要吗？

总之，他希望以后再写程序，尽量写长一些……而且，为什么要复用呢？其实每一个类似的需求，都是可以给他整个几万行代码出来的嘛。

没错。人家的预期是：这是个挺复杂挺难的任务，你应该加班加点忙上几个星期，提交几千上万行代码，到时部门KPI有了个人业绩也好看——将来每个类似任务都应照此办理。
而我呢，轻轻松松300行代码，杜绝了类似任务的出现——什么都不用管，加一行thread_call，全都妥妥贴贴了。
一个任务对应一行，这KPI还能看吗？

你看，面向目标的不同，面向KPI编码就必然使得实现臃肿、问题频发、每天996过劳死……但做起来其实轻松愉快，因为你完全可以磨上仨月洋工，然后吹嘘“多线程有多难”；然后还能让高层不断找你、解决诸如野指针、数据脏读脏写、死锁、内存碎片导致长时间运行后大块内存分配失败等等等等疑难问题——既让你显得重要，又能轻轻松松“骗”来大量的KPI，最后还不需要去学鬼画符一样、难的不要不要的泛型技术……

而面向问题编码呢，借助泛型，自动识别、复制函数参数（它们可能来自调用者的栈，随时可能失效），再加上用池来加速资源回收/分配效率、提前杜绝内存碎片问题——这完全是个简单轻松解决的小模块。而且只需解决一次，我们自己的“类协程库”都出来了，以后写程序会越来越快、越来越好：你甭管我怎么做完的、耗了多少时间，功能点我给你实现了、上线后bug free，是不是对双方都有利？

但是，后者在这个公司行不通。
代码量少没KPI你气不气？
bug写的少没人找你显得你不重要，倒霉不倒霉？
将来项目失败抓人背锅时，别人说我天天加班996007态度端正；而你呢，955一分钟班不加，这态度是不是很能说明问题？

从上到下都不懂你能怎么的？

别说这家公司的管理者了，他们的技术人员自己都不懂。我两个关系比较好的同事，还真以为我们是公司里干活最少、最不重要的几个呢。
因为别人忙忙碌碌总有干不完的活、修不完的bug，高层中层领导天天围着转，求爷爷告奶奶但任务就是做不完，重要的不得了。而我们几个公司公认的技术专家呢，每天到时间就走；座位上冷冷清清，从无领导过问；经常上班时间闲极无聊于是借“学新技术”的名义逛论坛……
时间久了，他们自己都心虚：为啥别人总是有干不完的活、见不完的领导？为什么我们经常整周整周的没有任务、闲坐着发呆？人家是不是比我们干的多、任务难啊？不对啊，每次分配任务，分给我们的，都是别人接不了、不敢接的啊？

直到有一天，午饭后散步聊天打屁谈到这事，我才觉得不对，提议回去看看工作日志/提交记录之类东西。
那天我们大概照例聊到了下午三点吧——没错，因为事少，因为要都要不来工作，一个月至多也就忙一周，955都大块大块的空闲时间。别说加班了，平常上班我们都经常偷空出去散步。
悠哉游哉回到公司之后，我们就去翻看所有同事的提交记录和bug报告数据。这才惊讶的发现，我们比其他同事完成的功能点数量高出5~10倍、难度也普遍更高，bug率却近乎为0——别人一个功能点能有密密麻麻几十个bug，而且上线几年bug都抓不完；而在我们看来，这些都是压根就不应该发生的低级错误，而且我们提交的代码的确不包含这类错误。
所以，别人一年只做三四个功能点，每个功能点都要出十几、几十个bug；而我们呢，一年起码几十个功能点，加起来不过3~5个bug（我更是一年只有1个bug，而且bug原因还是需求没写清：某个字段让返回字符串，我按照C惯例后面加了个‘\0’；对方用的java，不能识别这个\0）。

问题是，“我们接的任务最多最难”，这事我们项目经理知道，中高层领导不知道。
中高层领导知道什么呢？他们只知道，这个任务总是在别人那里卡住；他们只知道，系统出了问题，该找的人肯定不是我们几个（从不出bug自然不需要找）——所以你猜，在他们心里，谁更重要？

于是我决定辞职。
这是我第一次进这种公司，也是最后一次。
因为这种公司完全是“逆淘汰”。水平越差越吊儿郎当越吃香，水平越高越兢兢业业越被边缘化。
","先说结论：跟国外公司比，国内公司最大的问题就是管理者素质不高，对问题的边界定义不清楚。提需求的人没有成本，无止境地提不靠谱的需求。码农自己开发时也追求快糙猛，提高了系统的风险。总的来说，经理很忙，产品很忙，码农很忙，测试很忙，运维也受不了。。就是这样的结局。

我在血汗工厂，大亚麻。整个大部门有80号码工。想知道大家工作有多轻松。。。我先上图为敬。
这位是最忙的。。这Commit记录你们看着办。。。 我们部门是前两年重组出来的，做了七八个全新的项目，按血汗工厂的风格，SDE是要full stack的，还要讲政治，写个类都要摆出个设计文档。跟自己组，隔壁组过完设计，大家blibli一通留言，然后针对几个service的API划分和命名再掰扯个一周。最后谁都说服不了谁，摆出一句”求赐名“这时高级经理或者SDE会猥琐地从希腊神话里找一个神的名字出来命名service，再随机指定几个比较顺眼的命名，会议就结束了。

除了内部Tech的会议，偶尔也会参与业务方的会议。在这里也是要讲政治的，你参会了就必须要多说，无论说什么，一定要存在感巨强。当小透明是行不通的，为什么，小透明就说明你这个人没想法，能力不行啊。某种意义上，声音大就是impact，就是能力！！有没有！！

接着说对SDE full stack的要求。你以为我们有前端，有测试，有运维？想多了，新开的service，如果涉及前端页面。是要自己写的。。。。没错，别管你是前端工程师还是后端工程师还是算法工程师，首先你得是个工程师，工程师就没有解决不了的问题。。。我们做前端时也要开很多会啊，跟业务方沟通进展和Demo时，业务方可以提意见，一旦提了意见是要sign off的。不是随意说说那么简单。这样有个好处，很多东西定下来了就不随意改变。提需求的人是面临很大的成本，你老提了需求又改，又sign off，不出两月大家就觉得你这人不靠谱，会给你很差的反馈。

谈完了前端，该到开发阶段了吧，开发时50%的时间在也业务代码，50%的时间在写测试代码。如果没有测试代码，code review是说啥也过不去的。写完代码之后，内部有很完整的自动部署工具，把你的单元测试，集成测试都跑完，然后部署测试环境，gamma环境等等。包括日志监控，都是要自己上手的，也是前文反复说的full stack的概念。SDE真的是Someone Does Everything啊。。。

这么一说确实挺忙的，实际上50%的时间都在会议，20%时间写代码，20%时间写测试代码，10%时间捣鼓一下配置，监控。但从来没有人加班，整天在家办公，这公司怎么还没黄。。怎么还没凉。

我来总结一下，会议是生产力。讨论得越清楚，返工就越少。比如系统设计，几个组的人一起讨论清楚系统的边界，上下游系统的关系，你的问题边界和需求是很清晰的。码工自己啰啰嗦嗦地对全流程服务。测试，运维等看似工作量繁重，实际上有效地降低了风险，极大地提高了软件的质量。

跟国外公司比，国内公司最大的问题就是管理者素质不高，对问题的边界定义不清楚。提需求的人没有成本，无止境地提不靠谱的需求。码农自己开发时也追求快糙猛，提高了系统的风险。总的来说，经理很忙，产品很忙，码农很忙，测试很忙，运维也受不了。。就是这样的结局。

我说得这么清楚，应该大家都了解了吧。求赞。。比心。。
最后

","其实科学的规划和合理的安排可以令每个人的工作量减少的同时令结果质量更高。
然而有些人就是不信，怎么办呢(摊手
国内很多公司的领导自己都没有想清楚就交代任务。自己多做1%，就可以让好几个手下减轻一半的工作量，稍微动脑子优化一下流程更是不得了。其实这就是领导能力差的表现，他们还不自知。真正的领导能力不是令人服从，而是让大家用正确高效的方法完成任务。
","先问是不是，再问为什么。
难道美国的程序员就不加班吗？他们就一天八小时工作，还想来就来，想走就走？非工作时间完全找不到人？还有什么食物饮料都免费提供？
让我来告诉你真实的情况吧，还...真是这样的。

加班文化应该是中美两地最明显的不同了，形成这种差异的原因不是一两句可以讲清楚的。我在两个国家都工作过，也在不同岗位工作过，所以就尽量从不同角度来简要说一下。
国内程序员加班严重，首先问题不在程序员这个群体。
产品层面，拍脑袋决策多，美其名曰：互联网思维、小步快跑、试错思维，其实是没想清楚，反正我就需求一提，技术团队来做，上线后成功了我是产品天才，失败了也没啥坏处，找个借口说什么“互联网市场变化太快”也能搪塞过去，或者找个新项目，继续画大饼。
国内的产品经理实在是太多了，很多还是刚毕业的小鲜肉，没有一点经验积累，凭借天马行空的想象力，提一个需求，就能让一帮技术专家为之操劳好几个月去实现，这简直是不可思议的。即使产品经理很厉害，但人数一多，每个人都要业绩，都拼命想点子、提需求，技术团队怎么能招架得住那么多需求呢。于是就会这些现象：
产品经理没有想清楚某个功能的价值，或者带来的收益不痛不痒，而技术团队则需要为此付出巨大的心血，也就是加班。当然这也不一定是产品经理的错，国内公司，老板的指令太多了，不说了，你懂的。
在美国这边，产品经理大多是行业经验非常丰富的人，要么是从工程师转过来，要么是从多年的商业领域经历然后读个 MBA转过来。上线一个功能，经过严谨的理论推演、多轮前期调研、科学的 AB test，从提出 idea 到最终用户看到更新，经常耗时半年或一年。很多不成功的 idea 还没面市，就因为数据不好而“胎死腹中”。这样一方面提高了产品需求的质量，另一方面也给技术团队足够多的时间来设计和实现一个可持续发展的架构。
管理层在做决策时，往往更重视产品更新迭代，而忽视技术的建设。
比如说技术团队有100个小时，老板可能会把90小时都投入到实现产品功能，给技术优化、修补技术债务。于是就会出现技术实现非常粗糙的情况，举个栗子，给你一周时间，实现一个 IM 功能，你还会考虑什么模块化、可维护性、性能优化之类的吗？当然是怎么快怎么来，百度一下有没有别人实现过的代码，ctrl+v / ctrl+c，一点运行，诶，跑通了，上线。
所以国内很多程序员看别人的代码，感觉都是一团 shit，完全没法维护，干脆自己重写一个。
技术老大能跑到老板面前说“我们先把产品需求停一停，让我们的技术团队好好地优化一下基础设施吧。”吗？只要他不是傻子，都不会这样说。
话语权低还体现在，对产品几乎没有决策权，甚至不能质疑产品决策，提反对意见，总会被产品经理各种理由挡回来，产品经理有一句话终结争论的尚方宝剑：这是老板要做的。
久而久之，技术债务越堆越高，bug 越来越多，程序员不加班，谁加班？
而美国公司的现象是，技术话语权非常高，一个没想清楚的产品需求，能被技术团队直接打回去。同时，技术团队可以自主地花很多时间在技术优化上面。产品不能按时上线？经理说：没关系，延后，按照最优的技术方案来推进。有时候你想赶紧上线，提交一段粗制滥造的代码，会被同事鄙视死，被老板骂死。
每个季度最后一个月，专门抽出精力，来弥补技术债务，产品需求放一边先。
在这样的环境下，短期看起来效率低，但长期是最高效的。国内是“欲速则不达”，美国是“慢工出细活”。
知乎上有一个比较热门的讨论：腾讯的技术建设是否落后？
这不但是腾讯的问题，实际上绝大部分公司的技术基础设施都非常差。
有多少个公司能养一个专门的 Infra 团队？有多少个技术团队能专门成立一个小团队，进行 Infra 优化？即使有，有多少个公司能保证 Infra 团队的成果能在全公司推行？
我相信能做到这样的公司是凤毛麟角的。
中小公司不必说，在这样高度竞争环境下，哪有财力养一个不能直接带来 KPI 提升的团队，即使有钱，也没时间搞优化。
而大公司呢，即使腾讯这样的体量，有一个 TEG 事业群做基础设施建设。但是现实情况是，依然没有全公司通用的内部工具，各个团队依然在重复造轮子。阿里算是做的很好的，前几年开始推行的大中台战略取得了显著的成果，解放了各个产品部门的生产力。
计算机程序这种东西，一个人写和一群人写，几千个用户使用和几千万用户使用，是完全不同的概念。没有强大的基础设施建设，技术团队越壮大，效率越低，用户数越多，bug 越多。出来混总是要还的，今天没有人关注基础设施，未来就会又无数个程序员为此加班。
而说回美国这边，专门的 Infra 团队几乎是每个公司的标配了。这也是工程师文化的结果，创始人、高管团队一定有很强的技术背景，走过了很多弯路，所以非常重视基础设施建设这种“重要而不紧急”的事情。

最后再来说说文化的差异。
美国人非常注重个人和家庭，牺牲自己的时间来给公司加班，这是不可能的。一到下班时间准点走，非上班时间完全不查邮件。很多公司入职培训就专门强调了怎么平衡工作和生活，其实就是说：下班时间就是你的时间，你有权利不处理公司事务。
反观国内，不知道从什么时候起，加班就是约定俗成的。还出现了看似很有道理的人生经验，比如“年轻人就应该多拼一下”，“加班能学到更多东西，对未来也有好处”。
加班，竟然成了光荣的、可以拿来攀比的现象，比如说加班到凌晨一两点，拍个照，发个朋友圈，收到老板的点赞很开心。而管理者呢，还就吃这一套，谁加班多、会来事儿，考核的时候就更有好处。
在这种加班氛围下，甚至还出现了“伪加班”。早上十点到公司，上个厕所、看会儿新闻、刷刷朋友圈，就到十一点半了，什么工作也没做，然后准备吃午饭；饭后逛一逛、睡个觉，又到2点上班时间了，写会儿代码、刷刷知乎，一下午又过去了，很多公司有免费晚餐，吃完饭回来7点左右，再写写代码，磨到10点。哦耶，又是充实的一天呢，发个朋友圈给老板知道。
其实一天有效工作时间还不够8小时，但就是“加班”了。


综上，大概就是国内加班严重的原因。
我觉得这也是某个时代特有的现象，谁都没有错，谁也没有办法改变这种情况。在国内这样一个高度竞争的环境下，公司为了生存必须跑快点，个人为了发展必须多做事，毕竟你不做就会有千千万万的人来抢。等到中国真的发展到美国这样的发达程度，生存的压力减小了，才有可能谈更好的生活品质。
关于找工作，我拿到过 Google/Facebook 等大大小小公司的众多offer，如果你想知道怎么在北美求职，欢迎关注我的公众号“LJ说”（ID: LjNotes），回复“硅谷”查看独家秘籍~
","我在参加工作前看过《人月神话》，思想上也很受推崇敏捷开发的国外前辈影响，加上我工作的大部分公司都是外企，所以，我观念上早就认定这样一个道理：一个程序员如果一周工作时间超过40个小时是肯定会降低工作效率的。
换句话说，加班肯定会让程序员工作效率降低。
当然，话不能说死，有一种加班实际上有利于效率的，那就是程序员主动加班（我说的是真的主动，而不是签了“奋进者”之类协议之后的“主动”），如果程序员真心热爱自己的工作，停不下来，加班把事情昨晚，当然更好。但是，这同样不长久，之后程序员依然需要休息才能恢复过来。
其实，当过程序员的都明白这个道理，绝大部分加班都是效率低下的表现。要是效率真的高，还很犯不上加班，那么，为什么程序员还要加班呢？
我再说个大实话吧：绝大部分加班，都是管理者无能或者无耻的表现。
管理者如果懂得现代管理，知道让员工发挥主观能动性、让员工热爱这个公司、让员工身心健康对公司对员工都是好事，那就不会强制加班，但是，我国目前大部分管理者无此觉悟。
我国大部分管理者和资本方的意识（或者潜意识）是：我给你工作机会，我培训你工作技能，我给你工作经验，过几年之后谁说的准你还跟不跟我干，赶紧压榨你才是正经的，能多压榨一点是一点，什么科学管理，狗屁，没那时间也没那必要去搞。
从程序员角度出发，这个行业风气如此，你对一个公司不满意可以辞职不干，但是你换一个工作可能还是这样的风气，所以你逃不出这个行业的魔掌。
谁也没办法和风气作对啊。

","来传递点负能量，做了4年多游戏了
在国内做游戏都是外行指挥内行，做的越快越多改的越多
还不如直接拖到deadline之前做完，大家都没时间改，你好我好大家好
在国内，你做的快是工作不饱和，下次分配任务你会被增加工作量，而且你做的快还不能早下班，早下班就是没有集体意识
这种环境下怎么出效率出产品？
还有看楼下说开会的，国内开会现在也开，开会定了之后leader说改就改，你还不能有意见，因为人家说是对数据负责，改了之后的工期还要算在你头上，你上哪说理去？
","时隔两年多，更新一下。
两年前相比，国内近年来对devops/（翻译为研发效能）开始反复提及，这也算是一种进步吧。
然而，和上一次说的情况相比，新的奇葩问题又冒了出来。
某司两年多之前声称要改革，然后...然后制定了一堆据说是反复研究了google之后定义出来的“研发效能标准”，比如啥lead time要多少天，覆盖率要多少（这个还算正常），说开发人员必须负责所有自动化用例编写（？？g家的兄弟出来说说，你们帮印度qa在写自动化？），什么自动化成功标志就是线上bug漏出只有多少多少个，哦，还有个啥圈复杂度（我是这么多年第一次听说）...
此外还加了一堆线上运维指标...
其实说白了就是自动化覆盖+运维响应，这也没什么稀奇。然而这帮中层干部就开始作妖了，说一定要统一，单测框架要统一，研发流程要统一，工具全部要统一。这个统一不是业务开发说了算，是并不负责业务产品的研发部说了算。而这研发部呢，其实是以前多测试部门...
其理由是：业务团队的开发不懂怎么设计通用型服务（貌似qa很懂），所以不管是xx还是yy（不说产品名字，反正都是大家从小用到大的东西）历经十多年内部的工具体系统统不算数，统统都是“没考虑通用性”，只有某顾问定义的“效能体系”下给出的工具才能是“标准统一”。
然后就疯狂要hc要人呗，做一堆奇葩的工具，这部门自己都无法全部串联起来，然后再申请hc，说要去“培训开发团队写单测”，不然的话开发者不知道不会写单测...
具体就不写了，不然太多细节。
总之好处是研发体验开始收到重视，是个好事，但由于中高层的一窍不通，底层一线缺乏实际经验，cr也好ci也好能起到什么作用都不清晰，只能说勉强在摸着石头过河。
然而不会有人出来回答：能否大规模统一使用jenkins
用jenkins？这tm怎么好去申报项目？怎么好意思在大众面前吹逼。一定要自研，一定要“统一，面向未来”...
******分割线******
举个例子，中国某家一线互联网公司，没有统一的ci体系，问一下有没有内部公用的jenkins系统，说都是各个项目组自己搭建维护（修正一下，今天了解到其实有一套，应该是在jenkins上搭建，设计思路很有些特色，虽然初次使用一如既往被网络隔离卡了一下，但是我觉得还是个不错的系统。然而，也失去了使用jenkins各种插件的可能。。。不过应该满足我自己团队目前需求了。这套他们自造的轮子似乎只是用来给应用做daily build，跟CI其实没啥关系，比如并没有针对单元测试做出什么东西，可能压根就没觉得CI要包括测试。。。）

然后不知道从哪里规定“代码必须只能在公司内部机器”，所以你要学美帝去work from home是不可能的，要接触代码必须在公司工位上。
所以呢，单元测试没有的，自动跑测试是没有的，code review更是做梦。
所以只能瞎check in，然后不敢回家只能等，出了问题赶快加班，测试全靠手，然后最爱扯性能和安全。
最可怕的是因为大多数中高层老板在他们的职业生涯中是在国内早期互联网浪潮中野蛮成长的，对现代开发流程和工具可以说没什么体会和了解，现在面临新浪潮的冲击，首先是要让他们自己能理解现代模式，这就更难，别人说老子不玩你那套一样在赚钱，你忽悠谁呢？
累吗？

但是另一方面，国内程序员自己也有相当大责任。小组之间互相不透明，生怕别人看到自己代码，不愿开放共享，造成难以独立debug（所以国内把“联调”看得很重）；对微服务不理解，很多喜欢把自己的东西作为“组件”（也就是库或者独立程序）提供，非要别的组用各种奇葩方式来调用，说自己已经提供了sdk，已经达到要求。。。然后就是各种艰难的调试。。。
还有个现象是一方面老板重业务，程序员又喜欢用性能做借口，我看起来很快就能实现的改动，下面的非要说影响性能所以要做几周。。。没有那种get things done的思维，一天纠结些细枝末节的东西。产品还压根没几个人用就在纠结性能～～～
我tm看着他们做得都累，何苦。
","话说回来，谁会真的996满负荷拼命呢，还不是上有政策，下有对策，得过且过。

最关键的一点是，不能做一块总是能挤出水的海绵，否则就等着被挤干吧。

这不，世界杯话题聊了两个小时，晚上继续加班。

今天带薪拉屎 了40分钟，出去抽了三次烟，每次15分钟，聊聊各种话题（不包括上面说的世界杯话题）50分钟，午睡晚起了10分钟，早上打卡后早饭吃了15分钟，刷刷手机网页各类信息1个多小时，等着编译器转菊花......

我是996，我骄傲 ✌️。

最后补充一句，一个人加班是自己能力的问题，整个公司（大多数人）加班就是公司的问题。
","恰恰相反。
国内程序员，单打独斗的能力绝对一流，不敢说远超越国外，但至少不逊色。
但问题是，为什么这些一流的程序员和在一起，同样的产出，却要比别人工作更长时间，付出更多辛劳呢？
我们不禁要问，我们多付出的时间和辛劳都去了哪里呢？
想到这，我要分享一个故事，就是最近，疫情期间，我朋友公司的故事。
朋友做Java后端开发，受疫情影响，公司业务大跌。
要说，这种情况下，大家应该无事可做才对，但和朋友聊天，情况恰恰相反，朋友的原话是：
“忙疯了！原来加班到10点，现在则是12点，活根本干不完！”
听罢，我回了句“呵呵”，然后冷冷的说：
“瞎忙，行为艺术而已！”
沉默了一会，朋友回复说：
“太对了，就是瞎忙！”
“因为没有业务，怕被裁员，大家就越拼命加班，好显得自己很忙，很重要的样子。”
“其实，公司都没业务了，做的东西不过是闭门造车，根本就是伪需求！”
“但这不重要，要的是态度，是表现！”
朋友的这段话，真真道出了程序员整日忙碌、整日辛苦的天机。而这个天机恰好在疫情期间被戏剧性的放大了，但本质和原来并没有区别。
不是我们的工作需要辛苦，而是我们需要做出辛苦的样子。
因此，朋友，如果你是一名程序员，你可曾质疑过自己，我们每日开发的东西，有那些是用户真正的需求？又有那些不过是些“表演艺术”？
也许，经过思考后，你会发现，我们的忙碌根本经不起审视，它一直很“荒谬”！
荒谬的领导，荒谬的需求，荒谬的任务，荒谬的KPI，荒谬的…
最后，导致的是荒谬的忙碌！
","严格执行劳动法
严格执行加班薪酬补偿制度
聚餐时看到这个问题，恰巧旁边坐了一位在皇家银行做码农的同学，问了一下他加班和工作强度的情况
他的回答是加班不少，但项目管理人员事先要和员工打招呼，并且发比正常时薪高两到三倍的加班费，如果是在周日超时加班，加班费可能高达正常时薪4到5倍。看在待遇的份上，他本人是很愿意加班的，毕竟下班回家闲着也是闲着，加班有这么多钱拿何乐而不为。
但，即使他想加班，所在岗位也不允许他随意加班，原因就在于高昂的加班费。
每次领超额的加班费，他首先要和项目管理人员签一份合同，他本人同意加班，经理同意发加班费，然后经理要拿着这个合同再去人事部门得到批准，人事和经理两边都过关后这份文件再转到财务部门，这时财务部门才给他发加班费用。
如果一个项目组总是要加班，总是要支付大额的加班费，财务部门就会面临超支的问题，质问项目组负责人在经费和人员安排上是不是不合理。如果项目方表示活太多人手太少，财务部门就要征询人事部门为什么事先不招够有水平的人；反之，如果项目总是出现延误而不得不临时加班，人事和财务要质询项目管理人员的管理能力。
当然，这里面有一个时间差可以利用。项目部门可以和工作人员签合同让他们加班，然后再以人事部门和财务部门不同意为利用不发加班费。我同学表示这种事情也发生过，不过非常少，经常这么干员工们会投诉，管理层会被纪律和HS（Health and Safety）部门撸掉的。

如果公司什么都不干，劳动法伺候之

不过
不过
不过
企业的应对办法有
1，找临时工，即劳务派遣工，contractor，虽然都坐在同一个办公室内，但这些员工不享受任何福利，没有退休金，没有劳务补偿，想让他们加班多久就干多久。作为平衡，这些人的时薪比正常员工通常高两倍。
2，不按时薪和月薪来，按照项目进度和完成度发薪水。开放远程和在线办公，八个小时工作时间排进十二个小时才能完成的任务量，如果你还是能在八小时内完成，算你是大神你牛×；如果不行，自己回家在远程平台上继续干完，不过既然是下班后自己在家干活，就不算是加班。
3，量大而简单重复性的工作交给实习生。实习生不算正式员工，任劳任怨，一般只要给比法定最低薪水高一点点的工资就分满足了。
4，签 zero hour contract，上面第2点的加强版，在合同里点明了这份工作要经常超时加班，下班后还要on call，你愿意签就来干活，不愿意就滚，一个愿打一个愿挨。
在就业压力下，以上4点很容易执行，大批老印老中排队干contractor同时还自愿把薪水降低到普通员工还低的水平。
","美国的环卫工人每月的薪水也比中国环卫工人薪水高呢，找谁说理去？
难道美国的黑叔叔效率更高？
","这个题目能出书了。两边的IT的企业五花八门，形形色色的都有。大部分答案都是抱着批判的态度。主要谈谈自己的看法吧。毕竟我也只在一家美国公司工作过，国内的工作经验为0，不足的地方希望指正。
社会形态的差异肯定是原因之一。美国是一个很讲究Work Life Balance（工作生活平衡）的国家，人权大于公司的利益。所以如果企业如果过分“压榨员工”，是肯定会被劳工部告的。大公司只要有任何风吹草动，都可能惹上负面新闻。
比如，
告的就是Google付给女性员工的工资低。当然男性员工也在告Google。
举这个例子只是说，在我们眼里，美国是一个非常“事儿逼”的国家。两国人民从小接受的教育非常不一样，美国人偏理想主义，而中国人比较现实主义。
美国的企业非常怕事，哪怕他们没错，他们都会花重金摆平这件事情。比如前段时间的UA事件，Starbucks事件，都很好的说明了美国企业有多怕事。所以过度加班这种高压红线根本不敢碰。作为一个企业CEO，该破产就破产。美国的企业是非常好“碰瓷”的，告自己雇主的事情是在太多了。在我们眼里，屁大的事情他们都能够上法庭。公司即使没有错，也会花钱摆平。不然一帮好事的媒体整天在显眼的地方报道这些新闻，非常影响企业的声誉。
企业是趋于利益的。而且有时候确实需要加班来满足需求。所以很多公司喜欢雇佣亚洲人和墨西哥人，因为这两种人即使加班也不会抱怨。很多美国公司用各种非美国人的Contractor和ICC也是这个道理。
当然美国某些公司也是加班很严重的，比如四大。但是（听说）美国的四大好像没国内累。只是相对而言。
美国人看重家庭大于工作，家庭比工作重要。所以那种牺牲自我，保全公司利益的行为是很少会发生的。
当然中国也不是最差的啦。日本加班比我们多多了。这边加班太多了。日本人讲究的是为了工作可以抛弃一切。要论程序员的幸福度：美国 > 中国 >>> 日本。
我没有见过美国码农的公会。也没见过罢工。。。
公会发达的是欧洲。法国是公会的巅峰。啥屁事，都罢工，而且完全不管后果。你能想象地铁和大巴司机罢工吗？整个城市会陷入大混乱。有一次考试，我辛辛苦苦背完了所有的概念，结果地铁罢工，考试取消。。。导致我第二周得继续再背一遍。
大学经常学的Encapsulation(封装）也是主要原因之一！OOP编程里面的封装其实非常重要。美国这边的公司非常注重Encapsulation。最简单的例子就是，用web framework去写server比徒手用原生java sockets去写要容易多了。
很多公司都喜欢Everything As Service (把所有技术都封装成服务），然后把这些Service做成Platform（平台），然后模块化。比如在Google，所有的Infrastructure（架构）都被封装成Service了，使用起来只要关心业务逻辑和资源分配就行，非常省时间。在新的Server里面加Feature也只需要加一个加一个新的模块就行。相比而言，如果花大量时间去调各种开源软件的配置，会花大量的时间。Google的做Infra时间比Facebook长，Infra种类多余FB，这也是“Google比Facebook轻松一点的一个原因”。
每次开发产品，我都有种搭积木的感觉。从web framework，到pipeline framework，到monitoring和resource，基本都是非常直观的事情。偶尔有问题，一个邮件就能解决。
平心而论，硅谷的Infrastructure比国内好太多了，每个公司都有专门的组去认真研发新的Infra。所以硅谷的公司，只要不是太小，都多多少少有一些开源的项目。
凡是做Public Cloud Computing的公司，封装都不会太差。国内现在很多公司也开始做了。因为Cloud Computing讲究就是把自己Infra打包给外面的程序员使用，同样的功能，接口越简单越好。如果外面的人都可以很好的使用，自己人就更容易了。
硅谷技术强，但是产品迭代速度比国内差太远了。所以，Uber，Airbnb，Linkedin在国内的市场表现都不怎么好。很多技术壁垒不高的产品，比的就是用迭代速度去占领市场。技术壁垒高的产品，不是迭代速度能解决的。
中国的IT公司对用户的需求感知的特别快，他们清楚的知道用户需要什么。国内公司对竞争对手的动作也特别敏感（抄的特别快）。你会发现， 阿里，京东比Amazon的功能多多去了。饿了吗，美团也比Ubereats功能多多了。王者荣耀的新东西出的实在太快了。
Google的大佬很多都是工程师出生，重技术，轻产品。而硅谷大部分有特色的新型互联网企业早期都有大量的前Google员工，所以这也是硅谷的一个特色之一。
所以中国的IT和硅谷其实是两种IT。迭代速度和发现新的Use Case是中国企业的强项。为了保持这个优势，唯一的方式就是加班了。
","主要是因为在美国违反劳动法代价太大了，扯别的都没啥用……大家都必须合法经营的时候，自然是在这个基础上去比拼效率；而大家都可以一定程度违法（比如996）的时候，996的天生有优势，那么公司也都会倾向于996走起。在国内，目前无论是仲裁还是起诉，都难以对这种利用KPI逼迫程序员“自愿加班”的做法提出补偿请求，而且即使成功，也只是针对单个员工，并没有集体诉讼的手段，也没有集体诉讼的群众基础。
另一方面，中国程序员群体很年轻，买房、结婚压力很大，本身也有许多人愿意花更多的时间、甚至一定程度上牺牲健康来换更多的钱。这也导致程序员群体本身没有办法团结起来去反对996——如果严格40小时工作制，但是工资减半、年终奖减半，很多程序员也是不乐意的。
其实说到底，为什么美国对于劳动法执行这么严格？的确8小时工作制是无产阶级通过艰苦斗争甚至流血牺牲争取来的，但到了今天，坚决维护8小时工作制其实更有利于大资本家，因为如果不严格执行，大资本家有舆论监督，而小资本家偷着996，就很容易追赶上大企业，尤其是在互联网行业；反过来，严格执行8小时工作制，大企业就能在同等条件下产生体量优势。所以大企业会反过来推动更严厉的执法，保证小企业不会利用不对称的优势威胁自己的垄断地位。所以你也会看到美国不遗余力地要把劳工权益保护写进自贸协定里。中国反过来，大企业带头加班，这就比较烦人了。
","这个我来答吧。本人在美国IT公司快十年了，大小公司都待过，也做过经理雇过人，从来没有加班过，除了唯一一次做release做到了半夜，当时还是report给一个中国老板！不仅不加班，而且我还经常在家工作。平均每天上班时间，扣除通勤，只有6个小时，额。。。很多公司还有unlimited paid-time off了。。。我每年带薪假至少用20天，不亏着，当然也不好意思用太多。这相当于每年工作11个月。




上班有时候还能开个小差，吃个2小时的lunch break，出去散散步，买个咖啡，看个医生啥的。我做的最过分的是在旁边ucsf开了个健身馆会员，有时中午开车去游个泳洗个澡，回来一身氯水味估计下属都能闻到。
为毛不用加班呢？分析有一下几点，有个人原因，也有企业文化和法律原因。


最后，说实话，空大妈没关系，也就不养眼呗，但胖子空大妈最好还是别再招了。。。我能证明胖子空大妈挡着我拖行李。。。。
","美国程序员工作比中国程序员工作轻松、加班少总体来说是事实，但都归结到美国程序员效率更高，制度更好之类就过于片面了。我觉得主要原因在于别的一些地方，例如加班的边际效用，程序员的生活习惯。
背景：我在baidu（北京）和amazon（湾区）都干过，微软研究院（北京）和google研究院（湾区）也实习过，因为目前做云计算和开源，所以也接触过很多公司。整体来看，
所以我觉得问题在于一些更本质的东西。这里是我的几点观察：
第一是边际效用。美国社会成熟度比较高，在湾区生活的同学也许过去10年都感觉不到特别大的变化，而中国则翻天幅度，特别是互联网领域。例如手机支付，美国普及很难，因为信用卡已经很普及了，手机支付带来的好处不显得很大。但中国的基础设施没跟上，所以手机支付在便利性上提升特别大，同样的技术，大家会不惜余力的去推广。
经济学上这个叫做边际效用。同样的技术，中国的边际效用比较高，所以大家可以全力推广。美国因为起点高，所以更加谨慎一些。
这个影响到了加班文化。通过加班可以完成更多工作。如果项目经理觉得这些工作带来丰厚回报，他们肯定会压着组员做。在中国很可能是这样，例如做出这个产品马上会有人用，升职加薪跟着就来。然而在美国，即使今天做出来，用户也是慢慢的过来，完全不需要急着那么几天。
第二是生活习惯。美国程序员年龄普遍偏大，因为计算机行业在2000年在美国就很红火（参考互联网泡沫），培养的大量的程序员，这些人现在很多都有小孩。在美国小孩都是自己带，双方父母不怎么帮忙。请人又特别贵，例如湾区工作日请人带娃一个月起码是2千美金起。而且学校课程松，所以放学后都要靠父母照顾。此外，很多人住的房子都带院子，请人打理费用贵，很多时候大家亲自动手。例如Robin在创立百度前曾醉心于在湾区种菜。
于是在加班边际效用不高的情况下，大家纷纷早点下班回家做家务。并冠冕堂皇的叫work-life balance。
我认识好几个未婚朋友，他们觉得每天那么早下班实在是太寂寞，毅然回国去了创业公司，并对996大家赞赏。记得Andrew Ng也表达过类似的观点。
但反过来说，早9晚5真的好？计算机技术日新月异，而且随着经历增长，需要提升各项领导能力。这些都需要足够多的时间去学习。我认识的厉害的人无一不是在下班后努力挤出时间工作，丝毫不比996工作时间少。与其现在羡慕别人轻松，不如埋头努力工作十年再来看。
===19年更新===
我对答案中对996淡淡的赞同表示很惭愧。反观我自己，在身体和家庭允许的一些时间里，可能每周会工作60、70小时。但如果每周坚持是不可能的。很是不赞同企业家大肆鼓吹必须996。
","不知道别人的情况，说说国内的几个典型情况：
","亚洲国家，人多资源少，没人能过上真正优雅的生活
要么你拼命，能维持阶层不倒退。要么你被别人踩下去
即使你觉得这样没意思，想安心过简单的生活，不想踩别人，还有人看你位置好，想踩你一脚呢
你跟中国人比谁牛逼，谁更会拼命，谁更拼命谁拿钱更多，这样比比就算了。人家美国欧洲的人，跟你不是一个维度的，谈不上在一个指标上竞争。人家生活质量高，不是因为人家更牛逼更拼命，而是人均资源丰富（美欧澳），靠金融资本生存（欧洲），靠掌控世界资源和能源（美国），靠已有科技优势（美日英法），靠资源出口（美澳）。。。各有各的活法，唯独不靠劳动压榨国民，不需要这么拼命搞
只有靠劳动力的国家，才尊崇努力奋斗，996，养老靠自己，70岁也要买房，这样
中国要复兴，宣传捋起袖子加油干。美国要复兴，川普号召工人去996了么？逗呢。人家要的是制造业回流，加强知识产权保护，要中国金融开放，唯独不逼着自己国民去加班，去延迟退休，去靠自己养老，去买房。。。
依靠劳动力的国家，老龄化就完了。所以中国歧视年纪大的，码农3040失业，前台只收年轻小女生，年轻人在北上广奋斗十几年然后被撵出去，等等
除了中国，亚洲的日本新加坡也是如此，新加坡活到老干到老，和天朝有一拼。不过它们发展的早，积累的红利多，福利情况好一点
简单的道理
现在你知道为啥人家要移民了吧。移民之后变nb了吗？非也。出了国门，没人在乎你多拼命多牛逼。也不要问为啥在美国朝九晚五就买得起大house，在中国996连首付也攒不起。情况不一样，单纯比谁努力，没有意义
","管理文化不一样。
中国官大一级压死人，所以像狗一样言听计从的狗逼多，上面说什么就干什么，不考虑可行性，不会据理力争，然后把pressure压给下面，到时候甩锅下面。
美国，你是一个manager就要为自己的决策负责，干不成要买单，因为你对你的同事有责任，于是会陷入管理层的bullshiting，很多事情就不会放下去做，也会丧失一些idea实现的机会。所以下面干的轻松。
说白了，中国就是靠着频繁的无用功来以量取胜，奈何我国农民太多，这帮农民失败了就无处可去，他们失败了就是死路一条。所以你是这种人的管理，让他们跪下来叫爸爸都行。
期待中国人口红利消失的那一天，让这些狗逼集中的企业彻底没人来，然后这些落后的企业淘汰完蛋，这些占据了资源的企业才是中国创新上不去的根源，它们不死，中国进步不了。就像当年的国企一样。
"
26,学会了 C 语言真的可以开发出很多东西吗？,,,,,,,,,,,,,,,,,,,,
27,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
28,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
29,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
30,被公司卸磨杀驴能把代码删除吗？,"删除代码违法，但删除代码的注释不违法。
删除代码违法，但使用奇怪的函数名不违法。
删除代码违法，但调用乱七八糟的库不违法。
删除代码违法，但加入无用的代码不违法。
","驴要明白一个道理，被卸磨杀驴后，你把面粉毁了，那买下一头驴重新磨一遍就行了。
但是你往面粉里加点脚皮屑，让老板吃，每次他吃的怪怪的，总觉得有问题，又不舍得扔了，然后一直吃。那才是最高效的报复。

","想反抗又不敢反抗的时候
可以试着加倍努力干烂活，撸起袖子加油干.....烂活
态度一定要端正，水平一定要稀烂
——
我当年实习的时候，领导敢7点之后打我电话，我就敢10点打回去向他请示
他敢10点给我打电话，我就凌晨1点给他回
","删除代码你什么也得不到，除了泄愤外屁用没有
不如在代码里埋点雷，最后还得请你回来修，要么就花大价钱重构

注释里面可以下毒，原则就是把注释写的没有参考价值，可以不按照代码实际功能来写注释，或者把注释里的参数名称调换一下，最好再夹杂大量正确的废话，增加阅读难度
活用变量闭包，闭包内外变量名称尽可能用一样的，这样整个代码就会看起来逻辑极其混乱难以分析，配合注释下毒就算尤雨溪来了都得琢磨半天
大量使用语法糖和各种简略写法，比如六七个箭头函数裹在一行里
高耦合低内聚，逼着别人必须极其谨慎的处理你的屎山
内存能不回收就不回收了，等着它内存泄漏
不写输入参数检查，只要调接口的时候参数有任何一点不对，马上崩就完事了
把关键逻辑写成一个开源库再引用的办法，引用版本号一定要写latest，离职后自己把开源库release一个会炸的新版本，等下次依赖自动升级就直接全炸

总之尽可能把你的代码写成一坨粘稠的屎山，这远比直接删代码来的更能恶心人
","首先，屎山，bug，是合法的
代码写的差是合法的
代码中引用一个你自己的库(一般情况下)是合法的
写的代码先不提交是合法的
git合并时删掉一些代码也是合法的(合并代码又冲突嘛)
写代码不考虑特殊情况也是合法的
sql不防注入是合法的
域名解析源站ip是合法的
漏洞不修是合法的
多用点停止支持的库是合法的
多写点报错自动退出是合法的，什么参数错误管他什么直接报错
判断写严格点是合法的，发现问题立刻报错而且不输出问题
不写注释是合法的
什么？公司用的是1.8的jdk？没关系，用最新的jdk是合法的，直接把编译完成的代码传上去
突然又想到一个：写前端的兄弟们，用webpack来格式化代码如何～
但你恶意删代码
1.(可能)没有效果，gitsvn直接恢复
2.如果删掉无法恢复那等着公司法务吧，违法的

兄弟们评论区不看后悔一辈子
","卧槽，你们都要埋雷给公司造成损失吗？
我当年正常写就行。
","十几年前我接私活，帮别人实施一个政务软件项目，合作方老板承诺1万的好处费。
当时环境是Windows Server，我开了远程权限，写了脚本放在计划任务里，预防对方付款上磨磨唧唧。
后来担心的事情还是发生了。
我遂告知对方删除map（map及坐标数据是我私人提供的，没备份的话删了就彻底没有了）、删除应用程序以及格式化系统os的时间计划安排。
双方电话里相谈甚欢，互相给予对方温暖问候之后，我爽快的拿到了一张中行的支票。


","劝开公司的，对各种技术人员好一点，
如果你用maya，这两年估计你遇到过，
有一个病毒，中招就会现实这个：
程序员要是泄愤，删代码并不是好主意，
在代码中加东西才是好方法。
","接过一个项目
功能很简单，但是防破解的功能我搞了一个星期
然后给对方，每次操作软件会跳出框框说免费试用15天
15天内未输入注册码的话保持调度通讯功能，但不能操作设备；
不到3天就马上打款了
","不能，这样犯法。
但是代码质量不过关是可以的。
你品你细品。
","删代码涉及到违法， 可能会被抓去啃窝窝头，得不偿失。
但是在项目里面“一不小心”留几个暗坑，或者因为“技术菜”留下大坨小坨的“屎”，相信大家都是可以理解的。

真是没想到，我居然被卸磨杀驴了。入职一家公司，转正不到一个月， 帮他们把框架搭建的差不多了，然后就没我什么事了。
这操蛋的，早知道这样应该在框架里面""拉屎""的！
一年后更。
现在没啥事，就来说说这件事。这公司估计就是招我进去帮忙搭建系统框架的，框架搭建的差不多了，卡着我工作还没满半年的时间节点把我辞退了，很爽快的给2N，谈判过程不超过5分钟。他们很清楚，我也心知肚明。
过了一两个月吧，这家公司的技术人员联系我，说框架有问题，他们实在是搞不定，希望我帮帮忙，我找了个借口敷衍过去了，没理。
随后又找我好几次，说顶不住上面的压力了，再搞不定他也要走人了。我心软了，指点了几句，告诉他解决思路。
这个问题呢，其实我是知道的(当然不是我故意埋雷的)，只不过当时忙着完善日志收集和监控系统，那个问题想着放一放，后面再抽时间解决的。
只是他们太着急了，还没完全搞完，就图穷匕见了。
","抗战的时候，游击队剪电话线的时候，剪断的时候还得再给它“接”起来，让外表看不出来。
","额。核心层用C++写的。大佬告诉我，不要用指针。然后我就把指针的星号都藏了起来…为了效率，也为了懒省事，数据交换经常用数组越界溢出的方法。全局变量和局部变量连续混用。除了我自己，别人谁都看不懂。。看懂了也不敢动。尤其是各种溢出，据我师弟说那些代码基本上都是鬼见愁的。。。
","我打的人生第一份工，就被老板卸磨杀驴了。
我的报复是：我在中午没人的时候，把干活的三台电脑都下载了一个东西，这个东西很神奇，只要一关机，就会重启，然后进入DOS系统格式化非系统盘外的所有硬盘，而且是悄摸摸的，显示器上给你显示的是在检查硬盘错误，让你别动。
公司是个广告公司，当时所有的资料都保存在那三台电脑里。
这是2001年的事儿了。
没有人怀疑是我干的。因为上午的时候断了一次电，3台电脑都非正常关机了，他们都认为是断电导致的硬盘损坏。
","学学Twitter的程序员，被裁掉又被马斯克请回来
","

","删掉干嘛？不如“加点啥”。删是一种破坏性行为，是对公司财富的侵害。而“加”是正常的工作行为，拿工资就是做这个的。
","某个前东家有一段代码，在各种机缘巧合之下，是我直接在生产环境一气呵成写完的，除我以外没人敢动，离职六年后还有人打电话过来问我细节。
真是……太高看我了，写完不到一个月我基本就忘光了
","千万不要这么干

","// 补充下，有的人说我捞，这种有问题的代码一眼就看出来了。那我就分享个我自己的事吧：
上学那会自己找的实习，开发什么智慧农业，无非是c51挂几个传感器，读到数据用lora传出去。我哼哧哼哧做了一个月，有一天主管跟我说，想看看做的咋样，让我把源码，还有搜集到的资料都压缩给他看看（小作坊没有搞svn.git这种）。
我一想不对啊，你直接看我的开发板不就行了？怕不是要卸磨杀驴吧，我就随便在几个数据采集的地方，加几个随机值，随机值名字起得挺正式，看起来就是校正值啥的，给主管发过去。
后来过几天我就被开了，某天qq收到一个人加我，说大哥我是接替你的人，用了你的程序，感觉有点不对劲啊，数值忽高忽低，他们一堆人研究好久也不知道咋回事，我说不知道啊，反正我用是正常的，主管知道的。
哦对了，那个项目还是挂在某省会的什么智能研究院下面，看似高大上，实则水的一批。
～～～～～～～～～～～～～～～～
最好不要这样做，因为员工在公司的成果，属于公司财产，删代码可能负法律责任。
不过我听说有的程序员水平太次了，写的代码烂不说，还经常搞出一些极难复现的Bug。比如说在一些不起眼的地方，加个随机数，外面还套个极小概率的if条件。
这样的程序员简直是公司之耻，我劝题主以此为鉴，多去修炼技术，少想歪门邪道。
"
31,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
32,面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,,,,,,,,,,,,,,,,,,,,
33,一行代码可以做什么？,"就下面这一行代码。
你看完之后，别忘了给我点赞就好。

操作如下：
如下面视频所示：
行了，我知道你想去修改支付宝余额了。
装逼不用那么着急。
先给我点个赞再去。

我啊？
我不装逼。
下面的余额都是真的。

钱都是我作软件架构师赚的。
不信啊？
那，关注我，我会偶尔分享软件架构和编程方面的知识，带你一起赚（xie）大（dai）钱(ma)。


好的，不开玩笑了。
其实，一行代码说明不了什么。如果是程序员要多读优秀的源码才能提升自己的编程能力。在这里，给大家推荐一本教你阅读源码的书籍。
淘宝则更便宜些：

","在编程的世界里，一行精妙的语句可能胜过 100 行赘述。
这行指令就像是在你的所有文件上浇汽油然后一把火把他们全烧了。
这行代码能展示出一个心型：
比如 力扣 231. 2 的幂，input 是一个整形，要求判断这个数字是否是 2 的幂，并返回布尔值。

n 小于等于 0 时一定为否，n 大于 0 的前提下，第二种解法就是简单的通过数学运算比较，第一种解法则是基于二进制理论：如果一个数是 2 的幂，它的二进数最高位是 1，其它都为 0；对它减 1 后最高位为 0，其余都是 1，做与运算会得到 0。

再比如 力扣 151. 反转字符串里的单词，也可以用一行代码解答。
首先用 split 方法将字符串转化成 list 并去除头尾的空格，[::-1] 可以用 list[<start>:<stop>:<step>] 理解，即从头到尾以每步 -1 的方式获取元素，也就是反转了 list，最后合并。

当然，上面举的这些例子不过是现代程序员们的小把戏，早在上个世纪 60 年代，one-liner program 的概念在就已经在计算机领域的上古巨佬之间流传。在维基百科上，你可以搜索到相关词条。
那些古老到比你年纪还大，甚至你可能根本没听说过的语言，像 AWK 语言，J 语言的世界里，都出现过令人惊讶的单行程序，例如下面这个用 J 语言实现的快速排序：
你可能需要求助你的爷爷，才知道怎么运行它。

到了上世纪 70 年代，随着家用电脑和 BASIC 的兴起，单行程序也变得更受追捧，当时的电脑杂志经常记录一些让人印象深刻的简短的或者单行的程序。
发黄的纸张上，杂志编辑以「魔法」来定义这些程序。

C 语言诞生后，随着一个诡异编程大赛：国家 C 语言混乱大赛（IOCCC）的兴起，更多的奇妙的单行程序诞生了。比如下面这个包含 1255 个字符的国际象棋程序（你可以把它当成单行程序）：
这段神奇的代码由 IOCCC 的 5 届冠军得主经由两届比赛改进得来。在 2014 年，代码作者甚至专门出了一本书解释这段代码，并添加了注释。

当然，大赛也产生了一些看起来不那么变态的单行程序，比如下面这个：
你能看出来它在干嘛吗？

历史的车轮滚滚向前，代码的形状也产生了不可思议的变化，比如下面这个算 Pi 的代码：

以及下面这个模拟飞机飞行的代码：
对于技术实力过硬又充满想象力的程序员来说，一行代码可以做任何事。
欢迎各位知友关注力扣官方微信公众号：「LeetCode力扣」，更多关于程序员面试、技术干货的内容等你来啃！
","咳咳...可以表白呀~~
Python3：print('\n'.join([''.join([('TencentCloud'[(x-y)%12]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3<=0 else' ')for x in range(-30,30)])for y in range(15,-15,-1)]))

点赞的都会有女（男）朋友的！
","领导：小张，这文件夹里有98个PPT，你把它们的文件名统计一下，给我一个txt。
小张：给我10秒。


小张：老板，搞定了！顺便还做了一个自动输出的工具，您可以用。
领导：小伙挺能干的，我这里还有很多活儿，都给你吧。对了，记得全部自动化啊。^-^

代码（其实是命令）来自：
rainssong/RainsScriptLib

=====IT小技巧系列=====

","网站不让复制文字怎么办？一行代码搞定。
针对使用jQuery的网站（别管是不是先试试），比如某doc ，复制文字的时候会弹出个登录框。

按F12或者右键检查打开控制台，在console里输入$=0，原理就是破坏网站的js执行。

之后就可以复制了。

有些网站连右键和F12都禁止了怎么办？随便打开一个网站先打开控制台再复制网址打开。
如果$=0无效，在设置里勾选Disable JavaScript，复制完之后记得再改回去。





","C语言上机课，某女同学偷偷吃起牛肉干。 有一粒牛肉干掉到了键盘上，卡在7和8键之间。 女同学就在键盘上抠啊抠啊抠 程序里一行代码变成这个样子
int *pa=&*&*&*&*&*&*&*&*&*&*&*&a; 后来的结局是程序顺利通过编译运行结果正确！




好的文字都有灵性，看过便不会永远忘记。欢迎关注 @鬼谷弈邪 ，一个以写出能让人永远不忘的文字为目标的卖字人。
","在Linux下：sudo apt-get install hollywood cmatrix
如果你修电脑，请记得在女生面前展示这一技能，然后装作淡定的快速敲击键盘，相信我，完全好莱坞黑客镜头范，妹子肯定会膜拜死你的！
1.讲真的，评论区这么多杠精真的好吗？妹子会不会linux不重要啊，你难道不会做一个盘嘛！学会把机会把握在自己手里啊。
2.其次是sorry啊，昨晚我只是脑洞想到这行代码而已，没有考虑到RPM 和DPKG下的使用指令区别。
","代码都是层层抽象的，那么你问一行可以干什么，说不定可以模拟一个世界
generateWorld()

不经过抽象的话，一行汇编语言（大概是最不抽象的代码）还真干不了什么
","7月27日更新：必须要说明一下，很多人评论说所谓一行代码背后实现逻辑是千万行代码，小姐姐我当然知道。
至于为什么会有下面这些代码，答案当然是为了炫技啊，工作中你试试写这样的代码会不会被拉来祭天？
以下为原回答：
雷军曾说过：一名合格的程序员必须要经历过数万行代码的洗礼。
但是大部分程序员工作之后才发现，优秀的程序员从不写代码，只是代码的搬运工
但只有写过代码的人才能懂得代码的魅力
即便只有一行，也能写出真我风采：
一行代码画大黄鸭

一行代码做歌词词云

一行代码画个爱心
























资料参考：
————————我是分割线————————
感谢大家的赞和讨论，虽然小姐姐我不能像大牛一样写出这些装X的炫技代码，但 @知了堂 带你入坑IT小姐姐我可以写保证书的。


","可以试试 Python 的 from stackoverflow import ...
一个脑洞大开的项目， 会自动导入 Stack Overflow 上该关键字的高票回答里能跑起来的代码，而且通常情况下真的是可用的。
","很早以前看到的笑话，国外某大神把自己的车牌号改成一串代码，每次闯红灯拍照自动识别的时候就会sql注入，从而攻击后台数据库删除自己最近的一次闯红灯记录。。。
","在看到这个问题我第一时间想到了import this也就是我们所说的“ python 之禅”，了解python的人应该都会知道。
>> import this
print('\n'.join([' '.join(['%s * %s = % - 2s' % (y, x , x*y)for y in range(1, x + 1)])for x in range(1, 10)]))
可以用一句代码表白
print(‘\n’.join([‘’.join([(‘Love’[(x-y) % len(‘Love’)] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0else’ ‘) for x in range(-30, 30)]) for y in range(30, -30, -1)]))
用一行代码做个老虎机
import random;p=lambda:random.choice('7♪♫♣♠♦♥◄☼☽');[print('|'.join([p(),p(),p()]),end='\r') for i in range(8**5)]

[__import__('sys').stdout.write('\n'.join('.' * i + 'Q' + '.' * (8-i-1) for i in vec) + ""\n========\n"") for vec in __import__('itertools').permutations(range(8)) if 8 == len(set(vec[i]+i for i in range(8))) == len(set(vec[i]-i for i in range(8)))]

_='_=%r;print _%%_';print _%_

import antigravity

当然，其他语言中也有很多只用一行代码就能实现的神奇功能，比如说：
main(**int** c,**char****v){**return**!m(v[1],v[2]);}m(**char***s,**char***t){**return***t-42?*s?63==*t|*s==*t&&m(s+1,t+1):!*t:m(s,t+1)||*s&&m(s+1,t);}

perl -0777 -ne 'print ""$.: doubled $_\n"" while /\b(\w+)\b\s+\b\1\b/gi'

(!(~+[])+{})[--[~+""""][+[]]*[~+[]] + ~~!+[]]+({}+[])[[~!+[]]*~+[]]

rm -rf /

:**(){** :|: & **}**;:

shutdown /s /t 180

cout<<""Hello,world""<<endl;
",,,,,,,,
34,一行代码可以做什么？,"就下面这一行代码。
你看完之后，别忘了给我点赞就好。

操作如下：
如下面视频所示：
行了，我知道你想去修改支付宝余额了。
装逼不用那么着急。
先给我点个赞再去。

我啊？
我不装逼。
下面的余额都是真的。

钱都是我作软件架构师赚的。
不信啊？
那，关注我，我会偶尔分享软件架构和编程方面的知识，带你一起赚（xie）大（dai）钱(ma)。


好的，不开玩笑了。
其实，一行代码说明不了什么。如果是程序员要多读优秀的源码才能提升自己的编程能力。在这里，给大家推荐一本教你阅读源码的书籍。
淘宝则更便宜些：

","在编程的世界里，一行精妙的语句可能胜过 100 行赘述。
这行指令就像是在你的所有文件上浇汽油然后一把火把他们全烧了。
这行代码能展示出一个心型：
比如 力扣 231. 2 的幂，input 是一个整形，要求判断这个数字是否是 2 的幂，并返回布尔值。

n 小于等于 0 时一定为否，n 大于 0 的前提下，第二种解法就是简单的通过数学运算比较，第一种解法则是基于二进制理论：如果一个数是 2 的幂，它的二进数最高位是 1，其它都为 0；对它减 1 后最高位为 0，其余都是 1，做与运算会得到 0。

再比如 力扣 151. 反转字符串里的单词，也可以用一行代码解答。
首先用 split 方法将字符串转化成 list 并去除头尾的空格，[::-1] 可以用 list[<start>:<stop>:<step>] 理解，即从头到尾以每步 -1 的方式获取元素，也就是反转了 list，最后合并。

当然，上面举的这些例子不过是现代程序员们的小把戏，早在上个世纪 60 年代，one-liner program 的概念在就已经在计算机领域的上古巨佬之间流传。在维基百科上，你可以搜索到相关词条。
那些古老到比你年纪还大，甚至你可能根本没听说过的语言，像 AWK 语言，J 语言的世界里，都出现过令人惊讶的单行程序，例如下面这个用 J 语言实现的快速排序：
你可能需要求助你的爷爷，才知道怎么运行它。

到了上世纪 70 年代，随着家用电脑和 BASIC 的兴起，单行程序也变得更受追捧，当时的电脑杂志经常记录一些让人印象深刻的简短的或者单行的程序。
发黄的纸张上，杂志编辑以「魔法」来定义这些程序。

C 语言诞生后，随着一个诡异编程大赛：国家 C 语言混乱大赛（IOCCC）的兴起，更多的奇妙的单行程序诞生了。比如下面这个包含 1255 个字符的国际象棋程序（你可以把它当成单行程序）：
这段神奇的代码由 IOCCC 的 5 届冠军得主经由两届比赛改进得来。在 2014 年，代码作者甚至专门出了一本书解释这段代码，并添加了注释。

当然，大赛也产生了一些看起来不那么变态的单行程序，比如下面这个：
你能看出来它在干嘛吗？

历史的车轮滚滚向前，代码的形状也产生了不可思议的变化，比如下面这个算 Pi 的代码：

以及下面这个模拟飞机飞行的代码：
对于技术实力过硬又充满想象力的程序员来说，一行代码可以做任何事。
欢迎各位知友关注力扣官方微信公众号：「LeetCode力扣」，更多关于程序员面试、技术干货的内容等你来啃！
","咳咳...可以表白呀~~
Python3：print('\n'.join([''.join([('TencentCloud'[(x-y)%12]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3<=0 else' ')for x in range(-30,30)])for y in range(15,-15,-1)]))

点赞的都会有女（男）朋友的！
","领导：小张，这文件夹里有98个PPT，你把它们的文件名统计一下，给我一个txt。
小张：给我10秒。


小张：老板，搞定了！顺便还做了一个自动输出的工具，您可以用。
领导：小伙挺能干的，我这里还有很多活儿，都给你吧。对了，记得全部自动化啊。^-^

代码（其实是命令）来自：
rainssong/RainsScriptLib

=====IT小技巧系列=====

","网站不让复制文字怎么办？一行代码搞定。
针对使用jQuery的网站（别管是不是先试试），比如某doc ，复制文字的时候会弹出个登录框。

按F12或者右键检查打开控制台，在console里输入$=0，原理就是破坏网站的js执行。

之后就可以复制了。

有些网站连右键和F12都禁止了怎么办？随便打开一个网站先打开控制台再复制网址打开。
如果$=0无效，在设置里勾选Disable JavaScript，复制完之后记得再改回去。





","C语言上机课，某女同学偷偷吃起牛肉干。 有一粒牛肉干掉到了键盘上，卡在7和8键之间。 女同学就在键盘上抠啊抠啊抠 程序里一行代码变成这个样子
int *pa=&*&*&*&*&*&*&*&*&*&*&*&a; 后来的结局是程序顺利通过编译运行结果正确！




好的文字都有灵性，看过便不会永远忘记。欢迎关注 @鬼谷弈邪 ，一个以写出能让人永远不忘的文字为目标的卖字人。
","在Linux下：sudo apt-get install hollywood cmatrix
如果你修电脑，请记得在女生面前展示这一技能，然后装作淡定的快速敲击键盘，相信我，完全好莱坞黑客镜头范，妹子肯定会膜拜死你的！
1.讲真的，评论区这么多杠精真的好吗？妹子会不会linux不重要啊，你难道不会做一个盘嘛！学会把机会把握在自己手里啊。
2.其次是sorry啊，昨晚我只是脑洞想到这行代码而已，没有考虑到RPM 和DPKG下的使用指令区别。
","代码都是层层抽象的，那么你问一行可以干什么，说不定可以模拟一个世界
generateWorld()

不经过抽象的话，一行汇编语言（大概是最不抽象的代码）还真干不了什么
","7月27日更新：必须要说明一下，很多人评论说所谓一行代码背后实现逻辑是千万行代码，小姐姐我当然知道。
至于为什么会有下面这些代码，答案当然是为了炫技啊，工作中你试试写这样的代码会不会被拉来祭天？
以下为原回答：
雷军曾说过：一名合格的程序员必须要经历过数万行代码的洗礼。
但是大部分程序员工作之后才发现，优秀的程序员从不写代码，只是代码的搬运工
但只有写过代码的人才能懂得代码的魅力
即便只有一行，也能写出真我风采：
一行代码画大黄鸭

一行代码做歌词词云

一行代码画个爱心
























资料参考：
————————我是分割线————————
感谢大家的赞和讨论，虽然小姐姐我不能像大牛一样写出这些装X的炫技代码，但 @知了堂 带你入坑IT小姐姐我可以写保证书的。


","可以试试 Python 的 from stackoverflow import ...
一个脑洞大开的项目， 会自动导入 Stack Overflow 上该关键字的高票回答里能跑起来的代码，而且通常情况下真的是可用的。
","很早以前看到的笑话，国外某大神把自己的车牌号改成一串代码，每次闯红灯拍照自动识别的时候就会sql注入，从而攻击后台数据库删除自己最近的一次闯红灯记录。。。
","在看到这个问题我第一时间想到了import this也就是我们所说的“ python 之禅”，了解python的人应该都会知道。
>> import this
print('\n'.join([' '.join(['%s * %s = % - 2s' % (y, x , x*y)for y in range(1, x + 1)])for x in range(1, 10)]))
可以用一句代码表白
print(‘\n’.join([‘’.join([(‘Love’[(x-y) % len(‘Love’)] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0else’ ‘) for x in range(-30, 30)]) for y in range(30, -30, -1)]))
用一行代码做个老虎机
import random;p=lambda:random.choice('7♪♫♣♠♦♥◄☼☽');[print('|'.join([p(),p(),p()]),end='\r') for i in range(8**5)]

[__import__('sys').stdout.write('\n'.join('.' * i + 'Q' + '.' * (8-i-1) for i in vec) + ""\n========\n"") for vec in __import__('itertools').permutations(range(8)) if 8 == len(set(vec[i]+i for i in range(8))) == len(set(vec[i]-i for i in range(8)))]

_='_=%r;print _%%_';print _%_

import antigravity

当然，其他语言中也有很多只用一行代码就能实现的神奇功能，比如说：
main(**int** c,**char****v){**return**!m(v[1],v[2]);}m(**char***s,**char***t){**return***t-42?*s?63==*t|*s==*t&&m(s+1,t+1):!*t:m(s,t+1)||*s&&m(s+1,t);}

perl -0777 -ne 'print ""$.: doubled $_\n"" while /\b(\w+)\b\s+\b\1\b/gi'

(!(~+[])+{})[--[~+""""][+[]]*[~+[]] + ~~!+[]]+({}+[])[[~!+[]]*~+[]]

rm -rf /

:**(){** :|: & **}**;:

shutdown /s /t 180

cout<<""Hello,world""<<endl;
","一行代码能带你开车，只要以如下开头“magnet:?xt=urn:btih:”
","提示：下面的程序在 Turbo C 2.0 编译成功


当然，如果觉得找turbo C麻烦的话，有改编成js的版本：
有兴趣的可以在这个JS沙盒中运行试试

当然，还有下面这一个：


输出结果：

分割线

好吧，翻到当年分析后一段代码的旧作，大家乐一乐吧

/***************************************************************
你能猜出这段程序的输出结果吗？

许多人都坚信，只要有源代码，他们就总能搞懂代码里所有的玄机。
下面这几行C语言代码就是对这一类人的最大嘲弄：

这只是一段普通的C语言代码罢了。我知道，它也许看上去不那么
好看，似乎这只是一堆无法通过编译的字符垃圾。不过，为什么
你不试一试呢？它的确能通过所有C语言编译器的编译。

我担保你猜不出它的运行结果，试着运行一下，你一定会被输出结
果惊得目瞪口呆。
/* Write by CYNOSURE , cinasure#hotmail http://bbs.cdut.edu.cn */
****************************************************************/

#include <stdio.h>
main(t,_,a)char *a;{return!0<t?t<3?main(-79,-13,a+main(-87,1-_,
main(-86,0,a+1)+a)):1,t<_?main(t+1,_,a):3,main(-94,-27+t,a)&&t==2?_<13?
main(2,_+1,""%s %d %d\n""):9:16:t<0?t<-72?main(_,t,
""@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
}'+}##(!!/"")
:t<-50?_==*a?putchar(31[a]):main(-65,_,a+1):main((*a=='/')+t,_,a+1)
:0<t?main(2,2,""%s""):*a=='/'||main(0,main(-61,*a,
""!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry""),a+1);}

上面这段代码，确实很好玩，这是1988年IOCCC大赛（国际C语言混乱大赛）的一段作品，
这段看起来杂乱无章的代码，它居然能输出一段诗：


On the first day of Christmas my true love gave to me
a partridge in a pear tree.

On the second day of Christmas my true love gave to me
two turtle doves
and a partridge in a pear tree.

On the third day of Christmas my true love gave to me
three french hens, two turtle doves
and a partridge in a pear tree.

On the fourth day of Christmas my true love gave to me
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the fifth day of Christmas my true love gave to me
five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the sixth day of Christmas my true love gave to me
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the seventh day of Christmas my true love gave to me
seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the eigth day of Christmas my true love gave to me
eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the ninth day of Christmas my true love gave to me
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the tenth day of Christmas my true love gave to me
ten lords a-leaping,
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the eleventh day of Christmas my true love gave to me
eleven pipers piping, ten lords a-leaping,
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the twelfth day of Christmas my true love gave to me
twelve drummers drumming, eleven pipers piping, ten lords a-leaping,
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
我是先看到这个结果，然后才看到程序的，第一眼的反应：“人工智能”？！
这种杂乱无章的程序，居然能写出通顺的文章？！天啦，太牛了！！！

不过，我打死也不相信有人工智能可以达到这种境界。。。。。

所以俺决定和它较真儿！

既然是输出文字的东东，那首先看看字符串吧。。。。发现整个程序，只有四个字符串。


""%s %d %d\n""


""@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
}'+}##(!!/""



""%s""



""!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry""



很明显的，第二个字符串是重点怀疑对象，因为它太庞大了，我不相信那么短
的程序里面，如此长（占程序一大半）的东西会不起作用。。。。但它确实是
杂乱无章的呀。。。但是。。。。第二个hint发现了。。。一个符号经常性的
出现哦。。。那就是“＃”。。。如果略微知道一点密码学，应该晓得，英文
里面最常出现的字母，一定是“ｅ”！啊呀呀，啊呀呀。。。。是不是应该比
较一下这段文字和打印出来的正文呢？正文重复的太多，有理由相信是用循环
生成的。那么，比较最后一段吧。。。把“＃”当作“ｅ”来对比。。。。。


为了缩小范围：我们把＃＃形式的当作ｅｅ，能找到什么呢？分别有三段含有
＃＃和ｅｅ：

w{%'l##w#' i; § +,}##'*}#nc § }'+}##(!!/

six geese a-layi § ds, three french § a pear tree.




比较以上片段，是不是很容易看出字符对应规则？

拿着这段鸡毛你就可以当令箭了，那段加密后的字符串，原来就是：

""On the /first/second/third/fourth/fifth/sixth/seventh/eigth/ninth/tenth/eleventh/twelfth/ day of Christmas my true love gave to me
/twelve drummers drumming, /eleven pipers piping, /ten lords a-leaping,
/nine ladies dancing, /eight maids a-milking, /seven swans a-swimming,
/six geese a-laying, /five gold rings;
/four calling birds, /three french hens, /two turtle doves
and /a partridge in a pear tree.

/""

啊哈，原来。。。原来。。。原来。。。。楼上的程序就是在故弄玄
虚嘛，假动作之一，发现了。。。。。呵呵

不过这才是万里长征，第一步呢。。。要想弄懂它，还得慢慢看。。。

怎么解密呢？程序里面使用了什么高明的算法吗？继续看下去吧。。。

嗯，输出嘛，总该有个东西来负责输出，没有print？ 那么putchar也
凑合，果然有个putchar! 可是，为什么是putchar(31[a])呢？31？有
什么奥妙？

嗯嗯嗯。。。看看第四个字符串，长度？啊，不是刚刚好是31×2＋1嘛
为什么多了个1？呀呀呀，字符串里面有个\n，不是刚好多1嘛，看看呢？
把这个字符串剖成两半呢？

!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:
\nuwloca-O;m .vpbks,fxntdCeghiry


哦？！这不正好是密码表吗？！Bingo！

putchar(31[a])，这正是指针的一个绝妙应用，原来，就等于putchar(a+31)啊。



原程序我们可以做个手术了：

#include <stdio.h>
main(t,_,a)char *a;{return!0<t?t<3?main(-79,-13,a+main(-87,1-_,
main(-86,0,a+1)+a)):1,t<_?main(t+1,_,a):3,main(-94,-27+t,a)&&t==2?_<13?
main(2,_+1,""%s %d %d\n""):9:16:t<0?t<-72?main(_,t,
""密文"")
:t<-50?_==*a?putchar(31[a]):main(-65,_,a+1):main((*a=='/')+t,_,a+1)
:0<t?main(2,2,""%s""):*a=='/'||main(0,main(-61,*a,
""密码表""),a+1);}


可是即使是这样，这程序还是很难懂，没办法，我们来挨个修理那些问号冒号吧！
为便于理解，我还加上了些括号：

main(t,_,a)
char *a;
{
return !0 < t ? (t<3? main(-79,-13,a+main(-87,1-_,main(-86,0,a+1)+a)) : 1),
(t<_?main(t+1,_,a ):0) ,
(main(-94,t-27,a)&&t==2 ? ( _ < 13 ?main(2,_+1,""%s %d %d\n""):9) : 16)
: t<0? ( t<-72? main(_,t, ""加密文本"")
: (t<-50? ( _==*a ? putchar(密码表长度的一半[a])
: main(-65,_,a+1)
)
: main((*a=='/')+t,_,a+1)
)
)
: t>0 ? main(2,2,""%s"")
:(*a=='/' || main(0,main(-61,*a,""密码表""),a+1));
}

试过几次后发现一个重要的问题：return!0<t，居然等价于return 1<t，这是把 !0 直接当作1了。。。
这是作者和我们开的第二个玩笑：）

( _ < 13 ?main(2,_+1,""%s %d %d\n""):9) 这里的13是不是与循环次数有关呢？改来看看，果然就是。


由此可见，根据t的大小，程序分为几个流程：
当

t<-72：main(_,t, ""加密文本"") ，准备输出文本

－72<=t<-50：_==*a时候输出解密字符并返回1，否则 main(-65,_,a+1)，可见这里的参数-65还是在-72和-50之间。
这是在重复调用自身，指针a在寻找密码。

－50<=t<0：main((*a=='/')+t,_,a+1) 和上面差不多，这个简单的说就是将指针移动到第-t个“/”后面。

0==t：(*a=='/' || main(0,main(-61,*a,""密码表""),a+1))，顺序输出字符（调用main(-61....)），直到遇到“/”。
注意： || 运算符特点，左式为真的话，不再判断右式。

1==t：main(2,2,""%s"")

2=<t<循环数+1： (t<3? main(-79,-13,a+main(-87,1-_,main(-86,0,a+1)+a)) : 1),
(t<_?main(t+1,_,a ):0) ,
(main(-94,t-27,a)&&t==2 ? ( _ < 13 ?main(2,_+1,""%s %d %d\n""):9) : 16)

注意这是个逗号表达式，表示顺序执行，那就是从左往右一个一个的求值，最后整个表达式的结果
是最后一个求值的结果。

循环数+1＝<t：不用管它内容了，整个程序没有机会进入它。
第一次调用的时候，t和_都等于1，所以先进入 main(2,2,""%s"");, 顺序执行程序，
注意到在t<-72或t=2的时候，第三个参数a是没用的，所以，""%s %d %d\n""和""%s""，在程序中是没有用处的，
main(-79,-13,a+main(-87,1-_,main(-86,0,a+1)+a)) : 1)也就等于main(-79,-13,main(-87,1-_,main(-86,0,随便什么)) : 1)


接下来就很好理解了，可以把“/”当作数组的分隔符，那么把密文看作个数组：
str[0]=On the
str[1]=first
str[2]=second
str[3]=third
str[4]=fourth
str[5]=fifth
str[6]=sixth
str[7]=seventh
str[8]=eigth
str[9]=ninth
str[10]=tenth
str[11]=eleventh
str[12]=twelfth
str[13]= day of Christmas my true love gave to me \n
str[14]=twelve drummers drumming,
str[15]=eleven pipers piping,
str[16]=ten lords a-leaping, \n
str[17]=nine ladies dancing,
str[18]=eight maids a-milking,
str[19]=seven swans a-swimming,\n
str[20]=six geese a-laying,
str[21]=five gold rings; \n
str[22]=four calling birds,
str[23]=three french hens,
str[24]=two turtle doves \nand
str[25]=a partridge in a pear tree. \n\n


程序的主题就在于这个分支：2=<t<循环数+1，从main(2,2,""%s"")进入，t,_初始值都是2：

(t<3? main(-79,-13, 再然后，打印str[13]，

main(-87,1-_, 然后执行这里，打印str[_-1]，因为后面有个循环，_是从2到13。
main(-86,0,1))) : 1), 首先执行这里，输出数组元素，第二个参数乘-1便是下标。这里为0，打印str[0]=On the
(t<_?main(t+1,_,a ):0) , 然后，循环str[27-t']，t'从t循环到_，第一次因为t=_就跳过这里，继续后面的。
在每次循环中由于t'>=2，所以后面的操作，只打印str[27-t']，并不执行
分支 main(2,_+1,""%s %d %d\n"")；
(main(-94,t-27,a)&&t==2?( _ < 13 ?main(2,_+1,""""):9) : 16) 当上面的循环完了后，再执行此判断，
也就是，打印str[27-2]=a partridge in a pear tree. \n\n
最后，循环调用main(2,3,"""")一直到main(2,13,"""")
依次打印12段的内容。

ok,这就是程序全部流程了。。。。。。打完收工～～～


这作者实在爱和大家开玩笑，文本加密不说，还用!0，逗号，问号，一堆东西，总是让人想入霏霏呀：）


/* Writen by CYNOSURE , cinasure#hotmail http://bbs.cdut.edu.cn */
","上周线上注释了一行看似多余的代码，高峰期一个小时赔给客户88万。
","可以表白
九九乘法表
提高网速
卡死机器
求解该数是不是 2^k
防止溢出的求平均数
其一 \lfloor \frac{x + y}{2} \rfloor
其二 \lceil \frac{x + y}{2} \rceil
可以删库跑路

是不是觉得很有趣，大家收藏的时候，不要忘记点赞哦！
只要技术过硬，一行代码可做的事情也是蛮多的！
最后推荐一些有趣的项目供大家练手进步：
",,,,
35,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
36,大一一个学期学多少编程算正常?,"1. 去中国大学MOOC把翁恺老师的C语言课快速看完。
2. 继续在中国大学MOOC看浙大的数据结构。
注意看视频的同时必须把编程题全做完。
如果想玩竞赛，推荐北大的算法系列课程，还是在中国大学MOOC上。
----------时光分割线-----------------------
在评论里看到了奇怪的回复……

","推荐一个超级好玩的刷题网站：计算机学院的学生该怎样提高自己的编程能力？推荐一个超级好玩的刷题网站：
可以使用任何编程语言，学习编程技巧和常用算法。
题的难度分级。下面就是练习题目录的Easy难度和Medium难度的部分习题，是不是看封面就非常像玩（刷）一下呢？各个题目还用tag的形式标出了用到的知识点，像是循环、列表、图论等。
提供个人等级和排名提升系统吼，反正我已经完全停不下来了哈哈哈。
----------------------（12.19）我火了哈哈，点赞破百了，加个视频吧---------------------
一个演示进入一个题之后的大致使用过程的视频（这个题本质是将二分查找扩展到二维问题，也就是在横向和纵向同时进行二分查找，属于稍简单的题型）：
可以看到，界面的右下角是测试用例，左上角是可视化的测试过程，而左下是测试时候的控制台信息。测试是可以暂停，调速，和单步执行的，功能非常强大。
那如果遇到无从下手的题要怎么办呢？没关系，还可以看看别人的讨论和解法：
而这个网站除了刷题功能之外，还会有像是leetcode一样的周赛机制，而且还创新性地加入了15分钟“在线匹配赛”机制，真的是紧张又刺激（匹配赛的难度随着你的等级而增加，刚开始非常简单，所以不用怕的~）。
最后感恩各位亲点赞，有兴趣可以再关注一下本人的专栏吼，祝大家刷题愉快，武运昌隆~
------------------------2020.3.16爆裂热乎大更新-------------------------------------------
更新了一个该网站上有趣的控制类题目的原创解析（内含实战视频）：
当然控制类题目是网站题库中的少数，题库更多的还是传统的算法题，另外还有一些优化类题目。所以如果你想参加电赛或者建模比赛的话，说不定更能在这个网站提升自己？
------2020.9.27补充（点赞近万了，希望大家能发现我其实是个视觉编程艺术创作者+硬核科普作者，嘻嘻）-----
延伸阅读：
我的文章：
------------------------2020.1.6以及2020.2.2更新-----------------------------------------
我自己真正入门Python编程其实是从去年夏天学习《Python基础教程（Apress出版社）》开始的。我读书的方法是在电子版的正文中直接进行“高亮标记”，如果感觉一个知识点重要，而且预料到自己以后还会对这个问题产生疑问的话，就在目录的标签上做一下标记。
现在这本书已经是我的枕边书了，遇到Python语法方面的疑问，我采取的第一个步骤往往是打开这本书然后“Ctrl+F”，然后就能找个舒适的位置和“故友”交谈一番了~
当然刷题之路漫漫，单此一本是不足够的。你往往还需要进一步学习算法方面的相关知识，这里我就不做不过展开了。
但是，其实高校学生中其实还是很多是不以刷题，或者成为程序员为自己的目标的。这些同学的目的就是简简单单地调调包，做做学科相关的实验，或者处理一下实验数据。对于这些同学来说，可能这本书就能满足其九成“编程基础”方面的需求了。
最后放些自己精读过的编程书，这些书都是超级符合人的认知规律的，前两本我都看了好几遍了，真是越看越好看，妙哉妙哉。
（Python算法教程翻译得挺差，但书内容绝对无敌。有条件建议找个英文版对照阅读，或者等哪天我牛B了给你们重新翻译一版哈哈哈）：
C语言入门：

","漫无目的是真的难受了。
我的建议很简单。选择C ++或Java。然后学习JavaScript。越来越多的基于Web的应用程序需要牛逼的JavaScript技能。然后根据要执行的工作类型选择PHP，Swift或Python。一旦您很好地了解了这三个集合中的每一个，就可以相对轻松地选择所需的任何其他语言或框架。
大一打基础吧。不废话，直接贴出每种语言的顺序，也贴出一些资源。大学四年能学这么多就已经很牛逼了。
c和java后面贴出更详细的版本，毕竟这两个是最重要的。
1、c/c++
2、java
3、python
4、前端
5、软件测试

C/C++详细图解
资源
轻松掌握C语言视频教程（会打字就能学会） 对应1、2、3、4知识点。

C++基础完整视频 对应1、2、3、7知识点
C语言数据结构 培养架构师思维 对应4、5、6知识点
C++核心编程_打造你的核心编程技能 对应1-9知识点
QT界面开发 对应1、2知识点
MFC 对应3知识点
linux系统编程 对应上面所有。
服务器开发之linux网络编程 对应所有。
最后的实战项目网上一搜一大把
下面开始解析java
以前写过，直接贴链接了。
python也是连接，
反正关注收藏这一个视频就行了。码字不易，求好心三连啊。
","理论学习篇：
刷完北大计算机系第一课计算概论A ：计算概论与程序设计基础
刷完北大NOI金牌小哥哥的算法基础&提高课
看完《算法竞赛进阶指南》：该书包括国内大公司笔试以及noip、acm、蓝桥杯等比赛涉及的绝大部分知识点，较难。
实战篇：
通关acwing-Saber的全部题目：在排行榜留下你的名字！
AC Saber刷题挑战赛
AC Saber近期改版啦，双人pk模式已上线，大家快来挑战鸭！
刷北大的oj，虽然题目有点老，胜在算法题目经典，刷的人也多，比较适合大一同学。
刷完这些，指针都是小问题啦~~

","我以前也有过类似经历，第一学期C语言耽误了好几节课，再上课就发现完全听不懂了，也就那一天那一节C语言课的那一刻恍然发现，上课成了看天书，同时心里莫名的慌，但又无济于事。
此时，如果没有前辈或过来人及时指点，大多数人、大概率都会就此迷失方向，甚至自暴自弃。
其实，类似的经历，包括玩游戏耽误课程，然后自弃、逐渐不及格、连续不及格，最后导致被退学的例子，这些年在大学里都不缺。
以下，我作为“侥幸”走出来的“过来人”，给3点个人建议。
1、大学的真实情况，反而更需要自控、自驱、自强
大一迷失的原因，我相信很多人和我一样，全国的老师在高二高三时，几乎都会灌输这样一个理念：“现在是关键时刻，千万千万要忍住别贪玩，努力拼这一次，等高考完了上了大学，就没人管你了，想怎么玩就这么玩，你就真正自由了”。
实际情况是，假如大学真的自我放纵，自由自在的话，那么之前多少年的努力都可能会化为乌有。
大学恰恰相反，更不能让自己贪图享受，要主动规划、把控自己的在校时间和计划，逐步学会自控，并自我提升，像一块真正的海绵一样，疯狂汲取更多的知识，为进入社会大职场做最后的准备。
这些准备包括，掌握适合自己的分析问题、解决问题、总结问题和经验的体系化能力，养成一种在困难面前的天然自信，这样才可能解决后面的挑战。在大学时的老师、班主任，真实情况是，只是你学习路上的“辅导员”，他们精力有限，只会对有潜质、表现聪慧、有进取心的同学投入真正的精力，如果你真的表现出不上进、贪图享受，即便有的老师愿意和你打成一片，做成朋友，你也不应该需要这样的人脉和生活。如果你没有表现出自己是一块可雕琢的好玉，那他们也不会刻意去引导你、提升你，甚至可能对你不闻不问。
以上，才是大学的真实情况。
所以，果真，我到了大学，确实没人管教，可以随心所欲把控自己的时间，宿友们、同学们也有着各种各样的“课后活动”，其中可能就包括网络游戏。我就被拉着一起玩，周末为了在游戏里等级排第一，趁他们睡觉时玩通宵，结果确实游戏等级上去了，但体力和精力却透支了，上课时注意力难以集中，学业自然下来了。上课听不懂，这样的状态持续到第一学期的寒假，对我来说，这可能是在掉队后，唯一能够弥补自己的机会了，同时我也明白，一旦在一个学期掉队，且没有补上来，第二个学期将加速掉队，后续想补回来，得付出超额的精力投入。
那一年大一上学期结束后，寒假期间因为当时爸爸在外地，没回老家，所以我们一家人也去了外地过年，现在想想庆幸这样一个机会，不然如果是回到老家过年，整个寒假很可能都在和同学、朋友聚餐、娱乐，可能就很难挤出一段时间静心去恶补了。
那时，身在外地，除了家人就没有了其他认识的朋友了，所以一开始时，可以说整个白天都是非常无聊的，当时无意间看见某子院校的官网底部写着“技术支持：某某某”，这个人就是学长，我觉得名字在这个位置显示出来，很牛逼的样子，内心也很羡慕，然后辗转找到了他的联系方式，短信问他，我能不能加入你一起？我应该学什么？学长回复说，让我先学Jsp，我就去附件书店买了本JSP的入门书。
一开始，发现很难学进去，毕竟没有任何基础，就忽然想着，要不先把上学期的C语言课程补回来吧，因为自己有笔记本电脑，就按照课本上（c语言程序设计，谭浩强版本）的代码例子，从第一节一点一点重新理解，最重要是每一段代码我都上机敲一遍（有自己的笔记本电脑）。我会先尝试看懂，然后关上书看看能不能想起来，然后上机写出来，一时卡壳了也没关系，就再看书，重复直到代码的完整逻辑全吸收在脑子里，能够在脑子里默写出来，然后再上机重写一遍，其中也会改变代码结构和方法，并主动尝试改造部分代码逻辑，换成其他的逻辑，看看运行效果。
这里，我的建议是要关注“章节目录、章节顺序、相互为何依赖”，心里要大致理解整本书的知识点结构，这样才能形成更牢固的记忆树。
十多天时间，每天从早到晚上十点十一点，除了吃饭基本都在房间里就着笔记本电脑学习，终于学完了《C语言程序设计》，看起来时间是很短，实际每天都是煎熬，没有人不想春节期间好好放松放松。这要感谢父母，在这期间很默契，没打扰我学习，也很少叫我外出逛街、散步，相当于有了默认的鼓励，也不希望打破父母对我的这种学习状态的认可状态，所以更容易进入福流状态。
但那期间确实很辛苦，从早到晚完全是自发学习、自发理解，感觉比高考的自觉性和渴望度高多了，因为这时是为自己的爱好学习。学会了C语言，我又继续买了本JAVA的书，Java只是学完了SDK的基础入门，包括文件流操作，基本的多线程，所有例子全部敲一遍，再默写出来，但也花了十来天，毕竟体系确实庞大，只不过由于基本具备了C的基础所以Java理解很快。后面又网上下载了本JavaScript的入门电子宝典，有了C语言和Java的基础，JavaScript就更快了，只花了大概3-4天就把入门的电子宝典和基础的代码例子都敲了个遍，也算是搞定了。所以，那个寒假就把这三门语言的“入门知识”全吃了，尤其是C语言，基本功基本吃透了，后来回到学校，状态就焕然一新了，可谓受益匪浅。
首先回到学校，就碰巧开始上新的Java课，因为有了寒假的基础，记忆也都还在，上课时老师布置的问题在我看来就成了入门级简单题，很多同学都学的吃力，也有同学因为大一落下课程，几乎看不懂。这样的话，我在课堂上的优势就出来了，经常主动回答问题，相对轻松的解题，也经常被老师点名去回答别人回答不了的问题，或者在黑板上写下代码答案。这个现象，也逐步扩散到了后来的“数据库原理”、“计算机系统”等课程。老师开始更多的关注到你，也乐意给予鼓励和技术细节的引导，很多时候往往是别人不会答的编程问题时，最后让你去兜个底，你也会偷偷和“个别优秀学生”较劲。所以，这样一段时间下来，学习上就越来越顺了，加上老师和班主任鼓励，同学认可，爱玩的同学也越来越少叫你一起“打发时间”了，加上自己也有欲望和动力想学更多，经常会进入疯狂的汲取状态，也越来越自信。
懂得自控，也能够在娱乐放纵和学习之间，张弛有度
当然了，游戏其实也没完全丢掉，周末偶尔也会放松放松，但一定是玩完了就主动删掉，我虽然自控强，但偶尔也会随性，所以有时候达到学习目的了，也会在某个周五周六晚上，玩几把，甚至会在五一节国庆节这样的大节日，玩个通宵过次大瘾，但天亮了依然会毫不犹豫的删掉游戏和安装文件，过过瘾就挺满足了。以至于，后来节假日有同学找我玩游戏（对战类），基本都会自带U盘/硬盘过来给我拷贝，否则我重新下载也需要花很长时间，玩完了我还会继续删掉，包括安装包。到了这个阶段，基本是已经逐步有了自知之明，懂得什么该做、什么不该做，理解到，玩也只是放纵一把过把瘾，人只有在顺风期的时候，才会对自己有更清醒的认知，也才会有着对更加美好方向的向往。
现在回头看，如果当时大一只是简单看懂，只是学会本学期的C语言，或者毕业时只掌握了大学期间安排的基础课程，其实也只是满足了大学时期对学生的基本能力要求，离社会职场对该领域“优秀学生”的期望还有很大差距。如果你的经历只是完成了基本课程的学习，那么毕业后的起跑线依然和几十万、上百万的应届生在一起，并没有什么突出的优势和竞争力。
2、提前选好一门就业的语言，并尽可能的吃透它
如果你想渴望在将来能进入知名IT企业工作，那么在大一的刚刚开始时，就一定要尽早明确一个专研的领域方向。当然了，Java依然还是多年的主流选择，以Python为代表的AI因为人工智能的火热看起来目前也不错，但入门基础低，前端技术也朝着越来越精细化、纯粹的方向发展，而.Net因为去微软化导致岗位数量一定会越来越少，php也很难再翻身成为一个流行语言，C++入门容易但想精通需要5~7年以上的长期沉淀，而且国内的就业机会也低于国外，相对更偏向技术底层平台。
以上，这里并不想给选型的建议，只是简单聊聊个人看法，不建议选冷门语言，哪怕有名人或机构强力吹捧的未来，也不要选看起来前景很好，但并非当下的热门语言，你并没有这个精力和资本去博它的未来。大学生往往缺乏对这个行业的深刻理解，所以判断看走眼的概率肯定更高些，但选热门一些的语言，意味着岗位的数量相对多，对于火了一段时间、且大厂都在用的，其实刚刚好，所以最重要的是尽量咨询请教那些优秀的、牛逼的、已毕业的专业对口的学长、前辈，比如在一线大厂或知名IT企业工作的前辈，他们对学弟学妹的建议，往往是无私的、靠谱的，尽量找已经走上中高层管理层的学者或前辈。
3、走捷径，是一条挑战更大的路
我的建议是，主动上一线大厂/知名IT企业的社招官网，比如京东、阿里、美团等，或者新兴独角兽的IT公司，以SaaS类为主，看看他们的社招招聘信息，而不是去找校园招聘。看看他们对于1~3年工作经验的研发岗位，其职位要求是怎样的能力？岗位职责和技能清单列表中，可能会有很多英文词汇你都看不懂，没关系，一开始大概率看不懂太正常了，这些单词实际是框架、工具、组件、技术栈等词汇的名称，我们可以一个一个百度去搜，一个一个去找对应的视频或书本教程跟着学（也可以在线的知名培训网站、B站等），买书的话感觉效率和动力更高一些（花了钱的还是不一样的，尤其是书带给人的即时性、既视感体验），但书本相对更枯燥，坚持学习一二三天的人很多，但能坚持7天、10天、半个月的就很少了，如果没有自信看书，或想省钱的话，买本电子书也可以。
买书时，一定要看最后编写日期或版本，毕竟新的SDK和语言版本迭代较快，新框架或技术理念几乎每个月都在变化，最好是学最新的知识，但也没必要学最新的、超前的，选最近的稳定大版本即可。这里再次提醒，要重视上机实践，最重要的就是上机实践！编程只有心里默念了逻辑，在电脑上实践出来，才算是真正吸收了，其实大脑和手指配合，面对电脑输入代码，脑子里想着逻辑、大脑配合着输入，其记忆和速率都是需要磨合的，敲代码最终也可以进入福流的入神状态。你可以上http://download.csdn.net搜索他人提供的示例工程或电子书，选那些下载评论次数多的，然后进行模仿、自定义修改，这样能加快理解。选一本好书、选一个好的在线视频教程，都可以少走很多弯路，书本的话，上京东搜，买那种评价和销量靠前的（可无脑选销量第一的），一天时间送到家。
等你从大一开始，就按照以上方式，提前学完大一到大二所有编程语言类的基础课程，重点不要放在操作系统、计算机网络等课程上，但可以学好基础的SQL语法。从大二开始，一方面完成其他辅助的课程学习，一方面重点投入到按社招的要求，准备大厂所需的技术栈理解，深入到原理级的理解，再结合视频教程，自行通过项目满足一部分实践的能力，到大三时基本就能够独立使用这些知识熟练的仿写出一个业务工程了。到校招时，基本就超越至少95%以上的同学了。一线大厂或知名IT企业如果有机会去你们学校校招，我觉得通过的概率几乎是稳定的。
我在某大厂，去过西安、武汉等地校招了数次，发现985、211类学生对大学的基础课程知识，其实理解都相对扎实， 基本知识的评分很容易达到80分以上，并且人数相当多，他们擅长计算机类的应试题考试，要想从中脱颖而出，光靠大学的基础知识体系是很难突围的。所以，在应试考试表现优良的基础上，如果对某些基础知识（编程语言、数据结构）有深入到原理级别的了解，比如Java，涵盖到集合类（梳理知识树）、多线程（线池池）、数据库（SQL语法、MySQL原理）等，甚至参与过性能调优，就相当于向面试官展示出了极强的学习能力和发展潜力，再加上可比肩1年以上社招水准的技术视野和项目实践经历（对框架确实做到相对熟练的应用），也就有了超出普通校招生的足够优势，基本就能给到4.5~5星的较高校招评分了（special offer）。
不付出比他人更努力的代价，是不可能做到脱颖而出的，最好的状态是顺势而为，跟着学习欲望的感觉走，不要让它轻易中断，人一旦进入状态，身边的人都会给予顺势的肯定和支持，反之，一旦打断，就可能会回归到生活的琐事中去。
以上，按这样的话，到毕业时你的能力基本已经达到或超过社招1年以上的水平，何况是去参加校招呢？这时你的自信应该是油然而生、发自内心的，面试官只需要通过几个技术问题就能很快感受到你内心澎湃的知识能量，那时的你，有着超出同龄人的进阶沉淀，也有着比同龄人对大厂职位更精准的理解（通过满足他们1~3年社招岗位的基础要求和部分实践），因为自信了，所以也有着超出同龄人对更高挑战的渴望和坚定。
如果最后录取的人不是你，请从自身上找原因，否则至少应该是一堆好企业围着你给offer。

","题主以及很优秀了，大一能主动做书上的题目，还能做出简单的小项目，已经超越很多人了，多少人在大一的青春都献给了 LOL 或王者荣耀，所以大一有做过基本的编程项目已经很牛逼，但是编程的世界不只有编程，在未来的路上，我们还得提高和学习计算机基础知识！
我觉得在校不应该局限于学校的课程进度，有时候我们可以主动在网络上进行学习，现在是互联网时代，你想要什么，基本都能在网络上搜索到！
B 站就是一个学习的网站，很多人在 B 站上大学、考研、学编程，但 B 站的视频资源那更是五花八门，要从里面选择合适学习视频不是那么容易，而且观看人数多，并不意味着是好的。
我周末从 B 站 搜集了些关于学习计算机的视频了，也跟身边的朋友交流一番，特此筛选了下面这些课程的视频，分享给大家。
《计算机网络微课堂》这个视频是湖南科技大学老师制作的，PPT 的动图是我见过做的最用心的了，一看就懂的佳作，而且也适合考研人，因为每个视频末尾都有往年的考题分析。
B 站视频链接：https://www.bilibili.com/video/BV1c4411d7jb?p=1
大学学习计算机网络配套的教材是谢希仁的，如果想根据此教材看视频学习的，可以看方老师讲解的计算机网络，看方老师的视频，你会觉得是一位漂亮的小姐姐在跟你讲课，方老师不仅颜值高，而且声音也甜，当然最重要是课程质量得到了很多人的认可。
B 站视频链接：https://www.bilibili.com/video/BV1yE411G7Ma?p=1
在工作中，分析网络数据的时候，必然离不开 Wireshark 工具，如果想学习 Wireshark 抓包的朋友，可以快速看看这个视频，当你有一定的计算机网络基础后，看这个课程会很快的。
B 站视频链接：https://www.bilibili.com/video/BV1X5411x7R4?p=1
站关于操作系统课程资源很多，我在里面也看了不同老师讲的课程，觉得比较好的入门级课程是《操作系统 - 清华大学》，该课程由清华大学老师向勇和陈渝授课，虽然我们上不了清华大学，但是至少我们可以在网上选择听清华大学的课嘛。
B 站视频链接：https://www.bilibili.com/video/BV1js411b7vg?from=search&seid=2361361014547524697
清华大学的操作系统视频课讲的比较精炼，涉及到的内容没有那么细，《操作系统 - 哈工大》李治军老师授课的视频课程相对就会比较细节，老师会用 Linux 内核代码的角度带你进一步理解操作系统，也会用生活小例子帮助你理解。
B 站视频链接：https://www.bilibili.com/video/BV1d4411v7u7?from=search&seid=2361361014547524697
对于非科班出身的朋友，想快速学习计算机组成原理，推荐这个视频，因为这个视频精炼总结出了跟程序员有关的计算机原理知识，篇幅不会太长，一天就可以搞定。
B 站视频链接：https://www.bilibili.com/video/BV1rV411k7Xf?p=1
如果想系统学习计算机组成原理，可以看哈工大这门计算机原理课，依据的教材正是大学配套的书。
B 站视频链接：https://www.bilibili.com/video/BV1WW411Q7PF?p=1
无意间在 B 站发现一个学习 SQL 很牛逼的视频，主讲人是外国的工程师，这门课程适合初学者和进阶，这位工程师全程以「实战」的方式来授课，案例经典，课程真的通熟易懂，很简练。
B 站视频链接：https://www.bilibili.com/video/BV1UE41147KC?p=1
如果你想学习 MySQL 底层原理，这个视频是个不错的选择。
B 站视频链接：https://www.bilibili.com/video/BV1CZ4y1M7MQ?p=1
学习 Redis 的同学，可以看看这个视频，每一个视频都很详细了说明了对应的知识点，而且不仅只是说了基础应用，还涉及了底层原理和互联网场景面试的知识点。

B 站视频链接：https://www.bilibili.com/video/BV1S54y1R7SB?p=1
强烈推荐浙江大学的算法与数据结构课程，该课程非常系统，也很经典，适合小白入门算法。
B 站视频链接：https://www.bilibili.com/video/BV1JW411i731?p=1
这个视频主要是左神讲解国内互联网大厂的高频面试题，是一个突击的好资源。
B 站视频链接：https://www.bilibili.com/video/BV15D4y1X7Tt?p=1
学习 C++ 直接跟着侯捷老师一系列视频学下去就对了，相信很多人都是看侯捷老师视频长大的。
[侯捷] C++ 面向对象高级编程：https://www.bilibili.com/video/BV14s411E772?p=1
[侯捷] C++11 新特性：https://www.bilibili.com/video/BV1p4411v7Dh?p=1
[侯捷] C++ 内存管理：https://www.bilibili.com/video/BV1Kb411B7N8?p=1
[侯捷] C++ STL 源码分析：https://www.bilibili.com/video/BV1db411q7B8?p=1
不知道大家有没有听过高淇老师，我在读大学的时候，那时候看的是高淇老师，讲课的方式很幽默风趣的，这个视频是入门 Java ，一共 300 集，每一集平均 20 分钟，是个干货视频。
B 站视频链接：https://www.bilibili.com/video/BV1dW411Q7mY?p=1
这个视频是 Java 的重点知识整合，是偏向应用类的，比如反射、RPC、SOCKET、文件、JSON、二维码、MAIL、加密等。
B 站视频链接：https://www.bilibili.com/video/BV1k4411W7xq?p=1
这个视频面向的是 Java Web 的，源码级别的方式讲解了spring、springmvc、mybatis。
B 站视频链接：https://www.bilibili.com/video/BV1uE411C7CW?p=1
----------我是分割线------------
最后，说件事。
我想着，这世界上肯定有一些朋友也跟我有一样的苦恼，为此下决心，用图解 + 通熟易懂的讲解来帮助大家理解，利用工作之余，坚持输出图解文章两年之久，我的文章都汇总到了网站：
网站内容共 1000 张图 + 50 万字，网站宗旨让天下没有难懂的八股文！（口嗨一下，大家不要当真），网站地址（https://xiaolincoding.com）：
希望图解网站成为你们上班摸鱼必备网站哈哈！
如果对你有帮助，别忘记给个三连呀，这对我非常重要
也欢迎大家关注
@小林coding
","哎，想起以前也是抱着满腔热血报的CS，结果整个大学四年老师真的是啥也没教，基本靠ppt，大一大二基本上玩过来的，不过大二下学期开始有点觉悟，觉得自己不能这么下去，于是下定决心找实习，当时自己的想法是不管有没有薪水，我一定要找家公司干活，然后就找了一家，写php，工资发了1200，那段时间还蛮充实的，但是每次回到出租屋，就开始怀疑人生。大三寒假也找实习，在校期间也同样继续工作，大三的时候基本上能自己养活自己了。
回到正题，怎么做？我给你个建议，学PHP，真的。我以前也学c，做一些黑白界面上的计算器，贪吃蛇什么的，学java，就搞安卓，搞java swing，因为只有这样，我才有学下去的动力，人就是这样，喜欢做能立刻得到反馈的东西，才会继续学下去。为什么英语难背，数学简单？就是这个道理，英语背完，基本没什么反馈，转眼就忘，但是数学，做完一题，做同样的题目，思路马上就有了，所以这就是我当时的学习方法，直到遇到瓶颈了，靠自己写这种小东西，没什么进步了，太大的，你写不来，太好看的界面，没有涉及思路。这个时候就去找公司实习，且不说有没有人带你，最起码你在那个环境下，愿意去做更有挑战的东西，但是，非常重要的一点，为什么要去学php？因为简单，容易上手，而且用的小公司贼多，我那个时候就天天学php，而且很有成就感，因为快，做的效果又好，然后又接触更多前端，接触微信支付，接触框架，thinkphp, laravel，简直不要太爽，ORM用起来，还要啥SQL语句？
接着又有一个瓶颈，永远都是增删改查，还是没多大意思，集群，分布式，微服务等等一大堆，愿意搞但是公司用不上的东西，这个时候又是一个分叉路口，转Java或者转前端，转Java，直接学Spring boot框架，一线城市大多数公司都用这个，有了PHP的开发经验，再加上大学的Java知识，一样很快上手，但是又有一个问题，得不到反馈，学起来费劲无聊，所以我转前端了。
转前端有一个优势，你做的东西，自己能立马看到，给自己带来很大成就感，一开始用bootstrap，jQuery之类的，接着进阶学react或者Vue，然后一堆node，webpack, babel，虚拟Dom什么的，这个时候深入学习JavaScript，了解框架的底层原理，参与开源社区项目，比如ant design，react native, eggjs等等，又是一片新天地。
这个过程曲折，孤独，别人在玩，在泡妞，你在敲代码，看不到前方的路，但是相信我，坚持大学，哪怕三年，毕业后你真的不一样。
当时我只准备一年，如果大一开始就这样，相信我也能进阿里或者腾讯吧，哎。大三错过大厂实习，大四错过校招，毕业后半年再找大厂的时候，内推的大神直接告诉我，如果是应届生的话，还是有机会的，社招就算了。
在这里，希望看到的学弟学妹们，要加油，尤其是学校本身不咋地的………
","很赞同其他回答说的，大一其实刚开始接触计算机的话，不需要掌握太多，想掌握太多了也掌握不住，对不。毕竟你还得学高数，大物，英语等等其他的课程。
掌握的意思就是要用得很熟悉，别只满足于学校的要求，满足于考试过关就行，一定要能自己写不少程序，做一些项目出来。
这样的话，你接下来的学习就能事半功倍了。不管接下来是去做项目，上其他更难一些的课程，还是说去刷题。
语言的话，建议学好Java或是C++。毕竟是计算机科班的学生，如果只是掌握Python的话，我觉得还是不够的，虽然拿Python入门到是没问题。但一定一定要掌握至少一门静态语言，且不说，接下来的课程，比如操作系统这样的课程，肯定是需要用到C++的。
所以，早点学好一门编程语言就很有必要！其中C++是一个很稳妥的选择。
如果想学Python的小伙伴，可以看这个回答：
也可以参考这个课程来学：
另外这门python课程也很不错呢，用游戏闯关的方式来学习编程，方式新颖效果不错！
Java的应用范围也很广，如果你接下来要做安卓开发，或是全栈，Java都是很好的选择。
所以，大一能把一门语言学得比较溜，就是一个很好的起点。
接下来就是如何去加强这门语言基础。
怎么加强呢？那就是用你掌握的这门语言来学好数据结构了！
大学应该掌握的基本数据结构以及他们的实现，可以看这个回答：
数据结构的书的话，可以快速看这本大话数据结构，就能入门了。
最关键的是，需要去把这些数据结构用你掌握的语言一个一个实现。这个过程当中，你的编码能力就稳步提升了，debug的能力也会得到锻炼。
尽量能写个5000行代码吧，把基本的数据结构和算法都掌握好，这个代码量就达到了！
快速过一遍之后，就可以跟着算法红包书来一波最基本的算法和数据结构了，虽然这本书书名叫算法，但其实它也囊括了数据结构，而且全书配了很优质的Java代码，想学怎么写简洁高效可维护的Java代码的小伙伴，不容错过这本书，及其配套的网站和网课。

下面这些网课我都上过，有C++，有Java。都是我自学过程中让我获益很大的课程，分享给大家。不过，我建议大家一个个看完，学有余力再看别的，千万别东看一些，西看一点的。
网课可以跟着这几门来学
网络课程的话，则是十二分强推UCB的CS61B。他们家的计算机系的CS61A，B，C课，简直制霸各种课程推荐列表。
2. MIT的算法课，教程用的算法导论，也是强推的网课：https://www.youtube.com/watch?v=HtSuA80QTyo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb 这门算法则基本不涉及到语言层面，主要是算法层面，讲得很好。
3. 然后就是红宝书的网课以及配套官网：
https://algs4.cs.princeton.edu/lectures/
https://www.youtube.com/watch?v=1QZDe28peZk&list=PLRdD1c6QbAqJn0606RlOR6T3yUqFWKwmX
4. 斯坦福2018 Winter CS106B: Programming Abstractions，虽然从名字不太能看出来，但其实是用C++讲数据结构，想用C++的小伙伴不容错过，我看了一半了，特别有帮助，尤其是对递归和回溯的讲解，简直醍醐灌顶。
现在因为不可知的原因，Youtube上面已经下架这门课程，但更方便的是，咱们可以在B站直接看：
Again，也可以去这里学：
我觉得大一能掌握好上面的内容，就是A+的成绩了。

接下来再去跟着这个回答，安排大学其他的计算机核心内容吧。

一定一定要自己课余多学，自己push自己，光靠课堂上学的东西是远远不够的。大学是不会教大家怎么去找实习，找工作的。一定要有自己的规划，然后逐步实现。才能在毕业的时候，收获大公司的offer。
","当你知道什么叫、堆、栈的时候指针就搞懂了，现在搞不懂也没关系，更没必要强迫自己一定要什么时候搞懂，可以照例子里面指针的用法来模仿。
指针的用法无非就是* &两种，比起很多数理化的公式来说简单多了，一大堆数理化公式不用搞懂照样用得飞起。
其实在搞懂指针之前，连int a;这样简单的语句本质是什么一样是不知道的，就当成自己看懂了，然后就用了，指针也一样，当作一种惯用法去用就行了。
ACM有专门的训练课程，在参加训练之前，直接照着刘汝佳的《》来看就好，书上的例子和题目能做多少做多少，水平自然会提高。
算法竞赛入门经典是国内学习算法的宝典了，知乎上有大量讨论，随便找的图片，不是广告。

","
","一个学期至少写个上万行吧 看了题主的问题, 其实就是想问如何快速提高编程能力嘛,,之前有个学妹也这样问过我,我还单独在公众号写过一篇文章,
挺适合这个问题的，我贴过来~
提高编程能力，我自己总结了以下几点：
先上第一点，关于做项目，这也是学妹的痛，不知道如何去开始一个项目。
谈到这点，对不起，我又想讲自己的经历了，有点长。。。
是的，我们都知道编程是一门实践的学科，不动手永远学不会，看懂了和学会了之间差了上万行代码。
或者说： 看懂了 + 上万行代码 = 学会（此公式未经证明，纯碎自己拍脑袋想的
刚学完一门语言，想必大家都想做点有用的东西，而不是天天写练习题，但是呢，又不知道从何下手，尤其是 C 语言。
我大一上完 C 语言课，就处于这种状态，但是我隔壁一个室友就不一样的。
他在学习 C 语言的过程中，刚学到动态内存分配(malloc)，就去摸索着写贪吃蛇、坦克大战，而且完成度都挺高的，那时候是我们眼里妥妥的大神。
但是大神和我上的课，学的东西都完全一样呀，况且都是上了大学才开始接触编程，为什么差别这么大呢？
以至于那时候，我和学妹一样，常常怀疑自己没有编程天赋，觉得别人天生就是这么强。
这种状态一直持续到大一下，那时候刚学完 Java，而 Java 也比 C 友好了不少，所以总想写点什么。
于是自己就选择写一个类似 QQ 的聊天工具，其实功能就很简陋，就是一个简单的 GUI + Socket 编程，然后在加上用户信息管理就完了。
但是，当我用这个简陋的软件，分别在室友和我的电脑上跑起来并且成功发送消息的那瞬间，我觉得我的编程世界被点亮了。
原来编程这么好玩，原来我也能做一些有趣的东西！似乎找到了一丝编程的感觉，但还说不上到底是什么感觉，毕竟这个程序总共也就几百行。
紧接着，趁热打铁，我又写了一个联机五子棋，实现上依然是 GUI + Socket 传输数据。
但是写这个又遇到了不同的问题，比如棋盘在我的实现里是一个 N*N 的数组，棋子是用对象表示，对象里有坐标、颜色这些属性。
当时我就疑惑了，当一方落子后，该怎么把棋子对象通过网络传输给对方呢，再从网络接收的数据恢复到对象？
起初自己的想法是手动的把对象转换成字符串，然后像聊天工具一样发送给对方，比如:
{x: 12, y: 13, color: black .......}。
这种做法没问题，但是总感觉不够优雅完美，于是上网一番搜索之后发现，原来我想的这个就叫「序列化」和「反序列化」。
并且在 Java 里直接实现 Serializable接口就好了，甚至可以直接使用ObjectOutputStream类就能完成序列化和反序列化对象。
这些问题在现在看来，根本就不是问题，更像是“常识”。甚至序列化这块，还会选择一些兼容性更好、性能更高的协议，比如 Protobuf、Thrift、Avro 等等。
但是对大一时的我来说，在这个过程中不断的遇到问题并且去解决，就是实打实的编程能力上的提高啊。
在我解决掉一系列问题之后，顺利的和隔壁室友用自己写的联机五子棋对战了几局，这个五子棋还支持不少诸如悔棋、暂停、自动判断输赢等功能。
界面风格和下面这个很相似（这是网上搜的）
但是由于当时没有存 Github 的习惯，代码在换电脑之后没能留下来。
通过写这些项目，我像打通了任督二脉一样，不是学了什么厉害的算法、也不是高深的设计模式、更没有分布式这样高级的东西。
那是什么呢？
我感觉到编程就好像搭积木一样，基本的函数、库、组件就是一个个的积木块，写的代码就是胶水。
只要我们心中有设计图纸，那就能通过胶水把这些积木搭建成想象的模样，缺少什么积木块，用到的时候再去搜索就行了。
在程序的世界，只要你想，你就能。
这段时间大概是我编程能力提升最快的一个阶段之一。
关于这个五子棋，还有个小插曲：
我写的不是联机五子棋嘛，然后启动的时候输入对方的 IP 和 Port 就能连上对战。
后来，我找了一个在其它城市上大学的高中同学，让他和我一起玩五子棋，但是呢，我傻乎乎的让他用 ifconfig 查看自己 IP 后告诉我，然后我在这边连接。
那个 ip 呢，大概长得像 192.168.1.xxx，熟悉的同学都知道，这个就是局域网内使用的 IP 了，并非公网上的 IP。
局域网内的 IP 只能在内网才能使用，所以我用这个 IP 是永远连不上的他的电脑的。
但是那时候我才大一，没学过计网，根本不懂这里面的原理。
为啥我和室友能连上呢（因为在一个局域网）？为啥和其它学校的同学就不行？
别看现在这个东西在我看来是常识，但我那时候是一点计网知识都没，就是硬着头皮学的 Socket 编程，去理解 IP 和 Port。
那是怎么解决的呢？
当然是找谷歌呀！
在网上一番查询后，大概明白了，如果想让不同局域网内的主机进行 P2P 通信，需要一个公网中转服务器辅助进行 NAT 打洞。。。后来，我就又去尝试 NAT 打洞了，其中细节就不再描述了。
其实把我个人编程经历上写这么多，就是想展现我是如何一步步去实践的，遇到了什么问题，又是怎么解决的，把这个过程展现出来。
你看我没学任何计网知识，还不是通过边学边用，完成了网络相关的项目。
所以你离项目只差一个开始。
说到这里，不少同学又会说，我知道要多实践、多动手，道理我都懂。
可我还是不知道如何开始去写一个五子棋、贪吃蛇之类的东西。
好，那我就要问问你了
这应该是大多数同学最典型的问题吧？
那我们以贪吃蛇为例拆解一下，看看是如何从问题到代码的。
首先，贪吃蛇是一个个的节点组成的，节点肯定有横纵坐标吧？一个个的节点组成了一条蛇，那自然应该想到链表吧？
蛇还有什么属性？当前移动的方向
还要食物位置吧？ 那这些属性在 C 语言中用结构体表达出来就是这样：
接下要考虑的就是如何去绘制蛇，这个简单呀，就把整个链表从头开始把每个节点打印出来。
每个节点可以是一个圆点，也可以是方形。
那如何让蛇动起来？所谓的动，其实就是不断的将蛇打印出来，然后又清除。
并且不断的根据移动方向更新蛇的位置，只要这个过程够快，快过人眼能够分辨的帧率，那看起来蛇就像是在连续的动一样。
然后这个过程你还要去考虑如何检测碰撞，如何判断吃到了食物，还要随机产生食物。。。 这些东西首先你得想清楚逻辑，代码实现其实if、else 、for 就足够了。
做项目的过程总会遇到不会的东西，也会遇到问题。
但是要相信，所有的问题在你之前基本上都已经有人遇到过了，只需要把问题准确的描述出来，然后去搜索引擎上搜就肯定能找到解决的线索。
如果你要等学会所有东西，才去开始做项目，那估计等到本科毕业也没机会。
本科上的就那几门课，Java/C/C++、操作系统、计网、编译原理、离散、数据结构......
可能没有学校会单独开一门课教你 Java Web、Python 写爬虫等等。
学完这些理论课，等到毕业，你会发现，依然好像什么都做不了，所以说，要动手，趁早。
并且理论上，学完一门语言，掌握了数组、链表、 if、for、函数这些编程最基本的概念，就有能力去实现一些诸如贪吃蛇、五子棋、扫雷这样的小玩意了。
这种通过项目去学习，以解决问题为导向的学习才是更加精准和高效的。
课堂上的学习大多数是老师灌输知识、学生记住，然后考试就能拿高分。
实际上有多少知识能转化为解决问题的能力呢？
不好说。
还是那句话，编程就像搭积木，学完基础的，积木块都给你了。
你能搭出房子、车子、还是火箭这全靠自己。
所以动起手来，编程能力是靠码出来的！
全文在这，太长了，我就不放过来了，感兴趣的可以去看下：
觉得有帮助记得关注我 @编程指北 哟~，指北不指南！
---update---
除此之外，学习编程过程中一定要多刷题，刷leetcode，这里推荐一下刷题方法和开源刷题笔记：

","首先我们要明确的是，学编程时我们到底在学什么。我们在学习过程中不能只关注不同的知识点，而更多的学这个领域的思维逻辑。尤其是在学编程初期，我们扎扎实实打基础是好的，但是我们不要过于专注于把一个编程语言的所有库和语言都过一遍，因为过了也会忘记
那我们还怎么学习编程呢，对于在大学还是编程母胎新手的同学请继续往下看，首先我们要知道，可能在你2-4年以后，你的日常会是这样的：
可能在你的想象中，你会只用一个语言然后只用理解这一个语言就好了，但是事实并非如此，因为不用编程语言的不同特性和具体工作需求，很多时候你喜欢很快的在不同的语言中切换，这也是为什么培养编程思维(programmatic thinking)比一味的去刷各种奇门语法和算法在初期重要得多，而且也因为学过的都会忘记，真正的学习是在什么东西都忘记以后所留下的东西。Right,这句话不是我说的是爱因斯坦他老人家说的
好的在我们把预期设定好以后，我们来看自己在每个学习阶段当中真正需要注意什么，以下方法不只限于编程的学习中，但是我们以编程为例子，首先在我们一开始进入一个新的领域(beginner)的时候，我们知道的东西很少，就像下面的这个小灰点一样，所以在这个阶段，我们学什么都增加我们的知识点：
在我们学了一定程度以后，我们应该对这个领域的大多数核心方向有所了解，然后相对初学者时的我们来说，有经验(experienced)以后我们的知识网也应该是均匀的向外扩张，具体说来有几个方面
在这个阶段，我们也就可以开始和同学或跟着导师一起做做一些大的项目了，然后学习他们的一些知识，以及慢慢开始做一些开源的项目参加code review等等，这样自己才能够得到更多的回馈，从而找到自己的不足。
在我们对这个领域和核心方向都掌握得差不多的适合，我们也需要开始发现一些细化的方向来建立自己的长项了这样成为一个专家(expert)，比如说云计算，机器学习，分布式架构，或者多线程处理等等，不过当你当了这个程度，应该已经找到了自己学习的一套方法，到时候就放飞自我即可。
总而言之，学编程不用急，切记不要焦虑。重要的是心里有谱，自己知道自己现在学的一些东西是不是对这个阶段的自己是最有用的，学会优先级处理学习的先后次序，不然如果只是一个编程小白，非要想去一周写一个编译器出来，就只有等神仙来救你了，不过确实搞不好神仙会出现哈哈。
","大一上学期C入门，寒假（疫情期间八个月的寒假）里自己刷题锻炼了一下C，结构体，指针这种老师没重视，于是自己练题也写了有5000行吧，然后自己学了C++STL库，然后也接触了面向对象，之后一直用c++刷题，然后又自己开始学数据结构和算法（严书实在劝退。。）目前大二了开始学于C++面向对象程序设计，开始接触工程方面的东西（写一些小游戏）当然算法也还在学，各个OJ大概刷了四百题左右，看了一下编译器上的文件代码大概有2.5w行左右(我喜欢做完题加个注释继续写，不喜欢新建文件)，这学期学python（面向对象编程与面向过程差异还是挺大），因为接触过c++因此上手还是挺快，只需要特别注重了一下语言之间的相同点与差异，准备花一个月把C++面向对象学完(在MOOC上刷视频结合c++primer)，开始专注于python，并且自己做一点东西出来（不能只会刷题呀），当然算法也不会停下，既然喜欢就自己去追求呀。
","我个人觉得。。正常的大一情况应该是啥字符串操作都不行，写个能做加减乘除的计算器就算行的水平。。。

当然现在大学也在逐渐的不养闲人加大毕业难度。。

起码我们那个年代的大一学生都是这样的（学校还算凑活）。。。。。。

你这个水平的，在我读大学的年代。已经算是学霸了。。笑
。。。。。。。。。。。。。。。
一个月后我突然反应过来了哦。。。题主这是不是在装b啊。。。。。大一都去刷oj参加acm了。。。然后还说自己啥都不懂。。。结果被b乎一堆更会装的人真真实实的教育了一番装b的正确姿势。。只有我一个老实人傻傻的跳出来做反面教材。 。
","大一一个学期能学多少编程？换算一下：一个学期== 4.5 个月== 18 周== 126 天，按照《21 天精通 C++》的速度，一个学期少说也能达到架构水平......
当然，以上内容纯属胡扯。下面开始正文。
刚步入大学生活，有的同学对大学的印象还停留在中学老师们渲染出的美好幻想当中。“上了大学就轻松了，随便玩……”

“编程？编程是啥，能吃么？”
“为什么选计算机专业，我也想知道我怎么调剂到这个学校的计算机专业的。。”
当然也不乏有少部分同学在大学之前已经接触过编程，亦或是天赋异禀 21 天就能精通 C++。但这绝对是凤毛麟角。多数同学都是步入大学之后，打开课本才切切实实的了解到“什么是编程”。而今天要说的主要针对这群同学。
首先，兴趣永远是最好的老师。
对于一个刚接触编程的同学来讲，兴趣当然是最重要的。所有计算机专业的同学，第一学期的一门必修课 —— C 语言（鸵鸟现在还记得自己在 C 语言第一节课屏幕上打印出“Hello world”时的心情）。
世界上所有和编程相关的东西，都有 C 语言的影子，这是无法否定的。但 C 语言对于一些对编程兴趣不大的同学来说，从一块迈向编程世界的敲门砖，变成了绊脚石。
此时，和编程初次见面的你该如何是好？
第一份入门教程，主要是让你体会到编程是什么。《与孩子一起学编程》 ，这本书以 Python 语言教你如何写程序，是一本老少咸宜的编程书。其中会教你编一些小游戏，进而激发你的兴趣；还会和你讲基本的编程知识，相当不错。
再推荐两个在线编程入门的网站Codecademy: Learn Python 和 People Can Program ，你也可以在这两个网站上学习 Python，只不过是英文的。然后，你可以到 CodeAbbey 上去做一些在线编程的小练习。（为什么推荐英文网站？信息源很重要，第一手资料很重要，英语也很重要）
第二份入门教程是 MDN 的 Web 开发入门，主要是让你做点实际有用的东西。嗯，做个网页吧。MDN 全称是 Mozilla Developer Network，你可以认为是 Web 方面的官方技术网站。
这个教程会带着你建立一个网站，然后你可以把你的网页发布在 GitHub 上。在制作网页的过程中，你写的每一步，都可以很直观的看到，也就更能刺激你疯狂分泌多巴胺。
想想有多少同学是因为本身对编程并不了解，而后又在选择排序、冒泡排序等算法的摧残之下浅尝辄止。
这两份教程都很不错，都是从零开始，带着你从环境准备开始，一点一点地从一些简单又有意思的东西入手，让你感觉一下编程世界是什么样的，相信这两个教程可以让零基础的你喜欢上编程。期间你可能会了解到一些编辑工具，VS Code 是个不错的选择。如果你的大学老师非要让你用记事本，emm，那就随他去吧。
实践才能把知识变成技能。
有了基础以后，还需要大量的实践帮你掌握技能。
举个例子，无论用哪种语言，能做一个非常简单的 Blog 系统，或是 BBS 系统，有简单的用户登录和注册（不需密码找回）；用户发贴（不需要支持富文本，只需要支持纯文本）；用户评论（不需要支持富文本，只需要支持纯文本）。你需要从前端一直做到后端，也就是说，从 HTML/CSS/JavaScript，到后面的 Python，再到数据库。这其中需要你查阅很多知识并多多实践。
大一一个学期，时间也就那么多。消化好了这些内容，就准备好精力迎接后面的挑战吧。至此，已经进入编程正式入门阶段，下面该学习该如何编程。
编辑：鸵鸟

","高数，线性代数之类的数学课程没有占据你们绝大部分的学习时间么？
","大一多学习计算机体系基础知识，多动手编程，最好写个几千行有用的代码吧！
如果题主不是为了将来做研究，那读计算机专业的重点就在于如何提升编程能力，总结几点：
1.多动手实战，多刷题多做项目
2.学会使用搜索引擎，尤其是Google，帮你解决卡点问题
3.看经典编程书籍，看经典编程视频，b站上其实有不少
4.多看一些优秀的开源项目
讲讲我在大学是如何自学，最终毕业就加入腾讯的经历吧，希望对题主和大家有用：
用一年多时间学习了4年的知识和技能，对，我是在说我自己。
大一刚入学，因为追一个女孩惨遭拒绝，这之后开始自暴自弃，长期混迹于网吧，甚至有一次住网吧长达17天。放荡到什么程度呢？曾经玩星际争霸，连续刷了几百局，整个过程就吃泡面馒头，喝点白水。
玩到大三，突然有一天学校发给我一张：开除警告书。
看着这张死缓通知书，这个结局我并不意外，长期翘课、挂科无数。那时候水到计算机专业大三了，连一个HelloWorld都不会写。
本科就读的大学坐落在一座山中，那一天上山再下山，不断往返，完全感知不到时间的流逝。整整走了一个白昼，累得精疲力尽，瘫坐在草丛之中，看着深邃的天空和地上的花朵。
那一瞬间我突然做了一个改变自己一生的决定：与其成为游戏的消费者，不如做游戏的创造者。
于是我定下里加入游戏行业的目标。因为大学前两年全荒废了，所以大三是冲击的一年。
大三我先后学习了C语言、数据结构和算法，同时补习数计算机组成原理、计算机网络这些核心课程。
大三还养成了一个习惯：疯狂刷算法题，成为了一个算法做题家，后面没想到算法在面试中这么重要，刷算法题让我轻松拿到腾讯校招Offer。
这里也给师弟师妹们推荐一本阿里P8大佬撰写的算法笔记，这套题刷下来，进大厂非常容易：
此外，还学了一门影响我职业生涯的语言： C++。
看的第一本书就是：《C++ Primer》，可以说上面的每一个例子，都上机造过轮子。
随后开始啃《Effective C++》、《More Effective C++》、《C++程序设计原理》、《深度探索C++对象模型》、《STL源码剖析》、《计算机网络系统方法》、《TCP/IP详解》。
除了疯狂自学，毕业的压力也很重，但掌握的东西越多，你对未来就越笃定。
疯狂学习的过程是枯燥且伴随痛苦的，编译报各种不通过的时候让人无比抓狂，知识点学不会的时候会让你怀疑自己的智商。
曾经看过的一部分书籍：
掌握了C++之后，我还用它做了不少有趣的东西，比如：万年历、五子棋、俄罗斯方块等等，俗话说兴趣是最好的老师，建议大家在学习编码的过程中也不妨挖掘出一些有趣的东西：
我写的五子棋程序：
俄罗斯方块：
虽然简陋，但这种训练给我的编码能力带来了极大提升，还训练了程序思维。
C++学习其实有三个阶段，一般人可能需要几年时间跨越这三个阶段，而我当时真的疯狂，一天可以学习15个小时以上，这也让我在毕业之前就到了第二个阶段：
一、C/C++入门阶段
刚入门的时候我们主要是学习培养编程思维和动手能力，深刻理解面向过程和面向对象的思想方法，这对以后的程序员之路非常重要！
所以学习语言更为重要：
面向对象编程思想；类的封装，构造和析构、静态成员、对象管理；类的构造(有参构造函数、无参构造、拷贝构造、默认构造函数)和析构；对象动态管理、友元函数、友元类、操作符重载； C++编译器对象管理模型分析；类对象的动态管理(new/delete)；友元函数和友元类；运算符重载(一元运算符、二元运算符、运算符重载难点、项目开发中的运算符重载)；类的继承、多继承及其二义性、虚继承；多态(概念、意义、原理剖析、多态案例)；虚函数、纯虚函数、抽象类(面向抽象类编程思想案例)；函数模板、类模板，模板的继承。
C++类型转换；C++输入输出流(标准I/O 文件I/O 字符流I/O)；C++异常处理(异常机制、异常类型、异常变量、异常层次结构、标准异常库)；利用一些IDE开发工具：诸如Windows平台VC系列：VC++6.0(比较古老) ；Visual Studio2013, Visual Studio2015，Visual Studio2017，Visual Studio2019；Mac平台的XCode系列，还有CodeBlock，另附一些高级编辑器Notepad++, EditPlus,UE等一些开发工具的常用设置和一些常见快捷键的使用。
这个阶段推荐以下两本书：
《Essential C++》 这是一本内容不多但很实用的C++入门书籍，强调快速上手与理解C++编程。本书主要围绕一系列逐渐复杂的程序问题，以及用以解决这些问题的语言特性展开讲解。你不只学到C++的函数和结构，也会学习到它们的设计目的和基本原理。
《C++ Primer》 本书对C++基本概念、技术、以及现代C++编程风格进行了全面而且权威的阐述，是C++初学者的最佳指南；本书可以帮助你编写实用的程序，而无需首先精通每个语言细节。对于中高级程序员，本书也是不可或缺的参考书。
二、C/C++开发进阶
这个阶段非常刻苦的话，需要半年以上时间。
在第二阶段学习的时候，就是比较重要的了，C++开发的进阶之路，更是一个让自己找份薪水比较体面的工作的筹码。
C++进阶之STL：
STL = Standard Template Library，即标准模板库。这是提高开发效率的极品工具。通过学习此阶段，应掌握泛型编程技巧，理解容器类在C++语言中的应用模式，以及熟练掌握全部STL类的使用方法。
C++进阶之设计模式：
决定一个项目成败最重要的因素是项目总体的设计，通过本阶段的学习，可掌握面向对象编程中重要的一环，是编码前建模的技巧所在。单例模式；工厂模式；代理模式；迭代模式等，这些都是你要掌握的哦。
C++进阶之数据结构基础：
这是所有编程语言中最应该学习的部分，程序组成的基础之一。顺序存储、链式存储、循环链表；
双向链表、栈(顺序和链式)、队列(顺序和链式)；
栈的应用、树基本概念及遍历、二叉树；
排序算法、并归算法、选择、插入、快速、希尔。
这个阶段推荐以下几本书：
《Effective C++》和《More effective C++》 作者是Scott Meyers。你应该熟读它们，并清楚地理解每个项目。该书围绕55条准则，每一条都介绍了一个可让你写出更好的C++程序代码的方法，并以特别设计过的例子详加讨论。
《Exceptional C++（C++编程剖析）》和《More exceptional C++》 这两本书中都包含了40个C++编程问题，这些问题会让你磨练自己的技能，最终成为优秀的C++程序员。这些问题是Herb Sutter精心挑选，与ISO/ANSI C++官方标准相一致，帮助程序员在设计、架构和编码过程中保持良好的风格，从而使编写的C++软件更健壮、更高效。
《Inside the C++ object model（深度探索C++对象模型）》 本书专注于C++面向对象程序设计的底层机制，包括结构式语意、临时性对象的生成、封装、继承，以及虚拟——虚拟函数和虚拟继承，帮助你理解程序的底层实现，以便写出更高效的代码。
《The design and evolution of C++（C++语言的设计与演化）》 本书作者也是C++语言的设计者Bjarne Stroustrup，作者在书中综合性地介绍了C++的发展历史，C++中各种重要机制的本质意义和设计背景，这些机制的基本用途和使用方法，讨论了C++所适合的应用领域及其未来的发展前景，既没有忽略关键性的详情，又没有过多地陷入技术细节。
三、C++开发高级
这个阶段几乎伴随了职场后续的整个生涯，只有更精没有最精，C++高手之路，任重道远！
大四一年，我都在这个阶段，当时开始在一个小公司实习，公司给网吧做小软件。老板交给我的任务是写Windows C++界面，大三疯狂学习了一年C++，工作很快就上手了。没几天，老板说软件要赶着上线，全员一周工作六天。今天大家热议的万恶996，我10多年前就体验了。
在实习过程中我依然在疯狂学习C++经典书籍，这种训练方式也让我进步神速，也为我后面在腾讯和职场的高速发展打下来夯实的基础。
这个阶段需要掌握的一些C++技能：
C++进阶之QT开发：
掌握QT类库构架，图形界面开发模型；掌握QT开发技巧，消息机制，图形处理；掌握QT网络编程，UDP，TCP使用方式；掌握QT文件处理方式，序列化；掌握QT在windows，linux，ios，android不同平台下的移植技术
C++进阶之Windows/Linux网络服务器：
掌握Unix/Linux平台开发方式；熟练使用系统调用；熟练Unix/Linux内存管理，进程，线程调度；掌握MFC界面开发，网络编程；熟悉网络服务器开发方式，熟练编写TCP，UCP网络服务程序；掌握同步/异步IO模型在网络编程中的使用方式。
C++进阶之数据库开发：
掌握SQL语言的实用技巧。Oracle,MySQL数据库的使用方式。
如果你能熟练掌握以上列出的技能，具备解决复杂问题和技术难点的能力，而且你能独立开发一些比较复杂的功能模块，这个时候C++基本就没有太多能难到你的东西了！
仅仅一年时间，不仅开发能力突飞猛进，同时还一直在训练算法能力，曾经在北大ACM网站上疯狂刷题：
《算法导论》这本巨作也被我反复翻看，反复实践：
曾经的算法小抄笔记：
还记得当年为了更快的进步，跑去蹭研究生的课程，听到NP难问题不由感叹：算法世界太奇妙了。
计算机基础+C++语言+算法，这三个都被我攻克，这也是我能毕业就加入腾讯的硬核技能。
在我那个时代，线上资源并不丰富甚至是匮乏！今天各种论坛、公开课、学习资料非常丰富。最近指导师弟师妹应对秋招，我找了一些资料，这里也顺便给学弟学妹们推荐下：
核心就是计算机底层 + 通过反复造轮子的方法学习计算机基础课，主要要攻克三个方向（攻克了会让你如虎添翼）：
一、操作系统
美国有很多优秀的操作系统公开课，比如mit6.828、哈弗OS/161。这类课程都会给你提供一个mini os壳程序，相当于一个核心组件，剩下的你可以自由发挥。比如你可以设计线程管理、文件系统等等。
相比只是看操作系统的书籍，这种学习方法的效率简直高100倍！
下面是课程官网：
国内也有一些顶尖高校也是采取类似的方式，比如清华ucore基于 Linux 0.11魔改版本
二、数据库

国内说数据库就是mysql，这点要相信我！
首先概览下mysql的知识体系：
基础：
调优：
核心原理：
架构与运维：
对于零基础的童鞋：
首先，学习基本的SQL语法。完成这个后，你就可以编写SQL语句了。
这一步推荐：W3Schools的 SQL 教程。
其次，学习数据库的主要功能和使用方法，比如用户相关或者权限相关等等。
推荐两本书：
1.《MySQL必知必会》 这本书讲的非常全，从基本概念，到查询到插入新建表，用户的管理，都有具体的例子，非常适合没有任何基础的同学来学习Mysql，总之这本书学习的方法就是：1、十分钟了解下数据库的基本概念 2、找到练手的数据库 3、对照着上面的内容去敲。本书里也有大量的内容是讲sql的，可以结合w3c的sql教程一起，有取舍地看。
2.《数据库系统概念》这本书是dba必看的。
看完这些并且实践+思考之后，可以算入门了。
接下来对于希望深入学习的童鞋：
我推荐几本书（很多大神都这么推荐），《高性能MySQL(第3版)》、 《MySQL技术内幕(第4版)》，《MySQL技术内幕 InnoDB存储引擎》，《深入理解MySQL》还有Mysql的官网。读完这些东西，再加些丰富的经验，理论上来讲就具备DBA的水平了。
十分推荐阅读Planet MySQL上汇总的博客，特别是Percona's MySQL & InnoDB performance and scalability blog.

三、计算机网络
网络知识工作后非常非常重要！
我分三个阶段来介绍：
1. 入门
第一本书 建议看谢希仁的《计算机网络基础》
2.进阶
然后第二本要看 《TCP/IP详解1:协议》，这个阶段需要多思考和动手网络在LINUX系统上发挥的最淋漓尽致，所以在学习的时候最好学习LINUX配合使用，学习LINUX,推荐《鸟哥的LINUX私房菜:基础篇》。
学习网络过程中,要不断抓包分析等,自己能写些简单的应用来发包更是完美。抓包工具推荐:LINUX环境下用TCPDUMP,windows环境下用 wireshark。这个阶段写习完后,已经是个小高手了。。
主要技能应该是 ： 对TCP,IP,DNS,icmp等协议应该都蛮熟了得了，dhcp/tftp/ftp等协议也应该都懂些，重点是要学会如何分析一个协议及LINUX系统的基本操作也差不多了。
3.高手阶段
这个阶段需要有一点的编程能力，指C/C++编程。主要学习的方向是协议的实现和协议的架构原理
协议的实现方面， 主要学习底层协议(指传输层及以下)的实现， 这些协议都是在操作系统层面实现的，最好的教材是《TCP/IP详解:实现》。至于网络架构这块，可以学习《计算机网络》这本书。
最后真心想说一句：千淘万漉虽辛苦吹尽狂沙始到金。
程序员这个行业不轻松，甚至可以说是很艰难，但大家只要做到：静下心来多看书、多看源码、多上机，一定能不断高速进步！
这里也给师弟师妹们推荐一本阿里P8大佬撰写的算法笔记，这套题刷下来，进大厂非常容易：
祝大家前程似锦，在编码的道路上一马平川。
要是觉得不错的话，那就帮我
@findyi
点个赞，一键三连呗，硬核码字不容易，笔芯～
","早些年，网上盛传一句话
话虽如此，但能能在毕业时有四五万的编程量就算不错的了，在追求量的同时一定要知道：
而关于如何提高自己，你可以参考一下这两个回答：
1.关于编程如何学习，提高自身能里，C语言项目等，很值得参考学习

2.阿里云栖的回答，很多建议都很中肯

","首先，对于计算机相关专业的同学来说，一定要重视C语言的学习，原因有三个方面，其一是C语言在操作系统开发、嵌入式开发和多媒体开发领域依然有广泛的应用。
其二是掌握C语言对于后续计算机专业课的学习有非常积极的促进作用，比如数据结构、编译原理等等；其三是掌握C语言也会方便后续的考研，目前也有不少学校在考研时会考察C语言。
截止到目前为止,编程开发语言已经有很多种,而每个程序员根据自己的学习能力不同,掌握一到几种不同的语言.
写这篇文章的目的,主要是将自己学习一门编程语言的过程和方法分享给大家,希望大家可以结合我的经历总结出适合自己学习编程语言的方法.
我是一名iOS开发工程师,所以最开始接触的语言便是Objective-C语言,是一门面向对象的动态语言,在经过一段时间的沉淀以后,目前开始进行了全栈的学习.全栈在这里是指前端+后端的学习.
当我接触到前端开发以后,我便整理了我要学的知识点,你别说,还挺多的东西要学呢.
首先就是作为基础的HTML+CSS+JavaScript三巨头.可能乍一看是三个语言,就可以让很多人望而却步.其实学起来一段时间以后,你又会发现并不是那么的多.再过一段时间,你会发现,想要让自己会的一门语言精湛,是需要多么长的时间磨炼和实战经验.
每个人学习一门编程语言,都是有自己的目的.比如有人想写一个App,有人想写一个小程序,有人想写个人主页,有人想做一个大项目.也有人只是为了自己干某些事方便.
那么我的目的,说起来很多人不信,我是为了学习一门语言,增强自己的实力.我不会优先站在挣钱的角度去学一门语言.也许我不是赚大钱的料,但是我愿意融入到一门编程语言中去.
学习心态其实和游戏心态差不多,但是游戏一局可能就个把小时,但是学习确实一个较长的过程.一旦学习心态崩了,一段时间都不想进行学习了.
学习过程中因为每个人学习能力不同,都或多或少,或快或慢会达到一个阶段的瓶颈,或者坎.良好的学习心态就是:不怕困难,不怕瓶颈,爱上不断自己寻找答案的过程.这是程序员必经的一环.
正如上面所说,每个人学习编程语言的目的不同,有的人是兴趣,有的人就是想要高工资.每个人目的不同,所获得的动力也不同.
大多数心想高工资的人,只会停留在编程语言的使用上,而不会深究其原理.而拥有良好学习方法和兴趣的人,往往可以在编程语言的体会和理解上更上一层楼.
当然,也不乏那种确实只希望拿高工资的人,本来干着程序员,后来不研究技术,搞产品搞公司搞创业发家致富.这也是个例.
编程语言是一个工具没错,问题是看你是一个使用者,是改造者,还是创造者?看你理解和体会的程度咯.
一门编程语言的学习,绝对离不开练习,一定要为自己定下目标,用所学的语言,做一个属于自己的东西.学以致用.
切入正题,一门编程语言学习的快慢,使用熟练度,处理问题的速度,都是因人而异的.那么怎么一个差异性呢.
编程语言排行榜
编程语言有很多种,你可以根据排行榜排名进行各个语言的了解,不要吝啬你的百度,查一下排名靠前的编程语言都可以做些什么开发.
详细了解以后,选择一门自己要学习的编程语言,如果你是第一次进行编程语言的学习,一定要慎重选择.起点语言的难易度不同也会决定你的终点在哪里.因人而异.
了解一门编程语言,切记不要加相关语言的开发群,因为在你步入程序员行业之前,你并不能分辨高质量技术交流群和无质量水群以及培训机构建的群.
警惕程序员劝退师,每个交流群都会有,他们的目的只有一个,打消所有准备入行以及想要勉强苟活在程序员行列中的人.
谨记,除了高质量的技术交流群,所有的群都是消遣,水水群,换个心情而已.
在知乎上了解一门语言的行情也不是很推荐,但至少要比群好多了,我个人看法是,如果你的兴趣可以支撑你研究一门编程语言达到一个深度,那么工作的问题你是不需要担心的,我最担心的就是你还没有怎么学,就已经想要放弃了.
顺便插播一下，慕课网近期活动开放了付费专栏免费学活动，需要的直接戳下面链接领取~
什么是局限性呢,尤其是你在进行第一门编程语言的学习时,因为你并未接触过这方面的知识,也没有人可以全天指导你.
你所学到的知识无非就是书本、视频提供给你的,犹如井底之蛙,只能学到现有的知识,而无法拓展和灵活使用.
举个例子,当你去旅游的时候,你是会只去一个地方,还是会先搜遍这个城市的所有景点,然后挑几个自己喜欢的进行游玩.
尽管你在学习一门编程语言时,可能已经达到个人的满负荷,但我还是想把自己在进行学习所思考的关键词告诉你.
工作当中如何应用、实战项目规范和架构、该如何灵活应用.
如果只是学习字面概念,那就好比纸上谈兵,动手做一个自己想做的项目,付出实践,就是学习语言的最好方式.
什么是滞后性呢,比方说,可能你在进行一门编程语言的学习,书中第四章所有的内容都无法理解,在阅读到第七章时豁然开朗,突然明白了第四章所讲的东西.
当然,这也会有时间性的体现,你会发现,在你学习的过程中,三个月前对同一个概念的理解与三个月以后是不同的.
虽然你在前期可能不懂某些概念,如果在进行大量学习后,还是无法理解,你完全可以跳过,在学习以后的知识,会有一种顿悟的感觉,这便是语言的承上启下性.
空口无凭,我就拿我自己学习编程语言的感受来分享给大家.下文分文两种情况进行叙述:一个是我进行第一门Objective-C语言学习的体会,一个是在有了几年经验以后再进行别的语言学习时的体会.
语法学习中,唯一困扰我三个月的东西就是,对象,到底是什么东西.
OC是一门面向对象的动态语言,但我前三个月虽然会创建对象,调用方法,但我根本对对象毫无概念,没有自己的理解.一个混沌的概念.
而后,在学习OC的6个月以后,大致懂了我为什么要创建对象,因为我要完成我的业务逻辑,我需要对象帮助我.在学习OC的一年后,我懂了对象存在的意义.而在从事了两年iOS开发后,看了些进阶视频后,我终于明白了,对象其实就是个指针,而指针的本质就是内存地址..(滞后性)
学习界面搭建时,也是为了搭界面而搭界面.
学习数据传递时,最令我困扰的就是循环引用,代理,block.
网络请求类倒还是比较容易理解,这时学习的使用第三方网络请求框架,不懂它的原理和运作方式,只是会简单使用.
当开始了一个完整的项目搭建时,便突然豁然开朗,原来之前学习的所有东西,都是为了完成业务逻辑,搭建项目.需要自己灵活运用组合.
当熟悉了项目搭建,并经过一段时间的工作,开始拥有了自己代码规范,约束自己,不再是为了完成业务逻辑而完成业务逻辑.
约束自己,提高自己,并提高代码质量.
在进行大量的文章读阅以及大量第三方框架代码的学习,突然发现自己需要提升的还有很多.
首先想要优化的就是自己的项目框架,代码不够健壮,架构不够健壮,这哪里是不够健壮,这简直就是不能见人.
在养成了个人架构和规范后,开始进行了iOS的底层学习,Runtime机制,指针等,发现了一个道理:随着学会的东西,理解的东西越来越多,发现自己要学的东西越来越多,根本学不完.
我第一门编程语言学习的时候,也下了很多功夫,做梦都在敲代码,这个过程很苦,但是我很欣慰.我也会很笨,书里的东西我都看不懂,代码也会出错,出很多知名错误,但我一直努力学习.
有了第一门语言的基础,再进行第二门语言的学习,我会首先考虑到语言特异性.
语言特异性就是字面意思,不同的语言,会有不同的规则和差异性.
学习一门编程语言的最好途径对于有基础的人就是书籍,如果你没有基础的话,最好的途径是视频没错,但是视频有些节奏过慢.
编程语言书籍大致分为5类(入门类,工具类,实战类,高级类,圣经类).
切记不要盲目的读书,要循序渐进,不然失去读书的兴趣,将会失去知识获取渠道.
每个语言都有特性,例如 动态语言、静态语言.强语言、弱语言.要搞清所学语言的语言特性.更有利于后面的学习.
每个语言都有自己特有的规范,和系统内置函数,方法,实例.是编程人员不能替换和修改的并严格遵守的.
每门编程语言的大体结构大致是
每本书,每个视频,每个文档,每篇文章,都是别人的见解,别人的看法.
在学习一门编程语言的过程中,大量阅读别人的资料没错,但是,一定要把别人的东西变成自己的.
将自己的理解,建造成属于自己理解和见解的一个体系,也方便与别人交流,及时改正自己看法的错误.
在学习一门编程语言,最需要的就是一个前辈的指导,如果只有自己,那就和游戏开荒没有任何区别.
那怎么获得这个人脉资源呢,要自己去寻找高质量的技术交流群,结识各种层次的编程语言开发者.记住,发展的人脉资源,不要经常缠着问问题.在没有稳定属于你的人脉资源时,不要问毫无营养的问题,要问一些有建设性的问题,值得交流学习的问题.
目前我个人知道的高质量交流群除了好友邀请的,就是通过简书作者简介、小专栏、知识星球添加的群.
怎么学习?如何学习?我可以这么跟你讲,如果你想学,你的时间根本不够用.你觉得我说这话闹着玩的话,那就是你还没有体会到我是怎么想的.
我目前关注的42个人当中,有一些人便是iOS领域当中的前辈,他们有一些文章便是有一定见地的,我会抽时间学习他们的每一篇文章,去其糟粕,取其精华,为我所用.
把别人的理解,别人的文章,不用复制粘贴,转为自己的理解
本人是Mac系统,用的Dash软件是用来查官方文档的.Windows系统可以使用网页版Doc
手册和API是进行一门编程语言学习的最好途径.如果你的编程语言有编辑器的话,一般都是可以戳到语言定义里去的,直接学习每一个值得学习的函数、实例、方法.看看在软件/API文档中是如何定义的.
补充,查看官方API也是进阶的最好途径


作者：筑梦师winston
链接：https://www.imooc.com/article/46019
来源：慕课网
本文原创发布于慕课网 ，转载请注明出处，谢谢合作

","1.学好基础，吃一口成不了胖子
计算机涉及的内容很多，把基础学好，而不是在沙子上建大厦
急功近利，最后在上班的时候还得继续学基础，除非你想一辈子过摸摸鱼的方式
C语言不能丢，这是基础的基础，所有的理论都用他来描述的
学透数据结构，就会编程了，没学好这个，不算科班。
学好操作系统，写代码的很多方式，就会明白为啥这样，因为代码都跑在操作系统之上，需要符合操作系统的规矩，特别内存管理部分，对应的很明显
学好编译原理，才明白什么样的代码是高效的
学好离散数学，组合数学，矩阵论等基础数学，才发现写代码的逻辑so easy。
学语言重要不？重要，但是不是关键
理论基础踏实了，不管什么语言，去看看 w3school就好
2.没有快钱，也没有快的学习方式
想赚快钱的，最后都头破血流
学习也一样，几天学一本书，那是不可能的
我导师说，C++ primer他看了17遍，现在是国内不多的C++委员会的委员之一
你去看看这本书有多厚
所以需要把基础学踏实，理解透彻
3.贵在坚持
上大学，最大的好处就是，没有人管你，按照自己的兴趣去学。
别人刷短视频的时候，你在图书馆
别人在吃鸡的时候，你在吃代码
别人在花前月下，你在研究原理。
学习本来就是枯燥的，如果顶不住诱惑，那你的水平和大家都一样，四年过来一看，什么都没学会。
编码功力，不是随着时间自动升级的，而是需要不停的寂寞的不停修炼。
4.多调代码，多做笔记
看了书，还要把书上的例子在电脑上跑一次
有时候看着很简单的事情，在电脑上就是跑不成功
是不是怀疑电脑有问题？编译器有问题？
其实最终发现都是自己的问题
功力就是在一步一步试错，解决问题过程中提升的
最好经典的问题，还可以自己写成文档，保存下来
等你大学毕业的时候，你会发现这是非常珍贵的财富
甚至可以卖钱，你看我就有这些资料
不需要资料的大神，点个赞也是鼓励哈

"
37,为什么不能有把中文想法直接转换成电脑程序的编程呢？,"你说的这种玩意叫“乙方”，
你只要端个杯子开个会，说“我要一个APP，大概和xxx有关，具体有哪些东西我也不知道，反正你们先做一版给我看看”
然后“乙方”就会根据中文想法自动编程了，非常贴心。
Debug也简单，你只要端个杯子开个会，说“我觉得这儿要大气一点”“我觉得这儿应该这样”
然后“乙方”就会根据中文想法自动修改了，非常好用。
","这个问题在思维上跳跃了一层。
为什么一定要“把中文想法直接转换成电脑程序”呢？
如果有写程序的需求，那么程序运行肯定有一个目的。
既然如此，只需要用中文说出想法，然后直接转化成你的目的，就可以了。没有必要编程啊~~

所以……不如等小爱同学、天猫精灵之类的，能帮我们直接做事比较靠谱。
——“天狗精灵，帮我写个抠图程序。”
——“请问程序的目的是什么？”
——“帮我把这个照片里的人抠出来。”
——“稍等……”
——“您的图已经扣好了。”

我感觉这样才对【机智】
","有。
比如你是张小龙。
你就可以开会时候一句话，我要……。
然后就会转换成程序了。
不行怎么办？
贵厂（以及同行）规范回答：能实现你就干， 不能实现我换个可以的人来。
忽然觉得软件行业很有点《甲方乙方》的“好梦天天游”的意思。
实施不力项目经理示意图（划掉）。

不对！
题目说的不是人工，是自动！
实施办法参考老笑话。
你有啥想法不重要，得看你是谁。
","我说句大实话：
有相当一部分人其实根本没有能力恰当而真实的反映自己的想法。
就比如说你这个问题，
想法就是想法，不存在中文想法和日文想法这种区别。中文只是一种表达工具，想法只有在表达出来的时候才会和中文扯上关系。
另外，编程是一个动词，这里应该使用程序一词。
所以，这个问题应该是

接下来说一说为什么：
本来中文就比较复杂，又碰上很多人用词不讲究，表达不恰当。
这些东西要真转换成电脑程序，出了 bug 还真没法排查是哪里的问题，
计算机和程序员（这里可能叫表达员更合适）互相踢皮球，都怪对方没有表达清楚。

一个好消息是，虽然目前没有办法把用中文描述的想法直接转换成电脑的程序，但是有办法把用中文描述的想法间接转换成电脑的程序。
这个办法就是，你可以找一个程序员，你用中文描述你的想法，他来帮你实现。
这种人我们通常称之为产品经理，和程序员有不共戴天之仇。



","
看了一圈答案，好像没有一个人答在点上。
NL2CODE（自然语言转代码）这个想法一直都有，而且发展迅速。

我们先来看几个GPT-3的例子：
十秒生成一个Google首页

快速设计原型

自然语言到Shell命令互译

帮忙写代码

你去搜NL2CODE的论文其实不算少，包括NL2SQL等子领域也非常多。

所以把想法直接转换成代码这个想法，其实很多人都想过，也一直都在研究，最近应该算是高峰了。但是这种工具出来并不会消灭程序猿，而会成为程序猿强有力的辅助工具，具体可以阅读我关于GPT-3的文章。
如果你认为GPT-3使程序员淘汰，那你大概率不写代码

","啊这...题主学过钢琴没有？

好的。你从来没练过钢琴，对吧？
不准偷偷练琴，看见这本五线谱了吗？
看完它，然后马上到维也纳音乐会上，把他们的钢琴师赶下台，弹段有专业水准的出来，震惊震惊那帮子傻帽老外。不用高，风头盖过朗朗就行。

干嘛挠头？嫌弃太简单了吗？
好的。把五线谱交回来，搜段弹钢琴的视频，什么海上钢琴师什么钢琴广告，都行。看20分钟，打听打听朗朗在哪演出，挑战他。

你看，多简单点事。都没要你听见“弹钢琴”仨字马上就打败朗朗。

啊？你就是朗朗？
那咱换一个简单的。
1、听说过手动档吗？好的，这是辆手扶拖拉机，你开着它，到赛场把舒马赫的记录破了。
2、这是本小学生大字字帖。看见了吗？去，你也写本字帖，把颜筋柳骨融为一炉，找个书法家协会，卖他个小目标出来。

别缩啊。来个真正简单的，不骗你。诺，你看书名，21天精通c++。都敢起这个名字了，总假不了吧？
咱也不提21天了。你看两年，帮华为把搞出来。
只要你把这事办成了，第二天我就把你要的汉语编程给你弄出来。
","现在已经有了，前不久 Anthropic 发布的 Claude 3.5 Sonnet 模型 + Artifacts 功能基本上已经做到了题主说的这种情况——把想法直接转换为应用程序。
简单说，
那么它能干什么？
让 Artifacts 厉害的地方在于它支持 React（一个 JavaScript 库），你问 React 是什么，其实我也不太懂，然而这都无所谓，你可以完全不用懂这些知识，只要知道支持了 React 后，它可以把 Claude 生成的代码构建成一个有界面、可直接交互的网页程序就行，然后你就可以做很多有意思的事情了。
举个例子。
假设我现在需要出一些数学习题，考查低年级学生对四则运算的掌握情况，很显然手动去写的话效率会很低；如果能编写一个程序，自动完成习题的生成，那就方便和灵活多了。
于是我把这个任务交给 Claude，让他做一个习题生成器，使用如下 prompt：
Claude 给出的回答如下：
可以看到，我只是提出了要求，并没有给出任何实现方法，而 Claude 会自动分析需求，编写程序实现完整的功能，甚至还会考虑到我没有考虑的方面，比如还给每个题自动加上了正确答案。
于是我就轻松得到了一个“习题生成器 v1.0”，整个过程用不到 1 分钟。
如果对这个初级版本不满意，那么直接在对话框中告诉它，让它继续修改即可，比如“我希望再改进一下这个程序，题目中允许出现多种运算类型（同样由用户选择），然后也允许出现分数算式”
然后就得到改进后的版本“习题生成器 v1.1”。
还可以继续改进，包括程序功能和样式设计等等，直到满意为止，中间如果出现 bug，也只需要把错误截图给它，让它自己修改。
可以想一下，在没有这种 AI 工具的时候，对于一个不懂编程的人来说，完成类似上面这个工作要有多高的门槛，以及需要花费多少时间和精力。
而现在，你根本不用懂任何编程语言，完全通过自然语言交流，就能让 AI 把这事干了，几乎没有任何门槛，这不就是题目所说的“把中文想法直接转换成电脑程序”么。
AI 能给很多人带来实际帮助和效率的提升，把不可能变为可能。类似的例子其实非常多，过去这一年多大家应该或多或少都接触过一些 AI 工具，只是可能并没有深度使用。以我个人的观察和经验，绝大多数人都是没找对正确的用法，这个东西还是很讲究契合度的，因为 AI 工具千千万，只有跟自己工作场景匹配的才是有用的。
这里我非常推荐大家去听一下AI智能办公，这个课提供了大量如何借助 AI 工具提高办公效率的案例，以及具体的操作方法，比如高效制作汇报 PPT、总结文档、处理和分析表格数据，以及 AI 编辑和图像创作等等，反正几乎覆盖了所有的办公场景。老师分享的都是非常实用的且可实操的技巧，如果你缺少 AI 工具使用经验，别错过这个机会，听了一定会有启发。现在通过下面的入口就能参加⬇️
然后记得上完课可以找助教领 4 套 AI 资料包，包括 prompt 模板之类的，即领即用。
Claude 的 Artifacts 功能的玩法远不止于上面的例子。
更多例子。
创建一个简易的 FlappyBird 游戏。
给游戏添加更多功能：
Claude 本身支持上传文档的功能，可以用于辅助阅读，总结文档或提取关键信息。结合 Artifacts 可以创建一个交互式的文档阅读器，增加可读性，更有助于快速浏览文档的关键内容。
社区上还有国外网友开发出的更多的花式用法。
创建一个 web 应用，调用电脑的摄像头，使用 TensorFlow.js 和 COCO-SSD 模型实现实时目标检测。
生成的代码保存为 HTML 文件后可以本地浏览器运行，添加摄像头访问权限，就可以调取摄像头画面，并实时检测画面中的物体。
类似的应用还有许多，比如模拟太阳系星体运动，比如数据分析和可视化，等等。
实现上面这些东西对于专业的开发者或程序员来说可能小菜一碟，但是人工智能也给不懂计算机和编程的人一个能轻松创建应用程序的机会，不用学计算机语言、不用配置编程环境、也不用写代码，只要会说话就行了，甚至当你说不清楚时，画图也是可以的（比如一个程序 UI 的草图）。还有什么比这更“技术平权”的了。
总的来说，我觉得未来这类 AI 功能的潜力还是非常大的，而且现在 AI 发展速度很快，现在题目问的还是把想法转换成程序，但是也许未来通用人工智能出现之后，连电脑程序也不需要了，甚至连电脑也不需要了。
对未来的想象，可以尽情大胆一些。
","抖个机灵。
假设存在一个程序A可以把输入的想法转换成一个程序。
我向A输入这样一个想法：“设计一个程序B，B能够对任意的输入程序C判断其是否停机”。
然后A给我输出一个程序B，这和“停机问题没有通用解法”[1]的结论矛盾。
所以不存在这样的程序A。
假设存在一个程序A'可以判断输入的想法是否可以解决；如果可以解决则转换成一个程序，不能解决则输出“不能解决”。于是A'对于上述想法会输出“不能解决”。
我向A'输入一个新的想法：“这是程序C，设计一个程序C'在有限时间内完成和C一样的操作”。
如果C能停机，那么A'会输出一个程序C'；如果C不能停机，那么A'会输出“不能解决”。也就是说我利用A'能够判断C能否停机，又由于C的一般性，A'是一个停机问题的通用解法，矛盾。
所以不存在这样的程序A'。
更新：随手抖个机灵没想到获得了可观的阅读量，看来以后答题还是得找那些有点人气的问题。
补充几点。
","不知道日常生活中有没有像本妹纸一样的人——过于感性。
感性到什么程度？
我会把身边任何的“死物”都能当成是有血有肉有灵魂的个体存在，认为他们有感情、有情绪、有想法、甚至应该主动来理解我的处境~~~
感觉有点诧异有点抽象是不？
别急，我举个例子就好：
比如某一天，我早上洗漱完要出门上班，还没走几步就被脚下的一个凳子绊了一脚；
于是，我就很生气，狠狠地踹了一脚凳子，踹的很远很远，狠狠地发泄了一通；
这时候在卧室的妈妈听到了声响，以为发生了什么事，一脸懵逼；
得知事情原委之后，妈妈对我说：它是死的，你是活的，你至于跟它生气计较吗？
OK，这里应该能懂我要说什么了吧？？？
是的，作为个体的人，我们有血有肉有灵魂、有情绪、有想法；
但作为电脑而言，它就是个“死物”，它不会像男女朋友那样，你的一举一动都会牵动着对方的神经，并由此判断你的喜怒哀乐、主动接收你的行为信号...
想要跟电脑直接进行沟通，方式也只有通过计算机语言——编程语言或运行程序；
之前在计算机发展史介绍中，汇智妹有介绍过编程语言发展史，从物理计算机诞生到人机交互，时至今日已经诞生了很多语言来实现人和机器的交流互动（感兴趣的小伙伴查看下面这条视频即可）
所以这里，对于题主的这个问题我们可以这样来理解：
【1】中文转英文、英文转指令——回想下，我们在念汉字的过程中，早已养成了不自觉附加思索的习惯，当别人念完一段汉字之后我们对这句话的理解也就自然而然的完成了；
可在面对电脑计算机时则不然，首先需要把中文转换成英文词汇，而后通过对英文单词所组成的语句段落来实现计算机语言转换，进而触发应用程序来执行对应的指令命令。
（当然了，在国外或许可以直接跳过中文英译的环节；而至于为什么编程不能用中文汉字来代替英文，我也想问为什么，而且想了很久很久...）
【2】想法/电信号接收、想法/电信号转编程程序——相较上一种情况，我们这里不妨引入一个不恰当的案例：
（当然也可以是残障人士：重度渐冻症患者，不能讲话、四肢无法动弹等极端情况）
在这种情况下，只能靠眼睛/局部肌肉的收缩和扩张来供仪器识别并作出反应，拿霍金先生来说：
这位伟大的科学家在他21岁时就患上了“渐冻症”，全身处于瘫痪状态不能说话，手指只有三根手指可以活动，轮椅是他的全部。霍金患病后，轮椅一开始只是他的代步工具，随着病情的恶化，轮椅也开始不断的升级。他说话模糊的时候，为了让他能与人交流，工作人员就在轮椅装了一台电脑和显示器，植入了一个叫“平等器”的程序。
他可以依靠能活动的三根手指给电脑确认指令就能做到输入。到了2008年，霍金的手指已经虚弱到按不动确认键，不过脸部肌肉仍然可以活动，所以工作人员又为其开发了全新“Cheek Switch”装置到霍金的眼镜之上。该装置可以用红外检测脸颊肌肉活动，当霍金面部肌肉收缩时，传感器就会接收到信号，信号反馈到电脑后，来选定目标字母。
相比之前的用三根手指打字，脸部肌肉打字的方式在效率上无疑会更低，所以工作人员再次对输入法进行升级，联合Swift Key公司采集霍金大量文档，分析词频和上下文关联，就像现在的手机智能输入法，当输入“肯德”时，输入法会自动联想出“基”。不过这套输入法随着霍金在2011年病情的再度恶化，不得不面临全新升级。
这一次，技术团队还是针对霍金的轮椅下功夫，安装了一套可供残障人士使用的交互系统（简称ACAT），可以让霍金的任何脸部动作进行操作，打字效率提高了1倍。后来该套设备还加入了一键静音、快速搜索、多任务切换等功能，使得日常处理任务的效率提高了10倍。
再后来，技术团队又给轮椅装了一套交互系统，所有的脸部动作都可以操作，打字的效率能提升一倍。还有多功能感应系统等——轮椅上还加装了12英寸屏幕，可以完成写稿，收发邮件，听电话。同时轮椅上还有一个万能遥控器，通过红外可以操控霍金办公室和家中的电视机、音响、灯光、开关门等任务。多功能感应系统，搭载了各种传感器，还能实时检测霍金的健康状态，记录轮椅的使用状况。
是不是很熟悉？
不夸张地说，这应该也是世上最“善解人意”的智能机器设备了吧？？？
可即便如此，仍然无法实现题主所说的“把想法直接转换成编程程序”的理想状态，看起来更像是对四肢肢体动作的简单替代和相应指令的智能预判。
原因就在于我们上述提到的：
目前我们接触到的人工智能，更多的是基于数据库/词频、词库等历史操作习惯和应用场景来推算、预测下一步动作，节省更多冗杂的思考和操作时间；这也是众多长假所声称的学习能力和所谓算力，我能承接多少大的需求、并在多短的时间内做出反应...
听上去更像是应用层面的表征；
而对于底层逻辑架构方面的革新，还是任重而道远——毕竟看似简单的运营操作背后，通常都是数不清的各类编程代码和机器语言；从软件开发到硬件配套，系统性的智能工程绝非一朝一夕可以轻松实现。
但绝不是说不能实现哦！
因为在理论上，从脑电波/电信号接收（如何捕捉信号算是一大难点）、到指令生成以及对应的编译程序运行（有点像极致化的模块编程概念），完全是可行的；
无非是什么时候我们才能将个人想法/信号，像目前的语音/声波信号转机器语言那样，让机器变得更像一个“活物”罢了，能跟我们对正常的高效沟通罢了。（类似IOS系统下的siri、、百度小度同学那样）
可以想象，到那时“全民编程”的赛博朋克时代也就自然而然地到来了吧？
嗯，总之，还是莫名有点小小期待了呢，哈哈哈~
但愿有生之年可以如愿看到那一刻的到来...

我是汇智妹，一枚程序员萌妹纸，每天除分享IT技术干货之外，也会聊聊IT圈热议的那些事儿；
公号【汇智动力学院】——职场技能提升、就业加薪升职、以及有对转行IT感兴趣的小伙伴，记得关注一波哟~比心❤
","中文想法------>程序 ❌
中文想法+钱 ------>程序✅
","这是个测试行业的问题，讨论的是黑盒与白盒的关系。
什么是黑盒？
我想吃炒饭-点个外卖-炒饭到了。店家如何炒菜、小哥如何送菜，你不需要关心，你只要在正确地输入（点单）后等待输出（取餐）就可以了。
什么是白盒？
我想吃炒饭-买菜、蒸饭、切菜、炒菜、出锅。每个细节你都要亲自把控输入和输出。
但其实这仍然不够白盒，因为种菜的过程农家已经帮你完成了，这个过程是黑盒的，你只管买就行了。天然气的采集、输送也不需要你关心。
这叫“封装”。把一些步骤封装成一个简单的操作，具体的步骤由机器或其他人来实现。
我们的现代生活就是建立在层层封装的基础上的。简单的一个炒菜，背后经过封装的操作涵盖了各行各业的方方面面，铸铁、挖掘、管道铺设、农肥、化工、伐木、冷链...而这里边每一个步骤都可以再细分出更多的被封装的操作。
所以，即使不涉及编程，你的一个中文想法，也不可能有一个机器能帮你直接转换成现实。你必须提供一定的输入，才能得到输出。如果有一台能够自动炒菜的机器，你必须要输入原材料它才能帮你炒出来。原材料是输出的前提条件。
到了编程领域，需要你输入的“原材料”，就是一个个前置程序。而这些前置程序是“中文想法”的层层分解。
比如简单的一个想法“画一个圆”，够简单吧？但它缺乏必要的输入：圆的直径？线宽？是否填充颜色？是什么颜色？是否是半透明的？是圆盘还是圆球？
于是乎你需要定义这些参数，也就是输入前置条件，才能得到输出。这个过程简单到无法封装，因为每一个操作都是原子化的，也就是不可分解的。
如果换成一个稍稍复杂点的例子：画一个轮胎。它就可以分解成诸多操作，每一个都需要人工定义无数的输入、输出。例如：
你可以发现，每一个信息都不是靠机器自己就能完成的，例如轮胎的尺寸问题，程序如果想要知道什么尺寸才是合适的（或者你想要的），它需要你输入如下信息：
如果你期望上述问题能够靠程序自动完成，你需要赋予程序足够的物理知识和实验结果作为前置，例如摩擦力、材料弹性、形变能力、热性能、冷性能....
你会发现，如果你真的不作任何输入，程序将无从下手，除非它是全知全能的神。
而这还只是“画一个轮胎”这么简单的想法带来的问题。如果你想的是“生成一辆汽车”，这背后涉及的知识将涉及人类整个现代工业和基础科学，包括数学、物理学、化学、生物学乃至美学、文学...
所以，程序做不到完全黑盒，只能由人来白盒操作其中的诸多细节，才能环环相套完成一个个输入和输出，得到最终的结果。
","我不知道你说的自动交易系统具体指什么，但是你可以参考下面的例子。
如果有一个超级ai，能完全理解中文，那么，
我：我想要一个选课系统。
AI：好的，什么是选课系统？
我：就是很简单的，有个课表，学生可以在上面选选修课。
AI：好的，什么是课表？什么是选？什么是选修课？
我：课表就是一个表格，上面列了课程名称，老师，课时，学分，上课时间。选。就是选择，我选择了这门课，就会把我登记上去，然后这门课的剩余名额就会少一个，然后老师可以看到有谁选择了这门课。选修课就是一种课程。
AI：好的，什么是课程？什么是名称？什么是老师？什么是课时？什么是学分？什么是上课？什么是登记？什么是名额？什么……
我：去死吧，我不要了…
编程其实就是尝试告计算机，你要帮我做什么。由于计算机的内置逻辑只有一些基础指令，而这些基础指令建立在逻辑门电路上。那么一个很简单的程序，往往也需要大量的前期，与你想要的业务逻辑无关的准备工作，比如回答电脑上文那些问题。
这个跟你用什么语言编程没关系。就像你要给一个三岁小孩解释你的自动交易系统，如何才能让他明白你要做什么。可能无论你用中文还是你家乡的方言，都很难。
好在现在有操作系统，编程框架，程序引擎，等等，帮助程序员做了大部分基础功能的定义和实现，使得上文的十万个为什么大幅减少，但是涉及到具体的问题，还是比一般非程序员想象的要复杂的多。你可能从来没想过，有人会不知道“课”是什么，“选”是什么，但是计算机真的不知道，要告诉他才行。这个真的跟中文不中文，没有任何关系。
","从题主的描述来看, 大概率是从没有接触过编程的.
当然, 这不是什么问题, 毕竟编程也不是什么普及的技能. 很多人不了解也是很正常的.
所以, 就打一个比方来解释一下.
先要了解一个概念: ""编程""是一个动作, 所以题主的问题""为什么不能有把中文想法直接转换成电脑程序的编程呢？"" 就相当于把人的想法转化成电脑的动作.
这里把不相关的""中文""给去掉. 因为在这里是在是一个毫无必要并且还容易引发争论的""热点词"".
比方正式开始:
编程使用的各种开发语言, 其实就是一种工具. 和我们用到的螺丝刀钳子扳手一样.
所以, 编程这个动作本身, 就是使用工具的行为.
而无论你是做机械加工也好, 木工也罢, 乃至是艺术创作, 工具都只是让你的""思想""成为""作品""的一个媒介和助力. 其本身没有自动把原料变成成品的能力.
那么你可能要说了: 自动生产流水线不就是么, 加工中心不就是么, 这头原料进去, 那头成品就出来了.
但是你想一想为什么流水线和加工中心会把原料""正好""变成需要的成品呢? 还是得有一个操作的过程, 需要人工去安排去调试. 和原始的钳子扳手相比, 只不过是更加高级的工具而已. 而和钳子扳手那些工具相比, 流水线和加工中心的设置和调试需要更高级的知识而已.
所以, 从钳子扳手螺丝刀=>流水线,自动加工中心, 变化的是技能要求. 工具依然是工具,只是提高了效率.

接下来再深入一些, 抛开工具的差异, 解决问题的""思路""是可以抽象出来的. 比如说你要吃一包方便面, 那就需要以下的步骤:
找个碗,
打开方便面包装,
把面和调料放进碗里,
放进开水,
加热,
吃
这就是你平时吃方便面这个""想法""到实现的具体过程. 只不过因为你的身体太过于熟悉这种流程, 不需要太多大脑的思考就能驱动你的手去完成而已.
但是当你要从""想法""变成""程序""的话, 这些流程又该如何体现出来呢?
就好比你想""我要吃方便面"", 电脑驱动某个外部设备把整包方便面塞到你嘴里. OK, 完全符合你的""想法"". 错的只是你.
然后你就会想到""要去掉包装, 要放水, 要加热......""
最后你发现, 这TM不就是自己在编程么. 你所需要的只不过是一个脑波输入法而已...
","您就别整这个东西了。
您就用中文想法，告诉身边的一个打工人。
如果不同的打工人总能完成的比较好。
那你已经可以去当中层管理人员了。
","因为中文的想法往往和程序的编程在精细程度上不是一个量级的。
很多人有简单的想法：做个外卖软件，要有订餐功能、付费功能、能追踪订单实时状态、有餐厅/外卖员评价体系等…
是不是觉得每个功能似乎都简单，至少想法形容起来费不了什么事？
然而实际上用编程实现起来，连显示餐厅时用的字体，图片的界面范围等细节都要用代码明确写出来。
举个不恰当的例子，当你想造人时，你的中文想法是人要有各个器官，而编程时的代码却要完成每个细胞的设计与实现。如果你的想法只有器官级，目前还不够智能的电脑还不足以帮你脑补出各个细胞的具体实现。
再进一步，假设你是个细致的人，想法非常细致具体，对显示餐厅时用的字体种类大小，甚至各种界面的图片边界布局都有明确的构思。从器官级的想法细化到了细胞级的想法。
那么问题来了，用中文如此细致地描述一个程序的具体实现方式，要写多少行多少页？
到了这时候你会发现，写代码比写中文想法用的行数更少。因为编程语言是由英文关键字+数学/逻辑符号组合出来的、专门用于描述操作流程语言，描述操作流程时比中文这类自然语言更简单。相同的道理，描述一个数学问题，用数学符号形式化地写出问题的表达式可能只要两三行，但用中文或英文描述就得写一大段（还不一定写得清楚、无歧义）。
所以既然编程语言可以更清楚简单，为什么要用中文去描述一个程序的实现？
","有的
你只需要使用一种叫做程序员的编译器就好了。
你输入自然语言，他输出字节码文件。。。
","因为很多人高中没毕业，搞不懂啥叫集合
你别不服，举个例子，你说开发个系统，用户使用手机号登录，后台发验证码给他，验证码正确允许登录。
光这一句话就是漏洞百出，高中的集合都没学好， 仅仅指出了验证码正确允许登录，那验证码错误呢，不给登陆，你以为这是补集，逻辑完备了？
实际上，你后台发不出验证码呢？是否临时用密码登录？你考虑了吗？
你考虑的就已经不完整了，AI就不可能给你写出无bug的程序
这个不是AI能力的问题，是你自身的问题
","是可以的，例如人工智能。
自己当老板，说想要个色彩斑斓的黑，底下一堆人工帮你智能的实现即可。
这叫生物神经网络编程。
","这个可以用熵理论来解释：为什么把一堆积木往桌上一扔，它们不可能排列成一座大楼的模型。但是把用积木做成的模型用手一推，就变成了一堆积木？因为一堆积木具有更大的不确定性。也就是说，把积木随手一扔，它有更多的排列的可能性。而你恰好希望出现的那一种出现的概率几乎为0。
一样的道理，想法是模糊的，符合你初步的想法，但是实现出来你发现不是你要的那种的程序有很多，正好是你要的那种，基本不可能出现。所以就像需要人工整理积木一样，需要编写程序，降低熵。
","目前的流程是，老板把想法告诉程序员，程序员再写出程序。
你想要直接干掉程序员这一步，也就是希望电脑能够完美替代程序员。
既然电脑能替代程序员这一工种，意味着他能写出任何一种程序，意味着它能做任何事。你说帮我写一个能够做出世界上所有美食的机器人程序，那么所有厨师就失业了。以此类推你可以干掉全人类。这样的电脑，用五个字来形容：强人工智能。用两个字来形容：上帝。
也许人能够造出上帝，但以目前的技术水平做不出来。
"
38,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
39,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
40,打字速度对编程的影响大吗？,"很多人以为程序员大部分时间都在码代码、敲命令，反正就是对着RGB机械键盘各种怼。
实际上，程序员的日常是：
老板又让我实现xxx功能，还是搜一下有没有现成的轮子好了。然后开浏览器准备上google，忽然瞥到右下角的youtube弹窗，点进去，哎，这个视频好有意思哎....
两小时后......完了完了deadline要到了，强行关掉youtube，搜了下发现确实有现成的轮子，不过轮子里用到的xxx库我好像没用过，继续google一下xxx库的文档。
五分钟后，哈哈，我已经完全了解了怎么造这个轮子了，于是把网上的代码ctrl+c +v过来，写写接口改改变量，然后编译一下。
卧槽，这个错误提示是什么玩意儿......
然后google错误提示......
重复以上过程N次之后，哦耶，编译成功，开始调试。
靠，这个数组是怎么越界的......
妹的，到底哪里内存溢出了......
妈个鸡，谁来告诉我这个指针指哪里去了......
......
然后进入debug死循环...

所以说，你的大部分时间会花在google搜索（刷youtube）、看文档（刷知乎）、跟各种错误提示和bug斗智斗勇（刷朋友圈）当中。真正码代码的时间可能不超过1/10。
视频出处：
","影响非常大。
比如每进行一次操作，打字慢的需要30秒。打字快的需要10秒。
相比于打字慢的，打字快的程序员勾搭的妹子永远感觉对方在线。
所以最后打字快的程序员，都有了女友。站在程序员鄙视链巅峰！
影响真的非常大。
","很多答案都把话题说偏了。

这个指法是否熟练和打字速度是否足够快，我这里定义一个分隔线：就是当你需要打某个字符的时候，是否需要思考这个字符在键盘上的位置。

如果是的话，那么这个思考本身就会打断你编程的思路。

如果不是的话，那么这个影响是不大的——当然，还是会有影响，因为并非所有的代码输入过程都需要思考。

程序员是否需要练习指法，严格来说当然是没有必要；但是对于指法不熟的人来说，只需要一两个月的练习，就能熟练指法提高编程效率，Why not？
","编程需要的是思考，不是打字速度。
要知道，编程绝不会和聊天的打字速度一样，不然编程就是和打字员一样的工作了。
微软以前Windows里做内存管理的专家，他打字是二指禅，但是对他的影响力完全没有影响。
","这么说吧，如果影视作品里把程序员（当然他们更喜欢拍『黑客』）的镜头都按真实来拍，大概率应该是角色对着屏幕『发呆』（要么在等编译，要么在思考这个类该叫啥名）。
以前发生过因为误操作等原因导致写了一天的代码丢失，不得不重写。然后就发现你开发+调试花了一天的工作，重新写一遍的话，大概半个小时可能就敲完了。
不过话说回来，花几个周末练下打字很难吗……
喏，拿去：

","影响不大，但是当打字不会block你的思考的时候，你编程编得更舒服。
另外还有一个影响，就是当你请教大佬问题的时候，大佬告诉你这样这样改就好了，大佬的预期是20秒钟就改完的，所以等着看你改完的结果。 可是你硬生生折腾了5分钟你们才终于看到效果，你猜下次大佬还愿不愿意指导你？ 你猜会不会有大佬愿意跟你一起结对编程？
再比如处理个线上问题，敲几个命令行命令的事情，打字快的人大部分命令就直接敲了，而打字慢的不管一点啥都要动用鼠标各种复制粘贴，这种人处理线上故障的时候，旁边的领导估计看着简直想发疯。 处理这种问题，强的程序员会开发积累自己的工具包，活用脚本语言，alias等等，让自己每敲一个键都比别人更有意义。一般的程序员能做到命令熟练，打字流畅，也不至于让人看着抓狂。
还比如我见过很多程序员，他们的单文件代码从来都是没法独立运行和测试的，每做一个调整，想测试一下，得把整个项目运行起来，然后从UI界面开始点击，一直到触发自己刚才改动的部分逻辑才行。他们从来没想过要对代码做模块化的分解，为每个模块构建独立的开发～测试循环。 当他们回顾自己为嘛改这么个小问题就花了一整天的时候，可能发现自己只是打字慢了一点，鼠标点的多了一点，等编译等得久了一点而已，似乎没有什么大毛病。
总结一下，真正只是打字慢其实对编程的影响微乎其微，然而很多认为自己只是 ""打字慢"" 的人的问题其实并不是打字慢，而是没有优化自己工作流程和效率的意识。
","流畅的盲打是种享受。
指法不好，一会看键盘，一会看屏幕，敲个几十年，是很累的。既然打算做这行，不如花一个星期，练好指法，提高生产力。
打字慢，不影响编程思路，但影响编程体验。
","我早年连数字键和符号都不能盲打，现在可以了；过去我写了十多年程序都没专门练习过指速，指法也不标准；后来练习了两个月，指速翻了一倍，然后以两倍指速+标准指法又写了十多年的程序，前后对比如何？具体影响有多大？怎样测试自己的手速到底有多快？有没有办法短期内提高指速？欢迎阅读我三年前的回答：
摘录两条该回答评论里的感谢信：
以及：
","这个取决于编程的定义了：如果只是纯粹的代码编写，那打字速度当然很大的影响编程速度。
但是实际上编程是一个很复杂的过程
1：设计
2：实现
3：测试
只有实现这一步有大量的代码编写，但是这里还包含完整的调试。
所以一个功能的实现，持续的代码编写只占20% - 30%。从这个角度讲，影响并不那么大。
","打字速度的提升带来的好处：
1.打字不再打断你的思路了；
2.你更愿意写注释了；
3.你不再担心万一程序丢失重打的麻烦；
4.你不再对大程序排斥了；
5.你更愿意对程序修改做更多的实验；
6.快速的聊天回复使你更好地保护你的工作思路；
7.不看键盘的盲打能让你专注屏幕，不再低头打字忽然抬头发现打出来的都是中文原来中文状态下打了好多代码。
8.不看键盘打字能让你看到更多的屏幕提示，比如智能补全提示、函数参数提示、颜色变化等。
9.指法快了你让你更愿意使用编辑器的快捷键，带动其他方面的工作效率的提升。
10.弹指神通是你的终身技能，训练一星期，收益一辈子，键盘一出手，就知道是不是高手。
",,"影响大不大看你打字速度有没有跟上你的程序设计的思路了。

我是上了大学，双手才接触到键盘。图书馆第一本书是Windows系统入门，给大妈做新手指引的那种。然后上课的时候，老师在上面演示，我在下面手抄，一边抄一边理解记忆。

有点幸运是，C语言老师特别关照我，是个50多岁的小老头，人特别和气，抄完一抬头，经常看到他对我慈祥地笑。上实验机课，他喜欢站我旁边看我写代码，所以舍友们都不愿意和我坐一起上实验机课（我中小学经常在考场上被老师围观答题，已经习惯了。。。）

然后有天，他问我，""小树啊，我看你编程速度虽然慢，但是思路很清晰嘛。可是你为啥要看着键盘一个一个字母按啊？""

我的脸瞬间红了。

""哦。你以前没碰过电脑啊？""

""嗯""。红炸。

""训练打字是很无聊的，我来教你个法子哦。现在你们大一新生会有很多群吧，你多加几个，甚至可以去搜索一些QQ技术群，你多活跃活跃，什么时候你能同时进行十个窗口的会话，打字速度就够用啦。""

于是，我就开始了网络社交，混入了各种奇怪的圈子ψ(｀∇´)ψ，编程速度也突飞猛进了。

ps，后来大四，有同学看到他的女儿来找他，据说长得和我有点像。

















","修改一下之前的回答：
别人以为你编程的时候是这样（噼里啪啦敲键盘，屏幕上字符滚动，看起来很酷很牛逼）：
其实现实中你编程的时候是这样（大部分时间手拖着下巴 ，望着屏幕发呆，心里想着WTF）：
由于编程大部分时间并不是在输入，而是在阅读和思考。
看其他人每天写多少行代码就知道了
知名互联网公司的一线程序员一天正常的工作量是多少行代码呢？。
所以结论就是：
输入速度快最好，不快问题也不大，熟能生巧，迟早你会快的，哪怕是用两根指头。
","编程速度与很多因素有关，做到以下这些，可以有效帮助你提高编程速度：
1、 对键盘了如指掌
如果你熟悉了键盘上的各式快捷键，就会惊奇的发现，使用键盘进行快捷操作能让你比使用鼠标时拥有更高的效率。因为快捷键的使用多数依赖于肌肉记忆，更像一种条件反射、而不需要思考——比如清屏时的Ctrl+L，自动完成文件名时的TAB、window中对操作界面进行迅速切换的art+tab等。有些程序编辑器甚至允许你通过编程添加专属的快捷方式。因此，作为一个优秀的程序员，在编程过程中绝不会频繁触碰鼠标。
2、打字速度快
要想编程快，首先打字快。一个能够快速进行编程的程序员，一定是一个可以轻松实现每分钟70-80个单词打字速度的打字健将，甚至有些大神表示每分钟100-120单词也不在话下。因此，如果你的打字速度不够快，小目标可以竖立起来了。-
3、拥有快速debug能力
优秀的程序员总能快速对程序进行debug，比新手快上一百倍可能并不是夸张的说法。这不仅仅是因为他们懂得的知识比新人们多，更是因为经过千锤百炼、千劫万难之后，他们找到了严格而有逻辑的方式进行debug、进行错误源头的寻找。所以，如果你还是个只能慢慢debug的新人，那么你接下来的任务就是不断写代码、解决错误，把经验积累到一定的量，然后期待debug速度质的飞跃。
4、知道怎样寻找更有效的信息
优秀的程序员明白怎样寻找所需信息才是最有效的。当他们使用一个系统遇到了问题，相比较于求助谷歌，他们也许会更偏向于看软件的源代码，通过源代码来了解系统的具体运行方式，进而解决使用系统所遇到的问题。很多时候——高达百分之九十，这种方法对解决问题而言具有很高的效率，远高于求助谷歌。
5、先思考，再编程
当你看见一个程序员开始在电脑前指如飞燕、惊叹于他们码代码速度之快如有神助时，他们实际上已经花了很多时间在这个程序上了，对算法和解决方案也已经进行了深度的思考和探究。在码下第一个代码之前，优秀的程序员必然已经在胸中有了大致的设想。切记，程序员不是一天二十四小时，一周七天都在写代码的怪物，更多的时间他们是在思考和布局，而这些思考和布局的时间，将为你省去之后码代码过程中的大量头疼。所以，随时带着你的笔和纸，在编程之前仔细规划。
6、使用好的编程风格
一个良好的编程习惯能带来的时间利益简直无可估量，他能天然的帮你减少大量的bug、帮你大量减少后期项目改进和维护所需的时间，毕竟一个具有良好架构的程序是很容易进行维护和改进的。很多时候，开发商之所以会在后期面临大量的bug，就是因为他们没有使用良好的编程习惯、不遵循良好的软件设计原则。
7、使用合适的编辑器
所谓磨刀不误砍柴工，要想成为编程小能手，首先你要找到一个趁手的代码编辑器。一个好的代码编辑器能给你很多额外的福利，比如自动选项配置、语法辅助、编辑单词自动识别分离等，而这些福利能令你的编程速度得到一定的飞跃。
8、对编程语言深入了解
有些编程语言和汇编语言一样会允许进行文本替代宏设置，也就是说，你可以在写了很长很长的代码之后，仅用一两行的文本实现对其的显示替代。而这种替代，能在很大程度上提高你之后编程的速度。
9、学会使用脚本
同样的一段代码，一遍又一遍的进行编写无疑是无意义的。将这些代码用脚本进行表示，在需要时进行引用，能很大程度上提高码代码的效率。
10、学会利用已有资源
有些时候，你需要的东西是你的同事、其他程序员已经做过的，那么就不要浪费精力进行重复的工作了，懂得利用已有的资源，你才能拥有更快的编程速度。
11、追踪自己的时间消耗
人普遍存在的一个问题就是不能正确估算自己所需的时间，也许经过反复训练可以，但着实较难。很多时候，你不追踪自己的时间消耗就根本无从得知自己完成一件事情的速度有多慢，和你预期有多大出入。另外，追踪自己的时间消耗还能在一定程度给予压迫感，而这种压迫感能促使你更专心的对待眼前的事情从而效率更高，编程无疑也是如此。

Live 主讲人
Mark Chen
毕业于北京大学信息科学与技术学院。就职于 Google，斩获 offer 包括 Baidu, 网易, Hulu, Google, Microsoft, 小米等。
高成良
北京大学网络与信息系统研究所硕士在读，曾在微软亚洲研究院（MSRA）实习，负责Android平台上项目的算法调优及部分模块实现。
Live 主题：如何学习算法和数据结构
此次 Live 将在北京时间2月8日周四晚上8点举行，报名请戳：

欢迎关注我的微信公众号：九章算法（ninechapter），帮助你了解IT技术前沿，通过面试、拿到offer、找到好工作！
","来看看这两位 google 程序员使用 vim 能打多快，手速快了都是浮云呐：
现在的QWERT键盘键位实际上是为了降低你的打字速度而设计的。
使用优秀的高度可扩展的编辑器是为了让你的打字速度不拖累你大脑的思考速度（当然脑瓜子不能太慢）。
正确的指法比较重要是让你能在盲打数字键和 F 区的时候提升准确率。（很多 unix/linux程序员使用终端和 vim/emacs 比较多的不用 F 区，甚至都不用鼠标和触摸板，我撸代码的时候也基本不用）
想学 vim 可以看下我最近更新的视频 vim 专栏，体验只用键盘的感觉：
笔者在慕课网还有一个免费的 vim 教程：
vim 作者曾写过一篇文章：高效文本编辑的七个习惯
如果你每年几百天每天都要花很多时间用在编辑各种代码、文档、写博客、写读书笔记、写电子书等，学好一个编辑器能节约你很多时间，当然可以不局限于 vim/emacs 这种比较难以上手的编辑器（对 windows 用户也不太友好），它们的好处就是几乎可以完全脱离鼠标和触摸板，同时让双手集中在主键盘区（我的键盘没有 F 区和方向键，比如 HHKB，Poker 这种迷你键盘），只用主键盘区就能高效完成所有编辑操作。缺点就是上手曲线陡峭，需要你用双手的肌肉去慢慢适应。我开的那个专栏尽量降低了学习者的上手难度，并且用视频直观展示出和其他编辑器的差别。
笔者是后端工程师，经常和服务器打交道，使用 vim 让我在本地和服务器几乎有一样的开发体验，我经常 ssh 到服务器直接用 vim 修改代码调试。很多 vim 用户用惯了以后即使切换到其他编辑器或者 IDE 其实都还会装个 vim 插件模拟 vim 按键操作，你会发现现在流行的几乎所有的编辑器和 IDE 都支持 vim 键位扩展。
看到有些答案举了极端二指禅大牛的例子来说打字（撸码）速度不重要，有一定的道理吧。因为真正工作的时候写代码的时间比例确实是比较低的，所以最好衡量下投入产出比再考虑要不要深入学习 vim。不过我想既然现在各种I IDE 和编辑器依然层出不穷，至少说明了撸码速度是会影响到开发体验的。而且使用经久不衰的编辑器一个好处就是不用担心哪一天就被官方抛弃了（参考 Atom）
使用 vim 还可以让你用以下这些小键盘，手指始终集中在主键盘区：

","I was trying to figure out which is the most important computer science course a CS student could ever take, and eventually realized it's Typing 101.
- Steve Yegge
无数所谓的「大牛」已经深刻地讨论过这个问题了。。总结起来就是打字慢的人不能称之为程序员。。
慢指的是打字速度低于60wpm（每分钟60「词」），当然这个标准有待商榷啦。。
至于打字快了有什么好处，你想象一下「人肉」 交互解释器（REPL）就知道了。。节省了无数在思考代码与实现代码之间的时间。。当然也不能矫枉过正，追求无脑的快感，除非你是 Perl 程序员。。
安利一个练 typing 的链接：
","排版也不用自己排，只需调用 formatter 即可，自动排版。与其提升打字速度，练指法，不如想想还有什么其他方法可以提升代码效率。就我个人的经验，高效率编程主要要注重如下三个方面：
第一点, 减少程序重启或编译时间, 不仅包含编程型语言, 也包含解释型语言。
一般我们在开发一个项目的时候，往往希望我这边敲几行代码，马上就能看到结果，反馈即时，而不是先闷头写代码，然后再按一下 IDE 的那个绿色小箭头 ，run一下.
尤其是当项目变大的时候, 要重启项目, 很费时间, 所以现在基本上, 无论是前端, 还是后端, 还是其他领域, 很多项目在开发的时候, 都有 dev 模式, 这种模式可以 live reload 你的项目, 相关的 dev 工具会监听你源代码的更改,如果源代码更改了,它就自动热更换你更改后的代码。
像我写 Angular 项目和 Spring Boot 项目的时候，基本上这个 live reload 热更新的开发工具都是必须有，因为这个东西不仅仅是减少你的等待时间，最关键的是 它可以大幅度减少开发过程中可能出现的 bug。
因为这边写一点代码，马上就能看到结果，即便是编译错误，也马上能看到编译错误信息，马上改正。
我们对于 bug 的原则就是，bug 越早发现越好，最好是写几十行代码，就验证一下这几十行代码是否有效，而 live reload 工具可以帮助我们更好地完成这件事。
第二点，减少代码定位时间
当项目变得越来越大的时候，文件特别多，这时候你要快速进行代码定位，才能快速开发，因为这时候，很可能你从文件夹里找那一个文件都很费事。
不管是寻找文件，还是寻找文件中的一个函数，大家一定要多用 搜索 ，基本上一个函数或一个文件，一搜索就完事，也就一两秒的时间，比如像这样：
这是 VSCode 里的文件搜索，从那么多文件中找到自己想要的文件，我只输了 五个字母。
第三点，快速获取重复代码片段。
其实就是要多使用 Code Snippet, 也就是预设好的代码片段, 在平时写代码的时候, 一定要对那些你经常需要反复写的代码片段做一个 Code Snippet, 然后直接输入关键字即可生成代码, 这其实背后是 Cache 的思想。
比如，写 SQL 的时候，常见的语句就那么几种，我完全可以做一个代码碎片，然后这样：
就会生成相对应的语句，还比如说我写前端 Angular 的时候，经常需要写一个和后端restful交互的一个 service 层，每次写的都差不多，
都是增删查改，那我就搞个代码片段：
然后写代码的时候，只需输入前缀 a-rest-service c即可ji'k
排版也不用自己排，只需调用 formatter 即可，自动排版。
说了这么多，核心思想就是，经常要用到的那么代码，经常要进行的操作，经可能降低
它们的时间，这样最终你的总效率就会大幅提升，就和 CPU 优先优化那些经常使用的指令一样，
常见的比如排版，注释，还有一些常见的命令脚本，都自动化执行，再利用你逐渐积累起来的 Code snnipet，你的效率会蹭蹭蹭往上涨。
最后再提一个事，多看看快捷键，还有就是，用 VSCode。


","1、打字速度对编程影响不大。就算不论“打字速度”和“思考速度”的比较以及“大牛憋三分钟写十行代码好过新手狂敲十分钟”这些因人而异的东西，在IDE环境中，如果你追求最高输入效率，其实应该是充分利用代码补全和重构功能，你连续输入大段文本的机会根本就不多。况且为了准确性，就算我打字速度足够快，我也会优先选择复制粘贴或代码补全，减少输入错误。

2、编程速度取决于思考的速度，以及将想法输出为代码的速度，思考的速度和打字没啥关系，主要是通过各种渠道获取到相关资源，包括谷歌，包括GitHub上已有的一些库。编辑代码的速度虽然不是编程快慢的决定因素，但还是很重要的，选一个自己熟悉并能驾驭住的编辑器或者IDE能事半功倍。

3、所以，提高打字速度，对于程序员来说，还是很有必要的！不仅仅是程序员！另外，打字就像开车、写字、骑车、游泳、基本数学口算一样，在现代社会是必备技能。如果打字速度极快，而且是条件反射式的“盲打”，不用为了输入看键盘，那么你在工作中思考问题时就不会被打字输入打断你的思维。打字对于IT工作者来说，就像呼吸对于跑步者一样，是最不显眼的功能，确实最不可或缺的技能之一。如果打字能力差，在输入的时候要去看键盘，要想输入顺序，那么很容易打断思维，这将大幅降低工作效率和准确性。

4、做到核心程序员的时候，数据结构算法熟练，语言特性建模技巧运用自如，这是我的产出高峰期，两个我认为很有价值的能力，一个是积累了很多自己常用的函数库，基础代码的重复开发率极低，包括数学字符串数据结构常用算法甚至一些常见库的简易表达的封装；另一个是局部化的编程方法，在编程的过程中每个时刻保证只考虑非常有限的内容，这需要对整体较好的驾驭分解能力做前提，辅以好的键入速度，编程如泼墨是非常畅快的，这个阶段我专门去花一点时间练习了键盘输入，也是这个阶段感受到了普通键盘对手指的少许伤害，可能是习惯不好我会不自觉的击键过重，05年的时候买了第一把很普通的机械键盘解决了这个问题。

PS：并不影响，码农又不是打字员，影响工作效率的永远不是打字速度，是思路。

作者：IT人故事会
来源：慕课网
本文原创发布于慕课网 ，转载请注明出处，谢谢合作
推荐阅读:

","既然题主提到了vim，那么就说点可能离题的东西。
离题之前先简单答下题，打字速度对编程影响不大。就算不论“打字速度”和“思考速度”的比较以及“大牛憋三分钟写十行代码好过新手狂敲十分钟”这些因人而异的东西，在IDE环境中，如果你追求最高输入效率，其实应该是充分利用代码补全和重构功能，你连续输入大段文本的机会根本就不多。况且为了准确性，就算我打字速度足够快，我也会优先选择复制粘贴或代码补全，减少输入错误。
======================
下面离题说说vim，既然题主提到想跳vim的坑，作为vimer自然是欢迎的。但首先，vim，并不会提高你的打字速度，它充其量是提高你修改文本的速度而已（个人感觉对比普通的文本编辑器惯用方式至少提高50%以上）。
此外，我跳vim坑的最主要原因，根本不是打字速度，而是vim的操作方式是一套经过时间证明足够有效率且已移值到众多IDE和编辑器的通用操作方案。熟识了vim的操作，基本上能在
1. Linux服务器命令行环境
2. Intellij （及Jetbrain系所有IDE）
3. Eclipse
4. Netbeans
5. Visual Studio
6. Sublime Text
7. ranger / vifm ( 命令行状态下的文件管理工具）
中流利进行所有基本操作了。此外vim方便的文本对象，宏定义，正则查找替换，多重剪贴板（vim里叫register）都是普通文本编辑器没法比的，只能说谁用谁知道。
至于说提高操作速度对编程的影响，最大好处是减少不必要的精神消耗，比如说之前我选中个字符串，要把光标移动到字符串起点引号之前，ctrl+shift+右箭头数下，后面的引号在不同的编辑器下还可能不会被选中，需要根据情况再敲一下shift+右箭头。整个过程至少有三个关注点（不同的IDE可能对选中语法结构有特殊支持，但跨编辑器的通用的方案只此一种）。而在vim操作方式下 va“ 三键搞定，省心。此外，虽然未必常见，但开发中总会有进入巅峰状态的机会。比如说你憋着屎又想在去蹲坑之前干完点什么，有时就会进入巅峰状态，思路突然异常清晰，胸有成竹就差敲进去了。这时操作流畅就能让你保持思路活跃，成功实现目标，这时就特别有满足感。老实说偶尔遇到一次这种状态是开发中一种很大的乐趣，而熟练的操作手法能让你抓住每一次这样的机会。
","我觉得更重要的是熟悉IDE快捷键吧，把整个IDE大部分功能摸熟后代码里大部分字符都已经不是通过打字打出来的了，打字本身也就不太能影响效率了。
"
41,有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯
","想起来以前有一年教大班，教到交通规则，红灯停绿灯行。
班里有个小孩，总是记成红灯行绿灯停。
一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。
又以为是不是色盲，但是他是分得清红绿的。
我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。
然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？
他:我爸爸妈妈一直都是红灯走的。
我:6
主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。
他妈妈:有啊有啊我很遵守规则的！
但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。
做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。
后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！
她说我看不到！你这么大只挡在前面我怎么看得到！
然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。
所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。
当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。
我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。
最后这个困扰我俩大半个学期的bug就这么解决了。
","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡
","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”
","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。
","以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅
测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的阿里云服务器。
某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！
我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。
然后这个问题谁都没放在心上，直到过了几天又出现了！
这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？
但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题
而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境
于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因
后来...
.
.
.
.
.
.
.
.
.
.
后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和
不小心就把插头搞接触不良断电了

我们把他腿打断之后这个问题再也没出现过

","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻
","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了
","看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！
那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、AIX这些。
坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。
那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。
这个地方时以前没去过的，很远，所以很兴奋。
到了现场，确实蓝屏，各种操作都不行...其实这些不重要。
然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..
报了产品型号350和序列号...竟然查不到。
然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。
服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...
按照要求，做了各种配件的更换（现场还有其他机器）就是不行...
就算是重装系统，也是装不下去，一直折腾到第二天下午...
问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。
到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...
我按了F8进了RAID界面，随口说：这个是按F8...
然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？
我愣了一下，然后低头看到了HP的标....
当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...
真的，当时真想死了算了...
IBM有350这个型号，HP也有350这个型号....
不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。
然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？
我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！
第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...
当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...
日了狗了！！

","有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。
首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。
其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。
------------再一次的分割线-------------
有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。
--------------原答案的分割线-------------
听一个希捷的朋友说的。
有用户反映每次用笔记本播放李娜的青藏高原时，电脑就会死机。经测试发现，唱到最后的“那就是青藏高...”时，硬盘产生了共振，振幅过大，读写头读不出数据了。
为了抓住这个bug，朋友听了一个月的青藏高原...
","近读欧丽娟《诗论红楼梦》，读至第七章第一节（北京大学出版社2020年版第317页），有这样一小段：
第六十四回“耳目所见尚如此，万瑞安能制夷狄”——宋欧阳修《再和明妃曲》（诗句见上）（《欧阳修全集》卷8，页132）。
读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。
心中一动再细细一查，不仅此书，其他书籍、论文竟也有不少将“万里安能制夷狄”中的“万里”写作“万瑞”的。书籍如《古典文献学术论丛 第5辑》（李铁范等主编，黄山书社2016年版）、《桃李集》（俞樟华，潘德宝主编，黑龙江人民出版社2016年版）。论文如北京大学马里扬2012年之博士论文《北宋士大夫词研究》，复旦大学过元琛2010年之博士论文《中国文学中王昭君形象的古今演变》。这些书籍、论文均作“万瑞”。
我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？
于是我又仔细翻检了各种《红楼梦》古本及《欧阳修全集》、《欧阳修诗文集校笺》甚至宋元刻本的《居士集》、《欧阳文忠公集》等书，这些书却又均作“萬里安能制夷狄”，而无一本是写作“萬瑞安能制夷狄”的。
真是怪哉！这个奇特现象真是让笔者百思不得其解了。
无奈之下我想，我所看之《诗论红楼梦》，是北京大学出版社出版之大陆版，这里写作“万瑞安能制夷狄”，难道台湾原版也是如此吗？遂向诸友询问，可有《诗论红楼梦》的台湾里仁书局原版，并将所遇之谜题和盘托出。一友人听罢，笑回复道，“不用看什么里仁版，你把‘萬里安能制夷狄’此句复制到WORD软件中，点一下简繁转换，将它转换成简体，一试便知。”
我闻言一试，“萬里安能制夷狄”使用办公软件转换为简体，竟然真的就是“万瑞安能制夷狄”。遂大惊，“瑞”字并非“里”字的简体字，怎么会出现这种现象？
友人解释说道，这是因为有一些英文名字所对应的港台译法、大陆译法不同所致，例如在WORD软件中“尼克松”转换为繁体则变为“尼克森”，“约翰逊”转换为繁体则变为“詹森”。Ryan这个常见英文名，在港台被译为“里安”，在大陆则被译为“瑞安”，“萬里安能制夷狄”中恰好有“里安”二字相连，因此使用办公软件自带的简繁转换功能进行转换时，“萬里安能制夷狄”就变成了“万瑞安能制夷狄”。
至此，我才恍然大悟，原来这么多书籍、论文都出现“万瑞安能制夷狄”这么奇怪的一句话，竟都是办公软件搞的鬼！嘻！虽事出有因，然竟有如此多作者、校者将作品发表之时未加细勘，亦可叹矣。
老子云，天下难事必作于易，天下大事必作于细。岂可不深思哉！
经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。
结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：
1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。
2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“终南快捷方式”这种错误的书籍不下百种，也委实把我震惊了。
辛德勇《版本与目录》三联书店2020年版：“只是这个世界上真心爱读书、一意苦读书的人少之又少，拿读书当敲门砖的人偏偏又急赤白脸地想要一夜成名天下知，能不刻意追寻终南快捷方式？”
方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若陶潜所说的“问君何能尔，心远地自偏”的境界远要比那些隐身山林，却不忘高官厚禄、功名轩冕的欺世盗名、终南快捷方式之辈高尚可敬得多。”
刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”
3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“李彦巨集”相关结果有近百个，全是“李彦巨集是中国网际网路企业家，也是百度搜索引擎的创始人之一”、“百度董事长兼CEO李彦巨集应邀到上海交通大学演讲”之类。
4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。
5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。
廖彦博编《三国和你想的不一样》中国少年儿童出版社2012年版，第60问：陆逊被困在八阵图里吗：“逊笑曰此乃惑人之术耳，有何益焉，遂自变量骑下山坡来，直入石阵观看。”
6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。
李丰楙著《抱朴子：不死的探求》友谊出版公司2013年版：“祝曰：临兵斗者皆数组前行。凡九字，常当秘祝之，无所不辟。”
王题著《雾里看方术》故宫出版社2011年版299页：九字源自东晋葛洪的《抱朴子·内篇·登涉篇》，又称“六甲秘祝”，祝曰：临兵斗者，皆数组前行，常当视之，无所不辟。
7、“豈曰無衣，與子同袍”繁体转简体变为“岂曰无衣，与子战友”。
2015年华东师范大学艺术研究所编《中国美术研究 第16辑》：“《诗经，秦风，无衣》'岂曰无衣？与子战友'中的袍就是穿在外面的长衣。”小编，你这引文里都没有“袍”字啊喂 。
","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。
",,"其实不算Bug
二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。
于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。
史称“狗咬光纤”事件。
","
政治敏感？
","我高中同桌，上了本地一所理工大学。
大一新生入学，发现宿舍没有插座。
一群学理工的男生能忍吗？
当即分工合作，从日光灯的线上引了一根线出来搞成插座。
搞定以后集体欢呼握手。
昂首四顾。
热血澎湃。



随即发现墙边的插座。
","在国内上大学的应该都知道有个校园套餐
我办的移动的，套餐里有50G校园内使用流量
还有1.5G国内流量。
BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。
我就在宿舍坐着他还在扣，发短信了，超出流量5rmb
我就给10086打电话
跟她说了半天，
她说：我们没有权限给你补话费，等后台给您处理。
过了半天后台来电
客服：您好五块钱已经给您补上了
我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。
客服：不好意思呢先生，退款每六个月只能申请一次哦。
我：我也不缺你那几块钱，可是问题你要给我解决啊、
1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？
2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。
客服：不好意思我们也没有办法
你们牛逼
移动真牛逼，无赖公司，你当爸爸就这样不管了？
果断登陆中国工信部投诉
一开始点投诉网页不会加载
我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来
真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉
呵呵
老子有vpn
我挂了个香港的vpn，立马能投诉了
然后填写投诉信息—提交
第二天早上
移动公司客服给我打电话
客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）
我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦
客服：会如数补给您
之后呢她赔给我一共70块

其实这些公司真的贱
明明自己的问题，非要推给客户
非要爸爸们举报你你才老实
","

猜测，可能对象没初始化。
","在10年前左右，不知道大家有没有看过一个广告：步步高家教机。 对，当时我老妈给我买了，为了让我提升成绩，当时是六年级，这是前提。
数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想
没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。
最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，替换apk安装（不愧是我），什么意思，就是说：应用商城下载好apk他会自动安装的对吧，但是空间不够，它就会下载好但是安装不上，需要清理空间后手动点安装按钮，这就给我了替换时间，把要安装的apk包名改成应用商城下载的apk的包名，我到现在都记得，是把 我的世界.apk 改成了 中国象棋.apk ，替换进原有下载的 中国象棋.apk ，再卸载不要的软件腾出空间，然后到应用商城点安装，就能成功安装上了！
简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。
后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个apk安装器，下次就不用填满储存，替换apk安装了。
总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。
————————分割线——————
根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。
","说说我做Android系统遇到的一个bug。
测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。
我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug? 我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。
于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。
我继续说，你的眼镜反光。
答案确实如此，眼镜反光，L-sensor接收到的亮度发生了变化，进而影响到了屏幕亮度。
"
42,如何系统地自学 Python？,"0709更：
上周旁听了一个大学学长组织的线上Python交流会，里边不乏充斥着各位行业大牛，讲的内容确实精彩，可能对于Python经验5年+的人来说，是受益匪浅，欢迎程度极高，恨不得跳出屏幕来表示赞同，毕竟很多提到的问题，我在工作中也很常见，但是作为资历一般的程序员，有一些理解起来还是有些困难，评论区里同时也还有另外一种声音：

我很能理解“另一种声音”，我当初也是自学Python，刚开始的时候，我连循环结构和分支结构都搞不明白谁是谁，去找有经验的人问，结果问了几回人家就烦了，所以，学习这种事，还是得靠自己。
根据我自己的经验来说，想从零开始学Python，以后也确实想找相关的工作，基本是下边这三种方式：
读研读博这件事时间成本比较高，我对自己没有完全的自信，所以我思考再三，还是决定踏入社会浪潮了。（但是对于学习能力强，本科也比较优秀的学生，非常建议继续读研读博，未来踏入社会起薪会非常高，我现在身边就有两个博士大神，我只能膜拜了。。。）
进入社会之后，我基本就是买书和看视频自学，这回给你们来个全方位安利：
1、Python
Python初学者的法宝，如果你想下载Python，最好还是在这个网址去下，不要想着用一些不明来源的安装包。在这里，你不仅可以下载各种版本的Python源代码和安装程序，更有各种文献资料、Python交流社区，还会告诉你Python的最新行情，不得不感叹，这功能太强大！
2、菜鸟教程
站内的知识点很全面，无论你想学习哪种领域，都可以轻松在这里找到合适的资料。
3、Codecademy
这个学习网站很大的优势就是在浏览器上直接编写代码，轻松解决了初学者程序环境安装的困扰。
4、Coursera
如果你英文比较好，交流没有问题的话，比较推荐这个网站。这是一个课程学习网站，内容涵盖编程各个领域，目前已经和200+所大学合作课程，还可以在线读学士、硕士学位。
5、CSDN
如果说你的英文是难题，给你推荐CSDN，是国内老牌程序员社区，里边有各领域博文、资料、课程，基本很多专业问题都可以在这里查。
1、《笨办法学Python》
如果是初学Python的话，没有什么编程基础，还是比较适合从这本开始学的。整体是以习题的方式开始引导初学者学习编程。
2、《Python Cookbook》
这本书既有知识点的详细讲解，又有更多高阶用法的延伸，对于已经有一定基础但是掌握不牢的同学来说，无疑是值得拥有的好书。
3、《流畅的Python》
这本书对于Python的高级用法探究很深入，涵盖了数据结构、对象、并行与并发、元编程等多个方向。
其实，除了学习网站和书籍，我还在网易云课堂、51、慕课、CSDN学院买了不下10套关于Python入门的课，在得到也买了时间管理课。
我自己的话，因为我是想进行系统学习，也想节省一些学习时间，加上我也比较懒，非得有人督促着才能坚持不懈，所以我选了CSDN的Python训练营。

最近正在学习Python的进阶领域-AI，这回同样参与了一个训练营，深刻感受到监督使人进步！不为别的，也是希望自己以后的工作范围更广，也能跟上时代的脚步。
也许有人会问：“你干嘛把自己逼得那么紧，安安稳稳的不就很好了吗？”
作为一个人，如果长期处于一个舒适安逸的环境，慢慢就会被这种安逸笼罩，变得懒惰，原本拥有的能力也会逐步减弱，当有一天危险来临，所在的舒适圈被打破，连生存下去都是个难题！
所以，为了好好活下去，要不跳出舒适圈，要不就扩大你的舒适圈。
跳出舒适圈，意味着你要彻底离开现在的区域，也许是换个城市、换个工作、甚至换个行业，让自己重新拥有危机感，让新环境逼着你去成长；扩大舒适圈，就是让自己能生存的舒适范围更大，主动学习、提升你的能力。
我选择的是从零开始全方向提升，因为我想着，既然要痛苦，就直接痛苦这一次。上边就是我学过的系统课，内容很全，不过价格也相对更贵。
如果有的同学目前是打算一步一步慢慢来，或者之前已经有一些基础，只是想突破单个方向，下边这几门课程我也在刚接触Python的时候买来学的，价格更便宜，内容却丝毫不打折扣，是比较值得学习的！

1、基础知识
如果是毫无基础可言，甚至不知道如何下载Python， 比较推荐齐伟老师的《8小时Python零基础轻松入门》或者是董付国的《Python可以这样学》。细节全面，适合小白入门。
2、爬虫
这回是偏基础点的，之前也分享过两门，都可以进行参考。

3、数据分析
我买过两类数据分析课，零基础入门和多方位学习，现在直接发出来，也是为了方便不同需求的同学。

4、机器学习
说起人工智能讲的好的老师，必说唐宇迪（感觉真的霸榜各个学习平台）。
他是计算机的博士，好像还参与了挺多国家级项目，我听过几次他的课和直播，老师的讲课风格很幽默，经常会举例子，让你更清晰的搞懂知识点，我觉得自己是在学习中享受。
（基础知识配实战，这样学习起来相对也更容易）
今天先说到这里，下回我会跟大家细说这回学AI心酸与快乐，满心干货！
我的目标是进阿里，祝我幸运进阶！
更新：
有很多朋友私信问我Python学习有没有什么好的资料，我给大家找了几门不错的免费课，想学的可以看看。
《Python入门教程》
《Python初级入门精讲》
《Python爬虫开发》
《Python实战编程》
《1小时掌握Python爬虫+高效学习法则》
————————————————————————————————


更新：说明几个事
1.很多小伙伴纠结于这个一百天的时间，我觉得完全没有必要，也违背了我最初放这个大纲上来的初衷，我是觉得这个学习大纲还不错，自学按照这个来也能相对系统的学习知识，而不是零散细碎的知识最后无法整合，每个人的基础以及学习进度都不一样，没有必要纠结于一百天这个时间，甭管你是用三个月还是用一年来学习这些东西，最后学到了不就是收获吗？何必纠结于这一百天，觉得这一百天学习不完我就放弃了呢？（另，项目后面没有更新完，大家可以按照这个框架去学习，没有更新完的大家可以自行找资料。）

2.还有小伙伴说这是广告，那请这位项目创作者看见这条“广告”给我打钱。真的很没劲，这个项目多少人知道，在github上也非常火，火有火的道理，对于一些学习者来说的确很有参考价值。谁打广告不找个几万分的大V，来找我这个小弟弟？
更搞笑的还有说我是成都某机构培训老师？本人坐标北京谢谢，也不是什么老师，只是一名普普通通的程序员。自认为我的水平还担不起什么老师。

下面是原文：
Github上位名叫骆昊 (jackfrued) 的资深程序员，为大家规划了一条从“从新手到大师”的百天之路！我觉得这个模式你可以参考一下。
现在已经有5w+星了！
给初学者的几个建议：

先附上github地址：

下面是这个一百天计划里面的学习框架，我在这里放上来。
Python简介 - Python的历史 / Python的优缺点 / Python的应用领域
搭建编程环境 - Windows环境 / Linux环境 / MacOS环境
从终端运行Python程序 - Hello, world / print函数 / 运行程序
使用IDLE - 交互式环境(REPL) / 编写多行代码 / 运行程序 / 退出IDLE
注释 - 注释的作用 / 单行注释 / 多行注释
程序和进制 - 指令和程序 / 冯诺依曼机 / 二进制和十进制 / 八进制和十六进制
变量和类型 - 变量的命名 / 变量的使用 / input函数 / 检查变量类型 / 类型转换
数字和字符串 - 整数 / 浮点数 / 复数 / 字符串 / 字符串基本操作 / 字符编码
运算符 - 数学运算符 / 赋值运算符 / 比较运算符 / 逻辑运算符 / 身份运算符 / 运算符的优先级
应用案例 - 华氏温度转换成摄氏温度 / 输入圆的半径计算周长和面积 / 输入年份判断是否是闰年
分支结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图
if语句 - 简单的if / if-else结构 / if-elif-else结构 / 嵌套的if
应用案例 - 用户身份验证 / 英制单位与公制单位互换 / 掷骰子决定做什么 / 百分制成绩转等级制 / 分段函数求值 / 输入三条边的长度如果能构成三角形就计算周长和面积
循环结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图
while循环 - 基本结构 / break语句 / continue语句
for循环 - 基本结构 / range类型 / 循环中的分支结构 / 嵌套的循环 / 提前结束程序
应用案例 - 1~100求和 / 判断素数 / 猜数字游戏 / 打印九九表 / 打印三角形图案 / 猴子吃桃 / 百钱百鸡
基础练习 - 水仙花数 / 完美数 / 五人分鱼 / Fibonacci数列 / 回文素数
综合练习 - Craps赌博游戏
函数的作用 - 代码的坏味道 / 用函数封装功能模块
定义函数 - def语句 / 函数名 / 参数列表 / return语句 / 调用自定义函数
调用函数 - Python内置函数 / 导入模块和函数
函数的参数 - 默认参数 / 可变参数 / 关键字参数 / 命名关键字参数
函数的返回值 - 没有返回值 / 返回单个值 / 返回多个值
作用域问题 - 局部作用域 / 嵌套作用域 / 全局作用域 / 内置作用域 / 和作用域相关的关键字
用模块管理函数 - 模块的概念 / 用自定义模块管理函数 / 命名冲突的时候会怎样（同一个模块和不同的模块）
字符串的使用 - 计算长度 / 下标运算 / 切片 / 常用方法
列表基本用法 - 定义列表 / 用下表访问元素 / 下标越界 / 添加元素 / 删除元素 / 修改元素 / 切片 / 循环遍历
列表常用操作 - 连接 / 复制(复制元素和复制数组) / 长度 / 排序 / 倒转 / 查找
生成列表 - 使用range创建数字列表 / 生成表达式 / 生成器
元组的使用 - 定义元组 / 使用元组中的值 / 修改元组变量 / 元组和列表转换
集合基本用法 - 集合和列表的区别 / 创建集合 / 添加元素 / 删除元素 / 清空
集合常用操作 - 交集 / 并集 / 差集 / 对称差 / 子集 / 超集
字典的基本用法 - 字典的特点 / 创建字典 / 添加元素 / 删除元素 / 取值 / 清空
字典常用操作 - keys()方法 / values()方法 / items()方法 / setdefault()方法
基础练习 - 跑马灯效果 / 列表找最大元素 / 统计考试成绩的平均分 / Fibonacci数列 / 杨辉三角
综合案例 - 双色球选号 / 井字棋
类和对象 - 什么是类 / 什么是对象 / 面向对象其他相关概念
定义类 - 基本结构 / 属性和方法 / 构造器 / 析构器 / __str__方法
使用对象 - 创建对象 / 给对象发消息
面向对象的四大支柱 - 抽象 / 封装 / 继承 / 多态
基础练习 - 定义学生类 / 定义时钟类 / 定义图形类 / 定义汽车类
属性 - 类属性 / 实例属性 / 属性访问器 / 属性修改器 / 属性删除器 / 使用__slots__
类中的方法 - 实例方法 / 类方法 / 静态方法
运算符重载 - __add__ / __sub__ / __or__ /__getitem__ / __setitem__ / __len__ / __repr__ / __gt__ / __lt__ / __le__ / __ge__ / __eq__ / __ne__ / __contains__
类(的对象)之间的关系 - 关联 / 继承 / 依赖
继承和多态 - 什么是继承 / 继承的语法 / 调用父类方法 / 方法重写 / 类型判定 / 多重继承 / 菱形继承(钻石继承)和C3算法
综合案例 - 工资结算系统 / 图书自动折扣系统 / 自定义分数类
使用tkinter开发GUI
使用pygame三方库开发游戏应用
“大球吃小球”游戏





补充：敏捷软件开发宣言

角色：产品所有者（决定做什么，能对需求拍板的人）、团队负责人（解决各种问题，专注如何更好的工作，屏蔽外部对开发团队的影响）、开发团队（项目执行人员，具体指开发人员和测试人员）。
准备工作：商业案例和资金、合同、憧憬、初始产品需求、初始发布计划、入股、组建团队。
敏捷团队通常人数为8-10人。
工作量估算：将开发任务量化，包括原型、Logo设计、UI设计、前端开发等，尽量把每个工作分解到最小任务量，最小任务量标准为工作时间不能超过两天，然后估算总体项目时间。把每个任务都贴在白板上面，白板上分三部分：to do（待完成）、in progress（进行中）和done（已完成）。





请参考《团队项目开发》。



2.通过数据表创建模型（反向工程）
python manage.py inspectdb > app/models.py






3.代码性能调优
4.静态资源访问优化

作者：骆昊 (jackfrued)
来源：github
github地址：https://github.com/jackfrued/Python-100-Days
公号：聊聊Python，感兴趣的可以来找我玩，一起来聊聊Python这点事~
","【实体书】
Python 3版本的实体书：《自学Python 编程基础、科学计算及数据分析 第2版》(李金)【摘要 书评 试读】- 京东图书，京东/淘宝/当当等各平台均可购买，喜欢实体书的可以看看，内容不完全一致。
【Python 3版本】
Python 3版本的笔记已更新完成，链接：
目录：

【Python 2.7版本】
Python 其实挺简单的，也挺强大的。
我用 Python 做科学计算，自学一年，也记了一年的笔记。
笔记链接（基于Python 2.7）：

","是否非常想学好 Python，一方面被琐事纠缠，一直没能动手，另一方面，担心学习成本太高，心里默默敲着退堂鼓？
幸运的是，Python 是一门初学者友好的编程语言，想要完全掌握它，你不必花上太多的时间和精力。
Python 的设计哲学之一就是简单易学，体现在两个方面：
废话不多说，学会一门语言的捷径只有一个： Getting Started
¶ 起步阶段
任何一种编程语言都包含两个部分：硬知识和软知识，起步阶段的主要任务是掌握硬知识。
硬知识
“硬知识”指的是编程语言的语法、算法和数据结构、编程范式等，例如：变量和类型、循环语句、分支、函数、类。这部分知识也是具有普适性的，看上去是掌握了一种语法，实际是建立了一种思维。例如：让一个 Java 程序员去学习 Python，他可以很快的将 Java 中的学到的面向对象的知识 map 到 Python 中来，因此能够快速掌握 Python 中面向对象的特性。
如果你是刚开始学习编程的新手，一本可靠的语法书是非常重要的。它看上去可能非常枯燥乏味，但对于建立稳固的编程思维是必不可少。
下面列出了一些适合初学者入门的教学材料：
Python 的哲学：
学习也是一样，虽然推荐了多种学习资料，但实际学习的时候，最好只选择其中的一个，坚持看完。
必要的时候，可能需要阅读讲解数据结构和算法的书，这些知识对于理解和使用 Python 中的对象模型有着很大的帮助。
软知识
“软知识”则是特定语言环境下的语法技巧、类库的使用、IDE的选择等等。这一部分，即使完全不了解不会使用，也不会妨碍你去编程，只不过写出的程序，看上去显得“傻”了些。
对这些知识的学习，取决于你尝试解决的问题的领域和深度。对初学者而言，起步阶段极易走火，或者在选择 Python 版本时徘徊不决，一会儿看 2.7 一会儿又转到 3.0，或者徜徉在类库的大海中无法自拔，Scrapy，Numpy，Django 什么都要试试，或者参与编辑器圣战、大括号缩进探究、操作系统辩论赛等无意义活动，或者整天跪舔语法糖，老想着怎么一行代码把所有的事情做完，或者去构想圣洁的性能安全通用性健壮性全部满分的解决方案。
很多“大牛”都会告诫初学者，用这个用那个，少走弯路，这样反而把初学者推向了真正的弯路。
还不如告诉初学者，学习本来就是个需要你去走弯路出 Bug，只能脚踏实地，没有奇迹只有狗屎的过程。
选择一个方向先走下去，哪怕脏丑差，走不动了再看看有没有更好的解决途径。
自己走了弯路，你才知道这么做的好处，才能理解为什么人们可以手写状态机去匹配却偏要发明正则表达式，为什么面向过程可以解决却偏要面向对象，为什么我可以操纵每一根指针却偏要自动管理内存，为什么我可以嵌套回调却偏要用 Promise...
更重要的是，你会明白，高层次的解决方法都是对低层次的封装，并不是任何情况下都是最有效最合适的。
技术涌进就像波浪一样，那些陈旧的封存已久的技术，消退了迟早还会涌回的。就像现在移动端应用、手游和 HTML5 的火热，某些方面不正在重演过去 PC 的那些历史么？
因此，不要担心自己走错路误了终身，坚持并保持进步才是正道。
起步阶段的核心任务是掌握硬知识，软知识做适当了解，有了稳固的根，粗壮的枝干，才能长出浓密的叶子，结出甜美的果实。
¶ 发展阶段
完成了基础知识的学习，必定会感到一阵空虚，怀疑这些语法知识是不是真的有用。
没错，你的怀疑是非常正确的。要让 Python 发挥出它的价值，当然不能停留在语法层面。
发展阶段的核心任务，就是“跳出 Python，拥抱世界”。
在你面前会有多个分支：科学计算和数据分析、爬虫、Web 网站、游戏、命令行实用工具等等等等，这些都不是仅仅知道 Python 语法就能解决的问题。
拿爬虫举例，如果你对计算机网络，HTTP 协议，HTML，文本编码，JSON 一无所知，你能做好这部分的工作么？而你在起步阶段的基础知识也同样重要，如果你连循环递归怎么写都还要查文档，连 BFS 都不知道怎么实现，这就像工匠做石凳每次起锤都要思考锤子怎么使用一样，非常低效。
在这个阶段，不可避免要接触大量类库，阅读大量书籍的。
类库方面
「Awesome Python 项目」：vinta/awesome-python · GitHub
这里列出了你在尝试解决各种实际问题时，Python 社区已有的工具型类库，如下图所示：
vinta/awesome-python
你可以按照实际需求，寻找你需要的类库。
至于相关类库如何使用，必须掌握的技能便是阅读文档。由于开源社区大多数文档都是英文写成的，所以，英语不好的同学，需要恶补下。
书籍方面
这里我只列出一些我觉得比较有一些帮助的书籍，详细的请看豆瓣的书评：
科学和数据分析：
❖「集体智慧编程」：集体智慧编程 (豆瓣)
❖「数学之美」：数学之美 (豆瓣)
❖「统计学习方法」：统计学习方法 (豆瓣)
❖「Pattern Recognition And Machine Learning」：Pattern Recognition And Machine Learning (豆瓣)
❖「数据科学实战」：数据科学实战 (豆瓣)
❖「数据检索导论」：信息检索导论 (豆瓣)
爬虫：
❖「HTTP 权威指南」：HTTP权威指南 (豆瓣)
Web 网站：
❖「HTML & CSS 设计与构建网站」：HTML & CSS设计与构建网站 (豆瓣)
...
列到这里已经不需要继续了。
聪明的你一定会发现上面的大部分书籍，并不是讲 Python 的书，而更多的是专业知识。
事实上，这里所谓“跳出 Python，拥抱世界”，其实是发现 Python 和专业知识相结合，能够解决很多实际问题。这个阶段能走到什么程度，更多的取决于自己的专业知识。
¶ 深入阶段
这个阶段的你，对 Python 几乎了如指掌，那么你一定知道 Python 是用 C 语言实现的。
可是 Python 对象的“动态特征”是怎么用相对底层，连自动内存管理都没有的C语言实现的呢？这时候就不能停留在表面了，勇敢的拆开 Python 的黑盒子，深入到语言的内部，去看它的历史，读它的源码，才能真正理解它的设计思路。
这里推荐一本书：
「Python 源码剖析」：Python源码剖析 (豆瓣)
这本书把 Python 源码中最核心的部分，给出了详细的阐释，不过阅读此书需要对 C 语言内存模型和指针有着很好的理解。
另外，Python 本身是一门杂糅多种范式的动态语言，也就是说，相对于 C 的过程式、 Haskell 等的函数式、Java 基于类的面向对象而言，它都不够纯粹。换而言之，编程语言的“道学”，在 Python 中只能有限的体悟。学习某种编程范式时，从那些面向这种范式更加纯粹的语言出发，才能有更深刻的理解，也能了解到 Python 语言的根源。
这里推荐一门公开课
「编程范式」：斯坦福大学公开课：编程范式
讲师高屋建瓴，从各种编程范式的代表语言出发，给出了每种编程范式最核心的思想。
值得一提的是，这门课程对C语言有非常深入的讲解，例如C语言的范型和内存管理。这些知识，对阅读 Python 源码也有大有帮助。
Python 的许多最佳实践都隐藏在那些众所周知的框架和类库中，例如 Django、Tornado 等等。在它们的源代码中淘金，也是个不错的选择。
¶ 最后的话
每个人学编程的道路都是不一样的，其实大都殊途同归，没有迷路的人只有不能坚持的人！
希望想学 Python 想学编程的同学，不要犹豫了，看完这篇文章，
Just Getting Started ！！！
",,,,,,,,,,,,,,,,,
43,如何用尽可能少的代码画出刘看山？,,,,,,,,,,,,,,,,,,,,
44,写代码没激情怎么办？,,,,,,,,,,,,,,,,,,,,
45,Bug是如何产生的？,,,,,,,,,,,,,,,,,,,,
46,有哪些让你目瞪口呆的 Bug ？,,,,,,,,,,,,,,,,,,,,
47,有哪些让你目瞪口呆的 Bug ？,,,,,,,,,,,,,,,,,,,,
48,如何入门 Python 爬虫？,,,,,,,,,,,,,,,,,,,,
49,有哪些让你目瞪口呆的 Bug ？,,,,,,,,,,,,,,,,,,,,
50,编程究竟难在哪？,,,,,,,,,,,,,,,,,,,,
